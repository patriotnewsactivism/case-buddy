// Legal Brief Export Utilities

export interface ExportOptions {
  format: 'txt' | 'html' | 'pdf';
  filename: string;
  includeHeader: boolean;
  includeFooter: boolean;
  pageNumbers: boolean;
}

export class BriefExporter {
  
  static exportAsText(content: string, filename: string): void {
    const blob = new Blob([content], { type: 'text/plain' });
    this.downloadFile(blob, `${filename}.txt`);
  }

  static exportAsHTML(content: string, filename: string, options: Partial<ExportOptions> = {}): void {
    const htmlContent = this.generateHTML(content, options);
    const blob = new Blob([htmlContent], { type: 'text/html' });
    this.downloadFile(blob, `${filename}.html`);
  }

  static exportForPrint(content: string): void {
    const htmlContent = this.generateHTML(content, { 
      includeHeader: true, 
      includeFooter: true, 
      pageNumbers: true 
    });
    
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(htmlContent);
      printWindow.document.close();
      printWindow.focus();
      printWindow.print();
    }
  }

  private static generateHTML(content: string, options: Partial<ExportOptions> = {}): string {
    const formattedContent = content
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br>')
      .replace(/^/, '<p>')
      .replace(/$/, '</p>');

    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Legal Brief</title>
    <style>
        @page {
            size: 8.5in 11in;
            margin: 1in;
            ${options.pageNumbers ? '@bottom-center { content: "Page " counter(page); }' : ''}
        }
        
        body {
            font-family: 'Times New Roman', serif;
            font-size: 12pt;
            line-height: 1.5;
            color: #000;
            background: #fff;
            margin: 0;
            padding: 0;
        }
        
        .brief-container {
            max-width: 8.5in;
            margin: 0 auto;
            padding: 1in;
            background: white;
        }
        
        .brief-header {
            text-align: center;
            margin-bottom: 2em;
            border-bottom: 2px solid #000;
            padding-bottom: 1em;
        }
        
        .brief-footer {
            text-align: center;
            margin-top: 2em;
            border-top: 1px solid #000;
            padding-top: 1em;
            font-size: 10pt;
        }
        
        .brief-content {
            text-align: justify;
            text-indent: 0.5in;
        }
        
        .brief-content p {
            margin: 1em 0;
        }
        
        .brief-content h1,
        .brief-content h2,
        .brief-content h3 {
            text-align: center;
            font-weight: bold;
            margin: 2em 0 1em 0;
            text-indent: 0;
        }
        
        .signature-block {
            margin-top: 3em;
            text-align: right;
        }
        
        @media print {
            .brief-container {
                max-width: none;
                margin: 0;
                padding: 0;
            }
            
            body {
                font-size: 12pt;
            }
        }
    </style>
</head>
<body>
    <div class="brief-container">
        ${options.includeHeader ? this.generateHeader() : ''}
        
        <div class="brief-content">
            ${formattedContent}
        </div>
        
        ${options.includeFooter ? this.generateFooter() : ''}
    </div>
</body>
</html>`;
  }

  private static generateHeader(): string {
    return `
        <div class="brief-header">
            <h1>LEGAL BRIEF</h1>
            <p>Generated on ${new Date().toLocaleDateString()}</p>
        </div>
    `;
  }

  private static generateFooter(): string {
    return `
        <div class="brief-footer">
            <p>Generated by Case Intelligence Portal</p>
            <p>${new Date().toLocaleDateString()}</p>
        </div>
    `;
  }

  private static downloadFile(blob: Blob, filename: string): void {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  static copyToClipboard(content: string): Promise<void> {
    return navigator.clipboard.writeText(content);
  }

  static getFormattedFilename(templateName: string, caseNumber?: string): string {
    const timestamp = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    const safeCaseNumber = caseNumber?.replace(/[^a-zA-Z0-9-]/g, '_') || 'Draft';
    const safeTemplateName = templateName.replace(/[^a-zA-Z0-9-]/g, '_');
    
    return `${safeTemplateName}_${safeCaseNumber}_${timestamp}`;
  }

  static generateWordDocument(content: string, filename: string): void {
    // Basic Word document generation using HTML format that Word can open
    const wordContent = `
<html xmlns:o="urn:schemas-microsoft-com:office:office" 
      xmlns:w="urn:schemas-microsoft-com:office:word" 
      xmlns="http://www.w3.org/TR/REC-html40">
<head>
    <meta charset="utf-8">
    <title>Legal Brief</title>
    <style>
        @page {
            size: 8.5in 11in;
            margin: 1in;
        }
        body {
            font-family: 'Times New Roman', serif;
            font-size: 12pt;
            line-height: 1.5;
        }
        .MsoNormal {
            margin: 0in 0in 0pt;
            font-size: 12pt;
            font-family: 'Times New Roman', serif;
        }
    </style>
</head>
<body>
    <div class="WordSection1">
        ${content.replace(/\n\n/g, '</p><p class="MsoNormal">').replace(/\n/g, '<br>').replace(/^/, '<p class="MsoNormal">').replace(/$/, '</p>')}
    </div>
</body>
</html>`;

    const blob = new Blob([wordContent], { 
      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
    });
    this.downloadFile(blob, `${filename}.doc`);
  }
}

// Export utility functions
export const exportBriefAsText = (content: string, filename: string) => 
  BriefExporter.exportAsText(content, filename);

export const exportBriefAsHTML = (content: string, filename: string, options?: Partial<ExportOptions>) => 
  BriefExporter.exportAsHTML(content, filename, options);

export const exportBriefForPrint = (content: string) => 
  BriefExporter.exportForPrint(content);

export const exportBriefAsWord = (content: string, filename: string) => 
  BriefExporter.generateWordDocument(content, filename);

export const copyBriefToClipboard = (content: string) => 
  BriefExporter.copyToClipboard(content);

export const getFormattedFilename = (templateName: string, caseNumber?: string) => 
  BriefExporter.getFormattedFilename(templateName, caseNumber);