// /src/App.tsx
// Case Intelligence Portal – single-file React app
// TailwindCSS + shadcn/ui + lucide-react + recharts + fuse.js
// ----------------------------------------------------------------------------
// SETUP NOTES (why): keep assets portable & verifiable.
// 1) Place your files under /public/docs with these exact names (or update manifest below):
//    - 6-23 and 26.pdf
//    - my public address of the marshall attack.pdf
//    - responsive records.pdf
//    - podcast talksgow.pdf
//    - Final Response Letter for PA Redacted Documents.pdf
//    - Aug 25.pdf
//    - foia-us marshalls.pdf
// 2) Optional hero image -> /public/images/bill-of-information.jpg (from the uploaded JPEG).
// 3) This app does not claim facts; it organizes sources. You control summaries.
// ----------------------------------------------------------------------------

import React, { useMemo, useState } from "react";
import Fuse from "fuse.js";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider } from "@/components/ui/tooltip";
import { Separator } from "@/components/ui/separator";
import { Download, FileText, Filter, Gavel, Globe, Image as ImageIcon, Info, Link2, List, Moon, Search, Sun, Video, X, Map, ChartBar, Shield } from "lucide-react";
import { ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip as RTooltip } from "recharts";

// ------------------------------- Types ---------------------------------------

type DocType = "pdf" | "image" | "audio" | "transcript" | "letter" | "other";

type Doc = {
  id: string;
  title: string;
  type: DocType;
  date?: string; // ISO
  path?: string; // relative public path
  summary?: string;
  tags?: string[];
  sourceNote?: string; // short provenance blurb (why): helps readers trace context quickly
};

type TimelineEvent = {
  id: string;
  date: string; // ISO
  title: string;
  summary?: string;
  docRefs?: string[]; // Doc ids
  tags?: string[];
};

// ------------------------------ Data -----------------------------------------

const HERO_IMAGE = "/images/bill-of-information.jpg";

// (why) Minimal, editable manifest. Keep language neutral; link to source files.
const DOCS: Doc[] = [
  {
    id: "bill-image",
    title: "Bill of Information (Image)",
    type: "image",
    date: "2025-08-25",
    path: HERO_IMAGE,
    summary: "Charging doc image referencing 41 C.F.R. § 102-74.390 (conduct on federal property).",
    tags: ["charging", "41 CFR 102-74.390", "magistrate"],
    sourceNote: "Uploaded JPEG of the front page of the Bill of Information.",
  },
  {
    id: "june-transcripts",
    title: "June 23 & 26, 2025 – Courthouse interactions (transcript)",
    type: "transcript",
    date: "2025-06-23",
    path: "/docs/6-23 and 26.pdf",
    summary: "Cleaned dialogue from lobby exchanges; discussion of First Amendment, identification, and supervision.",
    tags: ["transcript", "courthouse", "First Amendment"],
    sourceNote: "From file: 6-23 and 26.pdf",
  },
  {
    id: "public-address",
    title: "Public address on Marshal incident",
    type: "letter",
    date: "2025-08-26",
    path: "/docs/my public address of the marshall attack.pdf",
    summary: "Narrative statement describing alleged assault, detention, medical response, and equipment damage.",
    tags: ["public statement", "use of force", "detention"],
    sourceNote: "From file: my public address of the marshall attack.pdf",
  },
  {
    id: "responsive-records",
    title: "Responsive Records (packet)",
    type: "pdf",
    path: "/docs/responsive records.pdf",
    summary: "Misc. responsive materials (forms/other).",
    tags: ["records", "packet"],
    sourceNote: "From file: responsive records.pdf",
  },
  {
    id: "podcast",
    title: "Podcast – TalksGow preface & discussion",
    type: "audio",
    path: "/docs/podcast talksgow.pdf",
    summary: "Preface transcript-style content tied to broader case background and parallels.",
    tags: ["media", "podcast", "speech"],
    sourceNote: "From file: podcast talksgow.pdf (textual export)",
  },
  {
    id: "foia-response",
    title: "USMS FOIA/PA Final Response Letter (10 pages released in part)",
    type: "letter",
    date: "2025-08-22",
    path: "/docs/Final Response Letter for PA Redacted Documents.pdf",
    summary: "USMS cites (b)(6), (b)(7)(C), (b)(7)(E). Offices: JSD, W/LA, N/MS, S/TX, D/UT.",
    tags: ["FOIA", "USMS", "exemptions"],
    sourceNote: "From file: Final Response Letter for PA Redacted Documents.pdf",
  },
  {
    id: "aug25-stream",
    title: "Aug 25, 2025 – Livestream & courthouse approach",
    type: "transcript",
    date: "2025-08-25",
    path: "/docs/Aug 25.pdf",
    summary: "Stream excerpts; signage; invitation inside; immediate arrest threat; remarks on BOLOs.",
    tags: ["livestream", "courthouse", "BOLO"],
    sourceNote: "From file: Aug 25.pdf",
  },
  {
    id: "foia-request",
    title: "FOIA request to USMS (expedited & fee waiver)",
    type: "letter",
    date: "2025-06-27",
    path: "/docs/foia-us marshalls.pdf",
    summary: "Seeks comms, BOLOs, and inter-agency records; references public-interest basis.",
    tags: ["FOIA", "request", "USMS"],
    sourceNote: "From file: foia-us marshalls.pdf",
  },
];

const TIMELINE: TimelineEvent[] = [
  {
    id: "t1",
    date: "2025-06-23",
    title: "Lobby interaction recorded; First Amendment discussion",
    summary: "Transcript includes exchanges with officers, supervisor arrival, and recording purpose.",
    docRefs: ["june-transcripts"],
    tags: ["recording", "lobby"],
  },
  {
    id: "t2",
    date: "2025-06-27",
    title: "FOIA filed with USMS",
    summary: "Seeks comms/BOLOs and interstate dissemination of info.",
    docRefs: ["foia-request"],
    tags: ["FOIA"],
  },
  {
    id: "t3",
    date: "2025-08-22",
    title: "USMS FOIA response (partial release & exemptions)",
    summary: "Cites privacy and law-enforcement exemptions; multiple districts identified.",
    docRefs: ["foia-response"],
    tags: ["FOIA", "exemptions"],
  },
  {
    id: "t4",
    date: "2025-08-25",
    title: "Livestream at courthouse and doorway exchange",
    summary: "Alleges being waved in then threatened with arrest; signage and BOLO remarks.",
    docRefs: ["aug25-stream", "bill-image"],
    tags: ["livestream", "courthouse"],
  },
  {
    id: "t5",
    date: "2025-08-26",
    title: "Public address on Marshal incident",
    summary: "Detailed narrative of force, detention, medical care, transport, and conditions.",
    docRefs: ["public-address"],
    tags: ["statement"],
  },
];

// ----------------------------- Utilities -------------------------------------

function formatDate(d?: string) {
  if (!d) return "";
  try {
    return new Date(d).toLocaleDateString(undefined, { year: "numeric", month: "short", day: "numeric" });
  } catch {
    return d;
  }
}

function getTypeIcon(t: DocType) {
  switch (t) {
    case "pdf":
    case "letter":
      return <FileText className="h-4 w-4" />;
    case "image":
      return <ImageIcon className="h-4 w-4" />;
    case "audio":
      return <Video className="h-4 w-4" />;
    case "transcript":
      return <List className="h-4 w-4" />;
    default:
      return <Info className="h-4 w-4" />;
  }
}

function groupBy<T, K extends string | number>(arr: T[], key: (x: T) => K) {
  return arr.reduce((acc, item) => {
    const k = key(item);
    (acc as any)[k] = (acc as any)[k] || [];
    (acc as any)[k].push(item);
    return acc;
  }, {} as Record<K, T[]>);
}

// --------------------------- Small Widgets -----------------------------------

const Stat: React.FC<{ label: string; value: string | number; icon?: React.ReactNode }> = ({ label, value, icon }) => (
  <Card className="rounded-2xl shadow-sm">
    <CardHeader className="pb-2 flex flex-row items-center justify-between">
      <CardTitle className="text-sm font-medium text-muted-foreground">{label}</CardTitle>
      {icon}
    </CardHeader>
    <CardContent>
      <div className="text-3xl font-semibold tracking-tight">{value}</div>
    </CardContent>
  </Card>
);

const TagList: React.FC<{ tags?: string[] }> = ({ tags }) => (
  <div className="flex flex-wrap gap-2">
    {(tags || []).map((t) => (
      <Badge key={t} variant="secondary" className="rounded-full">{t}</Badge>
    ))}
  </div>
);

// ------------------------------ Main App -------------------------------------

const App: React.FC = () => {
  const [query, setQuery] = useState("");
  const [activeType, setActiveType] = useState<DocType | "all">("all");
  const [selectedDoc, setSelectedDoc] = useState<Doc | null>(null);
  const [dark, setDark] = useState<boolean>(false);

  // (why) Fuzzy search across titles/summaries/tags to explore a large record set quickly.
  const fuse = useMemo(() => new Fuse(DOCS, { keys: ["title", "summary", "tags"], threshold: 0.3 }), []);

  const filtered = useMemo(() => {
    let list = DOCS;
    if (activeType !== "all") list = list.filter((d) => d.type === activeType);
    if (!query.trim()) return list;
    return fuse.search(query).map((r) => r.item).filter((d) => (activeType === "all" ? true : d.type === activeType));
  }, [query, activeType, fuse]);

  const countsByType = useMemo(() => {
    const g = groupBy(DOCS, (d) => d.type);
    const entries = Object.entries(g).map(([k, v]) => ({ type: k, count: v.length }));
    return entries;
  }, []);

  const chartData = useMemo(() => {
    const byMonth = groupBy(TIMELINE, (e) => new Date(e.date).toISOString().slice(0, 7));
    return Object.entries(byMonth)
      .sort((a, b) => a[0].localeCompare(b[0]))
      .map(([month, items]) => ({ month, events: items.length }));
  }, []);

  const earliest = useMemo(() => formatDate([...TIMELINE].sort((a, b) => a.date.localeCompare(b.date))[0]?.date), []);
  const latest = useMemo(() => formatDate([...TIMELINE].sort((a, b) => b.date.localeCompare(a.date))[0]?.date), []);

  React.useEffect(() => {
    if (dark) document.documentElement.classList.add("dark");
    else document.documentElement.classList.remove("dark");
  }, [dark]);

  return (
    <TooltipProvider>
      <div className="min-h-dvh bg-background text-foreground">
        {/* Header */}
        <header className="sticky top-0 z-40 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b">
          <div className="max-w-6xl mx-auto px-4 py-3 flex items-center gap-3">
            <Shield className="h-6 w-6" />
            <h1 className="text-lg sm:text-xl font-semibold tracking-tight">Case Intelligence Portal</h1>
            <Badge className="ml-1" variant="secondary">Public-Records Focused</Badge>
            <div className="ml-auto flex items-center gap-2">
              <div className="relative w-56 sm:w-80">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input value={query} onChange={(e) => setQuery(e.target.value)} placeholder="Search titles, tags, summaries…" className="pl-8" />
              </div>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" size="icon" onClick={() => setDark((v) => !v)}>
                    {dark ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
                  </Button>
                </TooltipTrigger>
                <TooltipContent>Theme</TooltipContent>
              </Tooltip>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="outline" className="gap-2" onClick={() => window.print()}>
                    <Download className="h-4 w-4" /> Print/Save PDF
                  </Button>
                </TooltipTrigger>
                <TooltipContent>Export a printable summary</TooltipContent>
              </Tooltip>
            </div>
          </div>
        </header>

        {/* Hero */}
        <section className="border-b">
          <div className="max-w-6xl mx-auto grid md:grid-cols-5 gap-6 px-4 py-6">
            <div className="md:col-span-3">
              <div className="aspect-[16/9] overflow-hidden rounded-2xl border bg-muted/30">
                {/* (why) Use image if present; otherwise show a soft placeholder. */}
                {HERO_IMAGE ? (
                  <img src={HERO_IMAGE} alt="Bill of Information" className="h-full w-full object-cover" />
                ) : (
                  <div className="h-full w-full grid place-items-center text-muted-foreground">
                    <ImageIcon className="h-10 w-10" />
                  </div>
                )}
              </div>
            </div>
            <div className="md:col-span-2 flex flex-col gap-4">
              <Card className="rounded-2xl">
                <CardHeader className="pb-2">
                  <CardTitle className="text-xl">U.S. v. Reardon — Overview</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3 text-sm">
                  <div className="flex items-center gap-2"><Gavel className="h-4 w-4" /><span>Charge noted on image: conduct on federal property (41 C.F.R. § 102-74.390).</span></div>
                  <div className="flex items-center gap-2"><Info className="h-4 w-4" /><span>This portal organizes the uploaded filings, requests, and transcripts without taking positions.</span></div>
                  <div className="flex items-center gap-2"><Link2 className="h-4 w-4" /><span>Each card links to the original file you provided under <code>/public/docs</code>.</span></div>
                </CardContent>
              </Card>
              <div className="grid grid-cols-2 gap-3">
                <Stat label="Docs" value={DOCS.length} icon={<FileText className="h-4 w-4" />} />
                <Stat label="Span" value={`${earliest}–${latest}`} icon={<Globe className="h-4 w-4" />} />
              </div>
            </div>
          </div>
        </section>

        {/* Body */}
        <main className="max-w-6xl mx-auto px-4 py-8 space-y-10">
          {/* Filters */}
          <section>
            <div className="flex items-center gap-3 mb-3">
              <Filter className="h-4 w-4" />
              <h2 className="text-lg font-semibold tracking-tight">Browse the record</h2>
            </div>
            <Tabs defaultValue="all" value={activeType} onValueChange={(v) => setActiveType(v as any)}>
              <TabsList className="rounded-full">
                <TabsTrigger value="all">All</TabsTrigger>
                <TabsTrigger value="pdf">PDF</TabsTrigger>
                <TabsTrigger value="letter">Letters</TabsTrigger>
                <TabsTrigger value="transcript">Transcripts</TabsTrigger>
                <TabsTrigger value="image">Images</TabsTrigger>
                <TabsTrigger value="audio">Media</TabsTrigger>
              </TabsList>
              <TabsContent value={activeType} className="mt-6">
                <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-4">
                  {filtered.map((d) => (
                    <Card key={d.id} className="rounded-2xl hover:shadow-md transition">
                      <CardHeader className="pb-2">
                        <div className="flex items-start justify-between gap-3">
                          <div>
                            <CardTitle className="text-base leading-tight">{d.title}</CardTitle>
                            <div className="text-xs text-muted-foreground">{formatDate(d.date)}</div>
                          </div>
                          <div className="text-muted-foreground">{getTypeIcon(d.type)}</div>
                        </div>
                      </CardHeader>
                      <CardContent className="space-y-3">
                        <p className="text-sm line-clamp-3 min-h-[3.5rem]">{d.summary}</p>
                        <TagList tags={d.tags} />
                        <div className="flex gap-2 pt-1">
                          {d.path && (
                            <Button variant="outline" size="sm" className="rounded-full" onClick={() => setSelectedDoc(d)}>
                              Open
                            </Button>
                          )}
                          {d.path && (
                            <a href={d.path} target="_blank" rel="noreferrer" className="ml-auto">
                              <Button size="sm" variant="ghost" className="rounded-full">
                                <Link2 className="h-4 w-4 mr-2" /> Source
                              </Button>
                            </a>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </TabsContent>
            </Tabs>
          </section>

          <Separator />

          {/* Timeline */}
          <section>
            <div className="flex items-center gap-3 mb-3">
              <List className="h-4 w-4" />
              <h2 className="text-lg font-semibold tracking-tight">Timeline</h2>
            </div>
            <div className="grid lg:grid-cols-3 gap-6">
              <div className="lg:col-span-2 space-y-4">
                {TIMELINE.map((e) => (
                  <Card key={e.id} className="rounded-2xl">
                    <CardHeader className="pb-2">
                      <div className="flex items-start justify-between">
                        <div>
                          <CardTitle className="text-base">{e.title}</CardTitle>
                          <div className="text-xs text-muted-foreground">{formatDate(e.date)}</div>
                        </div>
                        <TagList tags={e.tags} />
                      </div>
                    </CardHeader>
                    <CardContent className="text-sm space-y-2">
                      <p>{e.summary}</p>
                      {e.docRefs && (
                        <div className="flex flex-wrap gap-2 pt-1">
                          {e.docRefs.map((id) => {
                            const d = DOCS.find((x) => x.id === id);
                            if (!d) return null;
                            return (
                              <Button key={id} variant="secondary" size="sm" className="rounded-full" onClick={() => setSelectedDoc(d)}>
                                <FileText className="h-3 w-3 mr-2" /> {d.title.slice(0, 36)}{d.title.length > 36 ? "…" : ""}
                              </Button>
                            );
                          })}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </div>

              {/* Chart */}
              <Card className="rounded-2xl lg:sticky lg:top-[84px] h-fit">
                <CardHeader className="pb-2">
                  <CardTitle className="text-base flex items-center gap-2"><ChartBar className="h-4 w-4" /> Events by month</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-48">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={chartData}>
                        <XAxis dataKey="month" fontSize={12} tickLine={false} axisLine={false} />
                        <YAxis allowDecimals={false} fontSize={12} tickLine={false} axisLine={false} />
                        <RTooltip cursor={{ fill: "hsl(var(--muted))" }} />
                        <Bar dataKey="events" radius={[6,6,0,0]} />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
            </div>
          </section>

          <Separator />

          {/* Legal */}
          <section>
            <div className="flex items-center gap-3 mb-3">
              <Gavel className="h-4 w-4" />
              <h2 className="text-lg font-semibold tracking-tight">Key legal references (from materials)</h2>
            </div>
            <div className="grid md:grid-cols-2 gap-4">
              <Card className="rounded-2xl">
                <CardHeader className="pb-2"><CardTitle className="text-base">41 C.F.R. § 102-74.390</CardTitle></CardHeader>
                <CardContent className="text-sm space-y-2">
                  <p>Regulation referenced on the charging image regarding conduct on federal property.</p>
                  <TagList tags={["federal property", "conduct rule"]} />
                </CardContent>
              </Card>
              <Card className="rounded-2xl">
                <CardHeader className="pb-2"><CardTitle className="text-base">FOIA Exemptions cited</CardTitle></CardHeader>
                <CardContent className="text-sm space-y-2">
                  <p>USMS response cites (b)(6), (b)(7)(C), and (b)(7)(E) with privacy and techniques rationales.</p>
                  <TagList tags={["(b)(6)", "(b)(7)(C)", "(b)(7)(E)"]} />
                </CardContent>
              </Card>
            </div>
          </section>

          <Separator />

          {/* About section */}
          <section>
            <div className="flex items-center gap-3 mb-3">
              <Info className="h-4 w-4" />
              <h2 className="text-lg font-semibold tracking-tight">How to extend this portal</h2>
            </div>
            <Card className="rounded-2xl">
              <CardContent className="text-sm p-5 space-y-3">
                <ul className="list-disc pl-5 space-y-2">
                  <li>Add files to <code>/public/docs</code> and append entries to <code>DOCS</code>.</li>
                  <li>For moments, append to <code>TIMELINE</code> and reference related docs via <code>docRefs</code>.</li>
                  <li>Replace the hero image via <code>/public/images/bill-of-information.jpg</code>.</li>
                  <li>Use the print button for a shareable PDF snapshot of the current view.</li>
                </ul>
              </CardContent>
            </Card>
          </section>
        </main>

        {/* Footer */}
        <footer className="border-t">
          <div className="max-w-6xl mx-auto px-4 py-8 text-xs text-muted-foreground flex flex-wrap items-center gap-2">
            <Map className="h-3.5 w-3.5" /> Built as a neutral organizer for your uploaded records. Verify all claims against the originals.
          </div>
        </footer>

        {/* Doc viewer */}
        <Dialog open={!!selectedDoc} onOpenChange={() => setSelectedDoc(null)}>
          <DialogContent className="max-w-4xl">
            <DialogHeader>
              <DialogTitle className="text-base flex items-center gap-2">
                {getTypeIcon(selectedDoc?.type || "pdf")} {selectedDoc?.title}
              </DialogTitle>
            </DialogHeader>
            <div className="space-y-3">
              <div className="text-xs text-muted-foreground flex items-center gap-2">
                {selectedDoc?.date && <span>{formatDate(selectedDoc?.date)}</span>}
                {selectedDoc?.sourceNote && (
                  <>
                    <span>•</span>
                    <span>{selectedDoc?.sourceNote}</span>
                  </>
                )}
              </div>
              {selectedDoc?.path ? (
                selectedDoc.type === "image" ? (
                  <img src={selectedDoc.path} alt={selectedDoc.title} className="w-full rounded-lg border" />
                ) : (
                  <iframe title={selectedDoc.title} src={selectedDoc.path} className="w-full h-[70vh] rounded-lg border" />
                )
              ) : (
                <div className="text-sm text-muted-foreground">No file path provided.</div>
              )}
              <div className="flex justify-between items-center">
                <TagList tags={selectedDoc?.tags} />
                {selectedDoc?.path && (
                  <a href={selectedDoc.path} target="_blank" rel="noreferrer">
                    <Button size="sm" variant="outline" className="rounded-full"><Link2 className="h-4 w-4 mr-2" /> Open source</Button>
                  </a>
                )}
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </TooltipProvider>
  );
};

export default App;
