{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# American Injustice Â· Case Intelligence Portal\n\n## Overview\n\nThis is a comprehensive case intelligence portal designed to organize, analyze, and present legal case information in a systematic way. The application serves as a digital repository for legal documents, evidence, timeline events, FOIA requests, and case analysis tools. Built as a full-stack web application, it provides an intuitive interface for managing complex legal cases with features like document management, timeline visualization, evidence galleries, and advanced search capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n**Frontend Architecture**\n- React-based single-page application built with TypeScript\n- Uses Vite as the build tool and development server\n- Implements client-side routing with Wouter for navigation\n- State management handled through React Query (@tanstack/react-query) for server state\n- Component library based on shadcn/ui with Radix UI primitives\n- Styled with Tailwind CSS using a custom design system\n- Responsive design with mobile-first approach using custom breakpoints\n\n**Component Structure**\n- Modular component architecture with reusable UI components\n- Case-specific components for documents, timeline events, evidence galleries\n- Layout components for consistent page structure\n- Form components with React Hook Form integration\n- Custom hooks for search functionality and mobile responsiveness\n\n**Backend Architecture**\n- Express.js server with TypeScript\n- RESTful API design with route-based organization\n- Middleware for request logging and error handling\n- Object storage integration with Google Cloud Storage\n- File upload handling with access control policies\n- Development-specific Vite integration for hot module replacement\n\n**Data Storage Solutions**\n- PostgreSQL database as primary data store\n- Drizzle ORM for database schema management and queries\n- Database migrations handled through Drizzle Kit\n- Neon Database serverless PostgreSQL for cloud deployment\n- In-memory storage fallback for development/testing\n\n**Database Schema Design**\n- Users table for authentication and access control\n- Case documents table with metadata, tags, and file paths\n- Timeline events table with chronological case developments\n- FOIA requests table tracking government information requests\n- Case notes table for additional documentation\n- JSON fields for flexible tag and reference storage\n\n**Authentication and Authorization**\n- Session-based authentication system\n- PostgreSQL session store (connect-pg-simple)\n- Object-level access control with custom ACL policies\n- Public and private object access patterns\n- File upload access controls\n\n**File Management System**\n- Google Cloud Storage integration for document storage\n- Uppy.js for client-side file upload with progress tracking\n- Presigned URL generation for direct-to-cloud uploads\n- Public and private file serving endpoints\n- File search capabilities across public and private storage\n\n**Search and Analytics**\n- Fuse.js for client-side fuzzy search functionality\n- Advanced filtering by document type, date ranges, and tags\n- Search across documents, timeline events, and case notes\n- Analytics dashboard with data visualization using Recharts\n- Export functionality for reports and case summaries\n\n**Design System**\n- CSS custom properties for theming\n- Dark/light mode support with system preference detection\n- Consistent spacing, typography, and color schemes\n- Responsive breakpoints and mobile-optimized layouts\n- Print-friendly styles for document export\n\n## External Dependencies\n\n**Frontend Libraries**\n- React ecosystem: React, React DOM, React Query\n- UI Components: Radix UI primitives, shadcn/ui component library\n- Styling: Tailwind CSS, class-variance-authority for component variants\n- Forms: React Hook Form with Hookform Resolvers\n- Search: Fuse.js for fuzzy search capabilities\n- Charts: Recharts for data visualization\n- File Upload: Uppy with AWS S3 plugin\n- Icons: Lucide React icon library\n- Date Handling: date-fns for date manipulation\n\n**Backend Dependencies**\n- Express.js web framework\n- Database: Drizzle ORM, PostgreSQL driver (@neondatabase/serverless)\n- File Storage: Google Cloud Storage SDK\n- Session Management: connect-pg-simple for PostgreSQL sessions\n- Development Tools: tsx for TypeScript execution, esbuild for production builds\n\n**Build and Development Tools**\n- Vite for frontend development and building\n- TypeScript for type safety\n- ESBuild for server-side bundling\n- PostCSS with Autoprefixer for CSS processing\n- Replit-specific development plugins and error overlays\n\n**Cloud Services**\n- Neon Database for serverless PostgreSQL hosting\n- Google Cloud Storage for file and document storage\n- Replit hosting platform with integrated development environment\n- Environment-based configuration for different deployment stages\n\n**Development and Testing**\n- Hot module replacement in development\n- TypeScript strict mode compilation\n- Path mapping for clean imports\n- Print media queries for document export functionality\n- Error boundary handling and logging","size_bytes":5144},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// Enable CORS for all routes\napp.use(cors({\n  origin: true,\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'Cookie', 'X-Requested-With'],\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2328},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport cookieParser from \"cookie-parser\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\nimport { LegalAnalyticsService } from \"./legal-analytics\";\nimport authRoutes from \"./auth-routes\";\nimport subscriptionRoutes from \"./subscription-routes\";\nimport { optionalAuth, authenticateUser } from \"./auth\";\nimport { checkSubscription, requireActiveSubscription } from \"./subscription-middleware\";\nimport { briefGenerationService } from \"./services/briefGeneration\";\nimport { ocrService } from \"./services/ocrService\";\nimport { precedentResearchService } from \"./services/precedentResearch\";\nimport { semanticSearchService } from \"./services/semanticSearch\";\nimport { couponService } from \"./services/couponService\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Middleware\n  app.use(cookieParser());\n  app.use(optionalAuth);\n\n  // Authentication routes\n  app.use(\"/api/auth\", authRoutes);\n  \n  // Subscription routes\n  app.use(\"/api/subscription\", subscriptionRoutes);\n  \n  // Add subscription check for protected routes\n  app.use(checkSubscription);\n\n  // This endpoint is used to serve public assets.\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // This endpoint is used to serve private objects that can be accessed publicly\n  // (i.e.: without authentication and ACL check).\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // This endpoint is used to get the upload URL for an object entity.\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // An example endpoint for updating the model state after an object entity is uploaded (document in this case).\n  app.put(\"/api/documents\", async (req, res) => {\n    if (!req.body.documentURL) {\n      return res.status(400).json({ error: \"documentURL is required\" });\n    }\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = objectStorageService.normalizeObjectEntityPath(\n        req.body.documentURL,\n      );\n\n      // In a real implementation, you would save this to the database\n      // For now, we'll just return the normalized path\n      res.status(200).json({\n        objectPath: objectPath,\n        success: true,\n      });\n    } catch (error) {\n      console.error(\"Error processing document upload:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Legal Analytics API Routes (Premium features - require active subscription)\n  app.post(\"/api/legal-analytics/predict-outcome\", requireActiveSubscription, LegalAnalyticsService.predictCaseOutcome);\n  app.post(\"/api/legal-analytics/judge-analytics\", requireActiveSubscription, LegalAnalyticsService.analyzeJudge);\n  app.post(\"/api/legal-analytics/find-precedents\", requireActiveSubscription, LegalAnalyticsService.findRelevantPrecedents);\n  app.post(\"/api/legal-analytics/strategy-recommendations\", requireActiveSubscription, LegalAnalyticsService.generateStrategyRecommendations);\n  app.post(\"/api/legal-analytics/analyze-evidence\", requireActiveSubscription, LegalAnalyticsService.analyzeEvidence);\n  app.post(\"/api/legal-analytics/similar-cases\", requireActiveSubscription, LegalAnalyticsService.findSimilarCases);\n\n  // Legal Brief Generation API Routes (Premium features - require active subscription)\n  app.post(\"/api/brief-generation/generate\", requireActiveSubscription, async (req, res) => {\n    try {\n      const { briefGenerationService } = await import('./services/briefGeneration');\n      const brief = await briefGenerationService.generateLegalBrief(req.body);\n      res.json({ success: true, brief });\n    } catch (error: any) {\n      console.error('Brief generation error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to generate legal brief' \n      });\n    }\n  });\n\n  app.get(\"/api/brief-generation/templates\", async (req, res) => {\n    try {\n      const { briefGenerationService } = await import('./services/briefGeneration');\n      const templates = briefGenerationService.getBriefTemplates();\n      res.json({ success: true, templates });\n    } catch (error: any) {\n      console.error('Error fetching brief templates:', error);\n      res.status(500).json({ \n        success: false, \n        error: 'Failed to fetch brief templates' \n      });\n    }\n  });\n\n  app.post(\"/api/brief-generation/summary\", requireActiveSubscription, async (req, res) => {\n    try {\n      const { briefGenerationService } = await import('./services/briefGeneration');\n      const summary = await briefGenerationService.generateBriefSummary(req.body.brief);\n      res.json({ success: true, summary });\n    } catch (error: any) {\n      console.error('Brief summary generation error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to generate brief summary' \n      });\n    }\n  });\n\n  // Document OCR and Analysis Routes\n  app.post(\"/api/documents/ocr\", requireActiveSubscription, async (req, res) => {\n    try {\n      const { filePath, fileName } = req.body;\n      \n      if (!filePath || !fileName) {\n        return res.status(400).json({ error: \"File path and name are required\" });\n      }\n      \n      const ocrResult = await ocrService.extractTextFromDocument(filePath, fileName);\n      \n      // Perform detailed analysis\n      const detailedAnalysis = await ocrService.performDetailedDocumentAnalysis(ocrResult);\n      \n      res.json({ \n        success: true, \n        ocr: ocrResult,\n        analysis: detailedAnalysis\n      });\n    } catch (error: any) {\n      console.error('OCR processing error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to process document' \n      });\n    }\n  });\n\n  // Legal Precedent Research Routes\n  app.post(\"/api/legal-research/precedents\", requireActiveSubscription, async (req, res) => {\n    try {\n      const researchQuery = req.body;\n      \n      if (!researchQuery.legalIssue) {\n        return res.status(400).json({ error: \"Legal issue is required\" });\n      }\n      \n      const results = await precedentResearchService.conductResearch(researchQuery);\n      \n      res.json({ \n        success: true, \n        research: results\n      });\n    } catch (error: any) {\n      console.error('Legal research error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to conduct legal research' \n      });\n    }\n  });\n\n  // Semantic Document Search Routes\n  app.post(\"/api/documents/semantic-search\", requireActiveSubscription, async (req, res) => {\n    try {\n      const searchQuery = req.body;\n      \n      if (!searchQuery.query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      \n      const results = await semanticSearchService.performSemanticSearch(searchQuery);\n      \n      res.json({ \n        success: true, \n        results: results\n      });\n    } catch (error: any) {\n      console.error('Semantic search error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to perform semantic search' \n      });\n    }\n  });\n\n  // Find Similar Documents\n  app.get(\"/api/documents/:id/similar\", requireActiveSubscription, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const maxResults = parseInt(req.query.maxResults as string) || 10;\n      \n      const similarDocs = await semanticSearchService.findSimilarDocuments(id, maxResults);\n      \n      res.json({ \n        success: true, \n        similarDocuments: similarDocs\n      });\n    } catch (error: any) {\n      console.error('Similar documents search error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to find similar documents' \n      });\n    }\n  });\n\n  // Advanced Search by Legal Concept\n  app.post(\"/api/legal-research/concept-search\", requireActiveSubscription, async (req, res) => {\n    try {\n      const { concept, caseId } = req.body;\n      \n      if (!concept) {\n        return res.status(400).json({ error: \"Legal concept is required\" });\n      }\n      \n      const results = await semanticSearchService.searchByLegalConcept(concept, caseId);\n      \n      res.json({ \n        success: true, \n        results: results\n      });\n    } catch (error: any) {\n      console.error('Legal concept search error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to search by legal concept' \n      });\n    }\n  });\n\n  // Evidence Search\n  app.post(\"/api/legal-research/evidence-search\", requireActiveSubscription, async (req, res) => {\n    try {\n      const { factPattern, caseId } = req.body;\n      \n      if (!factPattern) {\n        return res.status(400).json({ error: \"Fact pattern is required\" });\n      }\n      \n      const results = await semanticSearchService.findEvidence(factPattern, caseId);\n      \n      res.json({ \n        success: true, \n        results: results\n      });\n    } catch (error: any) {\n      console.error('Evidence search error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to search for evidence' \n      });\n    }\n  });\n\n  // Precedent Search\n  app.post(\"/api/legal-research/precedent-search\", requireActiveSubscription, async (req, res) => {\n    try {\n      const { legalIssue } = req.body;\n      \n      if (!legalIssue) {\n        return res.status(400).json({ error: \"Legal issue is required\" });\n      }\n      \n      const results = await semanticSearchService.researchPrecedents(legalIssue);\n      \n      res.json({ \n        success: true, \n        results: results\n      });\n    } catch (error: any) {\n      console.error('Precedent search error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to search precedents' \n      });\n    }\n  });\n\n  // Add document to search index\n  app.post(\"/api/documents/index\", requireActiveSubscription, async (req, res) => {\n    try {\n      const document = req.body;\n      \n      if (!document.id || !document.title) {\n        return res.status(400).json({ error: \"Document ID and title are required\" });\n      }\n      \n      await semanticSearchService.addDocumentToIndex(document);\n      \n      res.json({ \n        success: true, \n        message: \"Document added to search index\"\n      });\n    } catch (error: any) {\n      console.error('Document indexing error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to index document' \n      });\n    }\n  });\n\n  // Coupon Management Routes\n  \n  // Validate coupon code\n  app.post(\"/api/coupons/validate\", async (req, res) => {\n    try {\n      const { code, orderAmount, planType } = req.body;\n      \n      if (!code) {\n        return res.status(400).json({ error: \"Coupon code is required\" });\n      }\n      \n      const userId = (req as any).user?.id;\n      const result = await couponService.validateCoupon(code, userId, orderAmount, planType);\n      \n      res.json(result);\n    } catch (error: any) {\n      console.error('Coupon validation error:', error);\n      res.status(500).json({ \n        valid: false, \n        error: error.message || 'Failed to validate coupon' \n      });\n    }\n  });\n\n  // Apply coupon during registration/subscription\n  app.post(\"/api/coupons/apply\", authenticateUser, async (req, res) => {\n    try {\n      const { couponId, originalAmount, discountApplied, subscriptionId, metadata } = req.body;\n      const userId = (req as any).user.id;\n      \n      if (!couponId || originalAmount === undefined || discountApplied === undefined) {\n        return res.status(400).json({ \n          error: \"Coupon ID, original amount, and discount amount are required\" \n        });\n      }\n      \n      await couponService.applyCoupon(\n        couponId, \n        userId, \n        originalAmount, \n        discountApplied, \n        subscriptionId, \n        metadata\n      );\n      \n      res.json({ \n        success: true, \n        message: \"Coupon applied successfully\" \n      });\n    } catch (error: any) {\n      console.error('Coupon application error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to apply coupon' \n      });\n    }\n  });\n\n  // Admin Routes (require admin role)\n  const requireAdmin = (req: any, res: any, next: any) => {\n    if (!req.user || req.user?.role !== 'admin') {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    next();\n  };\n\n  // Create coupon (admin only)\n  app.post(\"/api/admin/coupons\", authenticateUser, requireAdmin, async (req, res) => {\n    try {\n      const couponData = req.body;\n      couponData.createdBy = (req as any).user.id;\n      \n      const coupon = await couponService.createCoupon(couponData);\n      \n      res.json({ \n        success: true, \n        coupon \n      });\n    } catch (error: any) {\n      console.error('Coupon creation error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to create coupon' \n      });\n    }\n  });\n\n  // Get all coupons (admin only)\n  app.get(\"/api/admin/coupons\", authenticateUser, requireAdmin, async (req, res) => {\n    try {\n      const coupons = await couponService.getAllCoupons();\n      \n      res.json({ \n        success: true, \n        coupons \n      });\n    } catch (error: any) {\n      console.error('Fetch coupons error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to fetch coupons' \n      });\n    }\n  });\n\n  // Update coupon (admin only)\n  app.put(\"/api/admin/coupons/:id\", authenticateUser, requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updateData = req.body;\n      \n      const coupon = await couponService.updateCoupon(id, updateData);\n      \n      res.json({ \n        success: true, \n        coupon \n      });\n    } catch (error: any) {\n      console.error('Coupon update error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to update coupon' \n      });\n    }\n  });\n\n  // Deactivate coupon (admin only)\n  app.delete(\"/api/admin/coupons/:id\", authenticateUser, requireAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      const coupon = await couponService.deactivateCoupon(id);\n      \n      res.json({ \n        success: true, \n        message: \"Coupon deactivated successfully\",\n        coupon \n      });\n    } catch (error: any) {\n      console.error('Coupon deactivation error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to deactivate coupon' \n      });\n    }\n  });\n\n  // Get coupon analytics (admin only)\n  app.get(\"/api/admin/coupons/analytics/:id?\", authenticateUser, requireAdmin, async (req, res) => {\n    try {\n      const couponId = req.params.id ? parseInt(req.params.id) : undefined;\n      \n      const analytics = await couponService.getCouponAnalytics(couponId);\n      \n      res.json({ \n        success: true, \n        analytics \n      });\n    } catch (error: any) {\n      console.error('Coupon analytics error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to fetch analytics' \n      });\n    }\n  });\n\n  // Bulk create coupons (admin only)\n  app.post(\"/api/admin/coupons/bulk\", authenticateUser, requireAdmin, async (req, res) => {\n    try {\n      const { template, count, prefix } = req.body;\n      \n      if (!template || !count || count <= 0 || count > 100) {\n        return res.status(400).json({ \n          error: \"Valid template and count (1-100) are required\" \n        });\n      }\n      \n      template.createdBy = (req as any).user.id;\n      const coupons = await couponService.bulkCreateCoupons(template, count, prefix);\n      \n      res.json({ \n        success: true, \n        message: `${coupons.length} coupons created successfully`,\n        coupons \n      });\n    } catch (error: any) {\n      console.error('Bulk coupon creation error:', error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || 'Failed to create coupons' \n      });\n    }\n  });\n\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ \n      status: \"healthy\", \n      timestamp: new Date().toISOString(),\n      service: \"Case Intelligence Portal API\"\n    });\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":18018},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, boolean, date, serial, integer, numeric } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  role: varchar(\"role\", { length: 20 }).notNull().default(\"user\"), // admin, user, viewer\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  // Subscription fields\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  subscriptionStatus: varchar(\"subscription_status\", { length: 20 }).default(\"trial\"), // trial, active, canceled, past_due\n  trialEndsAt: timestamp(\"trial_ends_at\"),\n  subscriptionEndsAt: timestamp(\"subscription_ends_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const cases = pgTable(\"cases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  caseNumber: text(\"case_number\"),\n  description: text(\"description\"),\n  caseType: varchar(\"case_type\", { length: 50 }).notNull(), // civil_rights, criminal, administrative, etc.\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // active, closed, pending, archived\n  priority: varchar(\"priority\", { length: 10 }).notNull().default(\"medium\"), // low, medium, high, urgent\n  court: text(\"court\"),\n  jurisdiction: text(\"jurisdiction\"),\n  opposingParty: text(\"opposing_party\"),\n  leadAttorney: text(\"lead_attorney\"),\n  dateOpened: date(\"date_opened\").notNull(),\n  dateClosed: date(\"date_closed\"),\n  tags: jsonb(\"tags\").$type<string[]>().default([]),\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n});\n\nexport const caseDocuments = pgTable(\"case_documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: varchar(\"case_id\").references(() => cases.id).notNull(),\n  title: text(\"title\").notNull(),\n  type: text(\"type\").notNull(), // pdf, image, audio, video, transcript, letter, other\n  date: timestamp(\"date\"),\n  path: text(\"path\"),\n  summary: text(\"summary\"),\n  tags: jsonb(\"tags\").$type<string[]>(),\n  sourceNote: text(\"source_note\"),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id),\n});\n\nexport const timelineEvents = pgTable(\"timeline_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: varchar(\"case_id\").references(() => cases.id).notNull(),\n  date: timestamp(\"date\").notNull(),\n  title: text(\"title\").notNull(),\n  summary: text(\"summary\"),\n  docRefs: jsonb(\"doc_refs\").$type<string[]>(),\n  tags: jsonb(\"tags\").$type<string[]>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const foiaRequests = pgTable(\"foia_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: varchar(\"case_id\").references(() => cases.id).notNull(),\n  agency: text(\"agency\").notNull(),\n  requestNumber: text(\"request_number\"),\n  status: text(\"status\").notNull(), // submitted, pending, completed, denied\n  submittedDate: timestamp(\"submitted_date\").notNull(),\n  responseDate: timestamp(\"response_date\"),\n  description: text(\"description\"),\n  responseSummary: text(\"response_summary\"),\n  documentsReceived: jsonb(\"documents_received\").$type<string[]>(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const caseNotes = pgTable(\"case_notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: varchar(\"case_id\").references(() => cases.id).notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  documentId: varchar(\"document_id\").references(() => caseDocuments.id),\n  tags: jsonb(\"tags\").$type<string[]>(),\n  isPrivate: boolean(\"is_private\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n});\n\nexport const motions = pgTable(\"motions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: varchar(\"case_id\").references(() => cases.id).notNull(),\n  title: text(\"title\").notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // motion_to_dismiss, motion_for_summary_judgment, etc.\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"draft\"), // draft, filed, pending, granted, denied\n  priority: varchar(\"priority\", { length: 10 }).notNull().default(\"medium\"), // low, medium, high, urgent\n  description: text(\"description\"),\n  dueDate: date(\"due_date\"),\n  filedDate: date(\"filed_date\"),\n  court: text(\"court\"),\n  caseNumber: text(\"case_number\"),\n  assignedTo: text(\"assigned_to\"),\n  notes: text(\"notes\"),\n  attachments: jsonb(\"attachments\").$type<string[]>().default([]),\n  tags: jsonb(\"tags\").$type<string[]>().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n});\n\nexport const deadlines = pgTable(\"deadlines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  caseId: varchar(\"case_id\").references(() => cases.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  dueDate: timestamp(\"due_date\").notNull(),\n  priority: varchar(\"priority\", { length: 10 }).notNull().default(\"medium\"),\n  category: varchar(\"category\", { length: 30 }).notNull(), // filing, discovery, hearing, appeal, etc.\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"upcoming\"), // upcoming, overdue, completed, cancelled\n  relatedMotionId: varchar(\"related_motion_id\").references(() => motions.id),\n  reminderDays: jsonb(\"reminder_days\").$type<number[]>().default([7, 3, 1]), // Days before deadline to remind\n  isCompleted: boolean(\"is_completed\").default(false),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n});\n\n// Sessions table for authentication\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  firstName: true,\n  lastName: true,\n});\n\nexport const loginSchema = z.object({\n  usernameOrEmail: z.string().min(1, \"Username or email is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const insertCaseDocumentSchema = createInsertSchema(caseDocuments).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertTimelineEventSchema = createInsertSchema(timelineEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFoiaRequestSchema = createInsertSchema(foiaRequests).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCaseNoteSchema = createInsertSchema(caseNotes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCaseSchema = createInsertSchema(cases).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMotionSchema = createInsertSchema(motions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDeadlineSchema = createInsertSchema(deadlines).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertCaseDocument = z.infer<typeof insertCaseDocumentSchema>;\nexport type CaseDocument = typeof caseDocuments.$inferSelect;\n\nexport type InsertTimelineEvent = z.infer<typeof insertTimelineEventSchema>;\nexport type TimelineEvent = typeof timelineEvents.$inferSelect;\n\nexport type InsertFoiaRequest = z.infer<typeof insertFoiaRequestSchema>;\nexport type FoiaRequest = typeof foiaRequests.$inferSelect;\n\nexport type InsertCaseNote = z.infer<typeof insertCaseNoteSchema>;\nexport type CaseNote = typeof caseNotes.$inferSelect;\n\nexport type InsertCase = z.infer<typeof insertCaseSchema>;\nexport type Case = typeof cases.$inferSelect;\n\nexport type InsertMotion = z.infer<typeof insertMotionSchema>;\nexport type Motion = typeof motions.$inferSelect;\n\nexport type InsertDeadline = z.infer<typeof insertDeadlineSchema>;\nexport type Deadline = typeof deadlines.$inferSelect;\n\n// Coupon Codes table\nexport const couponCodes = pgTable(\"coupon_codes\", {\n  id: serial(\"id\").primaryKey(),\n  code: varchar(\"code\", { length: 50 }).unique().notNull(),\n  description: text(\"description\"),\n  discountType: varchar(\"discount_type\", { length: 20 }).notNull(), // 'percentage' or 'fixed'\n  discountValue: numeric(\"discount_value\", { precision: 10, scale: 2 }).notNull(),\n  maxUses: integer(\"max_uses\").default(1), // null = unlimited, 1 = single use\n  currentUses: integer(\"current_uses\").default(0).notNull(),\n  validFrom: timestamp(\"valid_from\").defaultNow().notNull(),\n  validUntil: timestamp(\"valid_until\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdBy: varchar(\"created_by\"), // admin who created it\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  // Additional constraints\n  minOrderValue: numeric(\"min_order_value\", { precision: 10, scale: 2 }),\n  applicablePlans: text(\"applicable_plans\").array(), // which subscription plans this applies to\n  metadata: jsonb(\"metadata\"), // flexible data for additional rules\n});\n\n// Coupon Usage tracking\nexport const couponUsage = pgTable(\"coupon_usage\", {\n  id: serial(\"id\").primaryKey(),\n  couponId: integer(\"coupon_id\").references(() => couponCodes.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  usedAt: timestamp(\"used_at\").defaultNow().notNull(),\n  discountApplied: numeric(\"discount_applied\", { precision: 10, scale: 2 }).notNull(),\n  originalAmount: numeric(\"original_amount\", { precision: 10, scale: 2 }).notNull(),\n  finalAmount: numeric(\"final_amount\", { precision: 10, scale: 2 }).notNull(),\n  subscriptionId: varchar(\"subscription_id\"), // Stripe subscription ID if applicable\n  metadata: jsonb(\"metadata\"),\n});\n\n// Relations\nexport const couponCodesRelations = relations(couponCodes, ({ many }) => ({\n  usage: many(couponUsage),\n}));\n\nexport const couponUsageRelations = relations(couponUsage, ({ one }) => ({\n  coupon: one(couponCodes, {\n    fields: [couponUsage.couponId],\n    references: [couponCodes.id],\n  }),\n  user: one(users, {\n    fields: [couponUsage.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertCouponCodeSchema = createInsertSchema(couponCodes).omit({\n  id: true,\n  currentUses: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCouponUsageSchema = createInsertSchema(couponUsage).omit({\n  id: true,\n  usedAt: true,\n});\n\n// Types\nexport type InsertCouponCode = z.infer<typeof insertCouponCodeSchema>;\nexport type CouponCode = typeof couponCodes.$inferSelect;\n\nexport type InsertCouponUsage = z.infer<typeof insertCouponUsageSchema>;\nexport type CouponUsage = typeof couponUsage.$inferSelect;\n","size_bytes":11751},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { CaseProvider } from \"@/lib/case-context\";\nimport { AuthProvider, useAuth } from \"@/lib/auth-context\";\nimport Dashboard from \"@/pages/dashboard\";\nimport LoginPage from \"@/pages/login\";\nimport Timeline from \"@/pages/timeline\";\nimport Documents from \"@/pages/documents\";\nimport Evidence from \"@/pages/evidence\";\nimport VideoEvidence from \"@/pages/video-evidence\";\nimport Motions from \"@/pages/motions\";\nimport Deadlines from \"@/pages/deadlines\";\nimport CaseManagement from \"@/pages/case-management\";\nimport BriefGenerator from \"@/pages/brief-generator\";\nimport LegalAnalytics from \"@/pages/legal-analytics\";\nimport FoiaRequests from \"@/pages/foia\";\nimport Analytics from \"@/pages/analytics\";\nimport Search from \"@/pages/search\";\nimport AdvancedSearch from \"@/pages/advanced-search\";\nimport SubscriptionPage from \"@/pages/subscription\";\nimport AdminCoupons from \"@/pages/admin-coupons\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRouter() {\n  const { isAuthenticated, isLoading } = useAuth();\n  \n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <LoginPage />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/timeline\" component={Timeline} />\n      <Route path=\"/documents\" component={Documents} />\n      <Route path=\"/evidence\" component={Evidence} />\n      <Route path=\"/video-evidence\" component={VideoEvidence} />\n      <Route path=\"/motions\" component={Motions} />\n      <Route path=\"/deadlines\" component={Deadlines} />\n      <Route path=\"/cases\" component={CaseManagement} />\n      <Route path=\"/brief-generator\" component={BriefGenerator} />\n      <Route path=\"/legal-analytics\" component={LegalAnalytics} />\n      <Route path=\"/foia\" component={FoiaRequests} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route path=\"/search\" component={Search} />\n      <Route path=\"/advanced-search\" component={AdvancedSearch} />\n      <Route path=\"/subscription\" component={SubscriptionPage} />\n      <Route path=\"/admin/coupons\" component={AdminCoupons} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const isMobile = useIsMobile();\n  const { isAuthenticated } = useAuth();\n  \n  if (!isAuthenticated) {\n    return <ProtectedRouter />;\n  }\n  \n  return (\n    <CaseProvider>\n      <div className=\"flex h-screen bg-background\">\n        <Sidebar />\n        <main className={`flex-1 overflow-hidden ${isMobile ? 'pl-0' : ''}`}>\n          <ProtectedRouter />\n        </main>\n      </div>\n    </CaseProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <AppContent />\n          <Toaster />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3526},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(45, 100%, 98%);\n  --foreground: hsl(220, 15%, 20%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 15%, 20%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 15%, 20%);\n  --primary: hsl(25, 95%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(45, 80%, 95%);\n  --secondary-foreground: hsl(220, 15%, 25%);\n  --muted: hsl(45, 50%, 96%);\n  --muted-foreground: hsl(220, 10%, 55%);\n  --accent: hsl(40, 90%, 92%);\n  --accent-foreground: hsl(220, 15%, 25%);\n  --destructive: hsl(0, 85%, 58%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(45, 30%, 88%);\n  --input: hsl(45, 40%, 94%);\n  --ring: hsl(25, 95%, 53%);\n  --chart-1: hsl(25, 95%, 53%);\n  --chart-2: hsl(160, 85%, 45%);\n  --chart-3: hsl(45, 95%, 55%);\n  --chart-4: hsl(350, 85%, 60%);\n  --chart-5: hsl(270, 85%, 65%);\n  --sidebar: hsl(35, 100%, 96%);\n  --sidebar-foreground: hsl(220, 15%, 25%);\n  --sidebar-primary: hsl(25, 95%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(40, 80%, 90%);\n  --sidebar-accent-foreground: hsl(220, 15%, 25%);\n  --sidebar-border: hsl(45, 30%, 85%);\n  --sidebar-ring: hsl(25, 95%, 53%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(214, 84%, 56%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(214, 84%, 56%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(214, 84%, 56%);\n  --sidebar-primary-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(214, 84%, 56%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .timeline-line {\n    background: linear-gradient(to bottom, hsl(var(--primary)), hsl(var(--chart-2)));\n    box-shadow: 0 2px 8px hsla(var(--primary), 0.2);\n  }\n\n  .case-header {\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--chart-3)) 50%, hsl(var(--chart-2)) 100%);\n    box-shadow: 0 4px 20px hsla(var(--primary), 0.25);\n  }\n\n  .evidence-zoom:hover {\n    transform: scale(1.02);\n    transition: all 0.3s ease-in-out;\n    box-shadow: 0 8px 25px hsla(var(--primary), 0.15);\n  }\n\n  .sidebar-nav {\n    backdrop-filter: blur(15px);\n    border-right: 1px solid hsl(var(--border));\n    box-shadow: 2px 0 15px hsla(var(--primary), 0.08);\n  }\n\n  .case-stat {\n    background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--accent)) 100%);\n    border: 1px solid hsl(var(--border));\n    box-shadow: 0 2px 10px hsla(var(--primary), 0.1);\n    transition: all 0.2s ease-in-out;\n  }\n\n  .case-stat:hover {\n    box-shadow: 0 4px 20px hsla(var(--primary), 0.15);\n    transform: translateY(-1px);\n  }\n\n  .document-viewer {\n    max-height: 70vh;\n    overflow-y: auto;\n    overflow-x: hidden;\n    background: linear-gradient(to bottom, hsl(var(--card)), hsl(var(--muted)));\n    position: relative;\n    z-index: 1;\n  }\n\n  /* Fix text overlapping in document viewer */\n  .document-viewer iframe,\n  .document-viewer img {\n    display: block;\n    margin: 0 auto;\n    max-width: 100%;\n    height: auto;\n  }\n\n  .document-viewer iframe {\n    min-height: 60vh;\n  }\n\n  /* Ensure proper spacing and prevent overlap */\n  .document-viewer + * {\n    margin-top: 1rem;\n    clear: both;\n  }\n\n  /* Fix for uppy modal z-index and mobile responsiveness */\n  .uppy-Dashboard-isInner {\n    z-index: 9999 !important;\n  }\n\n  .uppy-Dashboard-modalOverlay {\n    z-index: 9998 !important;\n    background-color: rgba(0, 0, 0, 0.8) !important;\n  }\n\n  /* Mobile responsive uppy modal */\n  @media (max-width: 768px) {\n    .uppy-Dashboard-modal {\n      width: 95vw !important;\n      height: 90vh !important;\n      max-width: 95vw !important;\n      max-height: 90vh !important;\n      margin: 2.5vh auto !important;\n      border-radius: 12px !important;\n    }\n\n    .uppy-Dashboard-isInner {\n      width: 100% !important;\n      height: 100% !important;\n      border-radius: 12px !important;\n    }\n  }\n\n  /* Upload button styling */\n  .upload-button-primary {\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--chart-3)) 100%);\n    border: 2px solid hsl(var(--primary));\n    box-shadow: 0 4px 15px hsla(var(--primary), 0.3);\n    transition: all 0.3s ease;\n  }\n\n  .upload-button-primary:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 25px hsla(var(--primary), 0.4);\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--chart-2)) 100%);\n  }\n\n  .upload-button-primary:active {\n    transform: translateY(0);\n  }\n\n  .brief-card {\n    background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--accent)) 100%);\n    border: 1px solid hsl(var(--border));\n    box-shadow: 0 3px 15px hsla(var(--primary), 0.12);\n    transition: all 0.3s ease-in-out;\n  }\n\n  .brief-card:hover {\n    box-shadow: 0 6px 25px hsla(var(--primary), 0.2);\n    transform: translateY(-2px);\n    border-color: hsl(var(--primary));\n  }\n\n  .stats-card {\n    background: linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--secondary)) 100%);\n    border: 1px solid hsl(var(--border));\n    box-shadow: 0 2px 12px hsla(var(--primary), 0.1);\n    transition: all 0.2s ease-in-out;\n  }\n\n  .stats-card:hover {\n    box-shadow: 0 4px 20px hsla(var(--primary), 0.15);\n    transform: translateY(-1px);\n  }\n\n  .warm-gradient {\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--chart-3)) 50%, hsl(var(--chart-2)) 100%);\n  }\n\n  .print-friendly {\n    @media print {\n      background: white !important;\n      color: black !important;\n      box-shadow: none !important;\n    }\n  }\n}\n","size_bytes":6565},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  allowedFileTypes?: string[];\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 104857600, // 100MB default for video support\n  allowedFileTypes,\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() => {\n    console.log('Initializing Uppy instance');\n    \n    const uppyInstance = new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: allowedFileTypes || ['.pdf', '.doc', '.docx', '.txt', '.jpg', '.jpeg', '.png', '.gif', '.mp3', '.wav', '.mp4', '.mov', '.avi', '.mkv'],\n      },\n      autoProceed: false,\n      debug: true,\n    });\n\n    uppyInstance.use(AwsS3, {\n      shouldUseMultipart: false,\n      getUploadParameters: async (file) => {\n        console.log('Getting upload parameters for file:', file.name);\n        try {\n          const params = await onGetUploadParameters();\n          console.log('Upload parameters received:', params);\n          return params;\n        } catch (error) {\n          console.error('Failed to get upload parameters:', error);\n          throw error;\n        }\n      },\n    });\n\n    uppyInstance.on('complete', (result) => {\n      console.log('Upload complete:', result);\n      setShowModal(false);\n      onComplete?.(result);\n    });\n\n    uppyInstance.on('upload-error', (file, error) => {\n      console.error('Upload error for file:', file?.name, error);\n    });\n\n    uppyInstance.on('file-added', (file) => {\n      console.log('File added:', file.name);\n    });\n\n    uppyInstance.on('upload-progress', (file, progress) => {\n      console.log('Upload progress for', file?.name, ':', progress);\n    });\n\n    return uppyInstance;\n  });\n\n  return (\n    <div>\n      <Button \n        onClick={() => setShowModal(true)} \n        className={buttonClassName}\n        data-testid=\"upload-button\"\n      >\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => {\n          console.log('Closing modal');\n          setShowModal(false);\n        }}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":4078},"client/src/hooks/use-case-search.tsx":{"content":"import { useMemo, useState } from \"react\";\nimport Fuse from \"fuse.js\";\nimport { CASE_DOCUMENTS, CASE_TIMELINE, Doc, TimelineEvent } from \"@/lib/case-data\";\n\ntype SearchableItem = {\n  id: string;\n  title: string;\n  summary?: string | null;\n  tags?: string[] | null;\n  date?: string | null;\n  type: 'document' | 'timeline';\n  docType?: string;\n};\n\nexport function useCaseSearch() {\n  const [query, setQuery] = useState(\"\");\n  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n\n  const searchableItems: SearchableItem[] = useMemo(() => [\n    ...CASE_DOCUMENTS.map(doc => ({\n      id: doc.id,\n      title: doc.title,\n      summary: doc.summary,\n      tags: doc.tags,\n      date: doc.date,\n      type: 'document' as const,\n      docType: doc.type\n    })),\n    ...CASE_TIMELINE.map(event => ({\n      id: event.id,\n      title: event.title,\n      summary: event.summary,\n      tags: event.tags,\n      date: event.date,\n      type: 'timeline' as const\n    })),\n  ], []);\n\n  const fuse = useMemo(() => \n    new Fuse(searchableItems, {\n      keys: ['title', 'summary', 'tags'],\n      threshold: 0.3,\n      includeScore: true,\n      includeMatches: true,\n    }), [searchableItems]\n  );\n\n  const results = useMemo(() => {\n    let items = searchableItems;\n\n    // Apply search query\n    if (query.trim()) {\n      items = fuse.search(query).map(result => result.item);\n    }\n\n    // Apply filters\n    if (activeFilters.length > 0) {\n      items = items.filter(item => {\n        if (item.type === 'document') {\n          return activeFilters.includes(item.docType || '');\n        }\n        return activeFilters.includes('timeline');\n      });\n    }\n\n    return items;\n  }, [query, activeFilters, fuse, searchableItems]);\n\n  const addFilter = (filter: string) => {\n    setActiveFilters(prev => \n      prev.includes(filter) ? prev : [...prev, filter]\n    );\n  };\n\n  const removeFilter = (filter: string) => {\n    setActiveFilters(prev => prev.filter(f => f !== filter));\n  };\n\n  const clearFilters = () => {\n    setActiveFilters([]);\n  };\n\n  return {\n    query,\n    setQuery,\n    results,\n    activeFilters,\n    addFilter,\n    removeFilter,\n    clearFilters,\n  };\n}\n","size_bytes":2165},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/case-data.ts":{"content":"// Case Intelligence Portal Data\n// This file contains the case data structure and initial dataset\n\nexport type DocType = \"pdf\" | \"image\" | \"audio\" | \"video\" | \"transcript\" | \"letter\" | \"other\";\n\nexport type Doc = {\n  id: string;\n  title: string;\n  type: DocType;\n  date?: string | null;\n  path?: string | null;\n  summary?: string | null;\n  tags?: string[] | null;\n  sourceNote?: string | null;\n};\n\nexport type TimelineEvent = {\n  id: string;\n  date: string;\n  title: string;\n  summary?: string | null;\n  docRefs?: string[] | null;\n  tags?: string[] | null;\n};\n\nexport type FoiaRequest = {\n  id: string;\n  agency: string;\n  requestNumber?: string;\n  status: \"submitted\" | \"pending\" | \"completed\" | \"denied\";\n  submittedDate: string;\n  responseDate?: string;\n  description: string;\n  responseSummary?: string;\n  documentsReceived?: string[];\n};\n\nexport type LegalIssue = {\n  id: string;\n  title: string;\n  description: string;\n  priority: \"low\" | \"medium\" | \"high\" | \"critical\";\n  category: \"constitutional\" | \"civil-rights\" | \"procedural\" | \"evidence\";\n};\n\n// Case Documents Data - Real Federal Civil Rights Case Documents\nexport const CASE_DOCUMENTS: Doc[] = [\n  {\n    id: \"foia-us-marshals\",\n    title: \"FOIA Request to US Marshals Service\",\n    type: \"pdf\",\n    date: \"2025-06-27\",\n    path: \"/src/assets/documents/foia-us marshalls_1756543299931.pdf\",\n    summary: \"Freedom of Information Act request seeking communications, BOLOs, and surveillance records related to coordinated interstate targeting of journalist Matthew Reardon.\",\n    tags: [\"FOIA\", \"US Marshals\", \"surveillance\", \"BOLOs\", \"First Amendment\"],\n    sourceNote: \"Official FOIA request filed June 27, 2025 - seeking evidence of gangstalking and coordinated harassment.\",\n  },\n  {\n    id: \"june-courthouse-transcripts\",\n    title: \"June 23 & 26, 2025 â Federal Courthouse Interactions\",\n    type: \"transcript\",\n    date: \"2025-06-23\",\n    path: \"/src/assets/documents/6-23 and 26_1756543299931.pdf\",\n    summary: \"Detailed transcripts of First Amendment audit interactions with US Marshals at Lafayette federal courthouse. Shows escalation from peaceful journalism to threats of arrest.\",\n    tags: [\"transcript\", \"courthouse\", \"First Amendment\", \"US Marshals\", \"audit\"],\n    sourceNote: \"Court reporter style transcript of verbal exchanges - evidence of constitutional rights violations.\",\n  },\n  {\n    id: \"marshal-assault-statement\",\n    title: \"Public Statement on Federal Marshal Assault\",\n    type: \"pdf\",\n    date: \"2025-08-26\",\n    path: \"/src/assets/documents/my public address of the marshall attack_1756543299931.pdf\",\n    summary: \"Detailed first-person account of August 25th assault by US Marshal Hayden Newsom. Documents destruction of camera equipment, physical assault, torture, and unlawful detention.\",\n    tags: [\"assault\", \"police brutality\", \"torture\", \"First Amendment\", \"civil rights\"],\n    sourceNote: \"Official public statement documenting federal crimes and constitutional violations.\",\n  },\n  {\n    id: \"foia-response-redacted\",\n    title: \"US Marshals FOIA Response - Heavily Redacted\",\n    type: \"pdf\",\n    date: \"2025-08-22\",\n    path: \"/src/assets/documents/Final Response Letter for PA Redacted Documents_1756543299931.pdf\",\n    summary: \"Partial release of 10 pages with heavy redactions. Confirms multi-state surveillance operation involving JSD, W/LA, N/MS, S/TX, D/UT offices. Cites law enforcement exemptions.\",\n    tags: [\"FOIA\", \"USMS\", \"redacted\", \"surveillance\", \"multi-state\", \"conspiracy\"],\n    sourceNote: \"Evidence of coordinated federal surveillance across multiple jurisdictions - smoking gun document.\",\n  },\n  {\n    id: \"aug25-livestream\",\n    title: \"August 25, 2025 - Livestream of Federal Courthouse Protest\",\n    type: \"transcript\",\n    date: \"2025-08-25\",\n    path: \"/src/assets/documents/Aug 25_1756543299931.pdf\",\n    summary: \"Real-time documentation of events leading to assault. Shows peaceful protest, marshal's invitation to enter (entrapment), and immediate threats upon entry. Critical evidence.\",\n    tags: [\"livestream\", \"entrapment\", \"assault\", \"federal courthouse\", \"evidence\"],\n    sourceNote: \"Live video transcript showing premeditated entrapment by federal agents.\",\n  },\n  {\n    id: \"podcast-testimony\",\n    title: \"TalksGow Podcast - Legal Case Background\",\n    type: \"transcript\",\n    date: \"2025-07-15\",\n    path: \"/src/assets/documents/podcast talksgow_1756543299931.pdf\",\n    summary: \"Detailed testimony and background on the federal civil rights case. References Bennett v. Hendricks precedent and similarities to current gangstalking patterns.\",\n    tags: [\"testimony\", \"podcast\", \"legal precedent\", \"Bennett case\", \"background\"],\n    sourceNote: \"Public testimony providing legal context and case background for civil rights violations.\",\n  },\n  {\n    id: \"responsive-records\",\n    title: \"Responsive Records Package\",\n    type: \"pdf\",\n    date: \"2025-08-22\",\n    path: \"/src/assets/documents/responsive records_1756543299931.pdf\",\n    summary: \"Collection of government responsive documents and forms related to the FOIA requests and federal surveillance operations.\",\n    tags: [\"responsive records\", \"government documents\", \"FOIA\", \"surveillance\"],\n    sourceNote: \"Official government records responsive to FOIA requests - evidence package.\",\n  },\n];\n\n// Timeline Events Data\nexport const CASE_TIMELINE: TimelineEvent[] = [\n  {\n    id: \"t1\",\n    date: \"2025-06-23\",\n    title: \"Lobby interaction recorded; First Amendment discussion\",\n    summary: \"Transcript includes exchanges with officers, supervisor arrival, and recording purpose.\",\n    docRefs: [\"june-transcripts\"],\n    tags: [\"recording\", \"lobby\"],\n  },\n  {\n    id: \"t2\",\n    date: \"2025-06-27\",\n    title: \"FOIA filed with USMS\",\n    summary: \"Seeks comms/BOLOs and interstate dissemination of info.\",\n    docRefs: [\"foia-request\"],\n    tags: [\"FOIA\"],\n  },\n  {\n    id: \"t3\",\n    date: \"2025-08-22\",\n    title: \"USMS FOIA response (partial release & exemptions)\",\n    summary: \"Cites privacy and law-enforcement exemptions; multiple districts identified.\",\n    docRefs: [\"foia-response\"],\n    tags: [\"FOIA\", \"exemptions\"],\n  },\n  {\n    id: \"t4\",\n    date: \"2025-08-25\",\n    title: \"Livestream at courthouse and doorway exchange\",\n    summary: \"Alleges being waved in then threatened with arrest; signage and BOLO remarks.\",\n    docRefs: [\"aug25-stream\", \"bill-image\"],\n    tags: [\"livestream\", \"courthouse\"],\n  },\n  {\n    id: \"t5\",\n    date: \"2025-08-25\",\n    title: \"Criminal Incident at Federal Courthouse\",\n    summary: \"Defendant Matthew Reardon allegedly engaged in disorderly conduct on federal property. Created loud or unusual noise, created a nuisance, and/or unreasonably obstructed entrances, foyers, lobbies, or corridors at the United States District Court, Western District of Louisiana, Lafayette Division.\",\n    docRefs: [\"complaint\", \"incident-report\"],\n    tags: [\"criminal-incident\", \"federal-property\", \"disorderly-conduct\", \"41-cfr\"],\n  },\n  {\n    id: \"t6\",\n    date: \"2025-08-25\",\n    title: \"Criminal Charges Filed\",\n    summary: \"United States v. Matthew Reardon - Criminal complaint filed in U.S. District Court, Western District of Louisiana. Case No. 6:25-MJ-00153-01 assigned to Magistrate Whitehurst. Charges under 41 C.F.R. Â§ 102-74.390 for conduct on federal property.\",\n    docRefs: [\"criminal-complaint\", \"case-filing\"],\n    tags: [\"criminal-charges\", \"magistrate\", \"federal-court\", \"filing\"],\n  },\n  {\n    id: \"t7\",\n    date: \"2025-08-26\",\n    title: \"Public address on Marshal incident\",\n    summary: \"Detailed narrative of force, detention, medical care, transport, and conditions.\",\n    docRefs: [\"public-address\"],\n    tags: [\"statement\"],\n  },\n  {\n    id: \"t8\",\n    date: \"2025-08-26\",\n    title: \"Case Assignment and Legal Team\",\n    summary: \"Acting U.S. Attorney Alexander C. Van Hook and Assistant U.S. Attorney Ladonte A. Murphy (La. Bar No. 32772) assigned to prosecute United States v. Matthew Reardon. Prosecution team established at U.S. Attorney's Office, 800 Lafayette Street, Suite 2200, Lafayette, Louisiana.\",\n    docRefs: [\"case-assignment\", \"prosecutor-assignment\"],\n    tags: [\"legal-team\", \"prosecution\", \"assignment\", \"usao\"],\n  },\n  {\n    id: \"t9\",\n    date: \"2025-08-27\",\n    title: \"Initial Appearance Scheduled\",\n    summary: \"Initial appearance and arraignment scheduled before Magistrate Whitehurst for United States v. Matthew Reardon, Case No. 6:25-MJ-00153-01. Defendant to be advised of charges under 41 C.F.R. Â§ 102-74.390 and potential penalties under 41 C.F.R. Â§ 102-74.450.\",\n    docRefs: [\"scheduling-order\", \"court-notice\"],\n    tags: [\"initial-appearance\", \"arraignment\", \"magistrate\", \"scheduling\"],\n  },\n];\n\n// FOIA Requests Data\nexport const FOIA_REQUESTS: FoiaRequest[] = [\n  {\n    id: \"foia-1\",\n    agency: \"US Marshals Service\",\n    requestNumber: \"2025-FOIA-08901\",\n    status: \"completed\",\n    submittedDate: \"2025-06-27\",\n    responseDate: \"2025-08-22\",\n    description: \"Request for communications, BOLOs, and inter-agency records\",\n    responseSummary: \"14 pages released with exemptions (b)(6), (b)(7)(C), (b)(7)(E)\",\n    documentsReceived: [\"foia-response\"],\n  },\n  {\n    id: \"foia-2\",\n    agency: \"FBI Field Office\",\n    status: \"pending\",\n    submittedDate: \"2025-08-15\",\n    description: \"Request for field office communications and surveillance records\",\n  },\n  {\n    id: \"foia-3\",\n    agency: \"Mississippi Lafayette County Court\",\n    status: \"submitted\",\n    submittedDate: \"2025-08-28\",\n    description: \"Request for state court records and proceedings\",\n  },\n];\n\n// Legal Issues Analysis\nexport const LEGAL_ISSUES: LegalIssue[] = [\n  {\n    id: \"issue-1\",\n    title: \"First Amendment Violation\",\n    description: \"Prior restraint on protected speech in public forum\",\n    priority: \"high\",\n    category: \"constitutional\",\n  },\n  {\n    id: \"issue-2\",\n    title: \"Excessive Force\",\n    description: \"Physical assault without legal justification\",\n    priority: \"critical\",\n    category: \"civil-rights\",\n  },\n  {\n    id: \"issue-3\",\n    title: \"Due Process Violation\",\n    description: \"Procedural irregularities in detention process\",\n    priority: \"medium\",\n    category: \"procedural\",\n  },\n  {\n    id: \"issue-4\",\n    title: \"Retaliation\",\n    description: \"Pattern of escalating response to protected activity\",\n    priority: \"high\",\n    category: \"civil-rights\",\n  },\n];\n\n// Case Statistics\nexport const CASE_STATS = {\n  totalDocuments: CASE_DOCUMENTS.length,\n  timelineEvents: CASE_TIMELINE.length,\n  evidenceItems: CASE_DOCUMENTS.filter(d => d.type === \"image\" || d.type === \"audio\").length,\n  foiaRequests: FOIA_REQUESTS.length,\n  potentialViolations: LEGAL_ISSUES.length,\n};\n\n// Utility Functions\nexport function formatDate(d?: string) {\n  if (!d) return \"\";\n  try {\n    return new Date(d).toLocaleDateString(undefined, { \n      year: \"numeric\", \n      month: \"short\", \n      day: \"numeric\" \n    });\n  } catch {\n    return d;\n  }\n}\n\nexport function getDocumentsByType(type: DocType) {\n  return CASE_DOCUMENTS.filter(doc => doc.type === type);\n}\n\nexport function getTimelineEventsByDateRange(startDate: string, endDate: string) {\n  return CASE_TIMELINE.filter(event => \n    event.date >= startDate && event.date <= endDate\n  );\n}\n\nexport function getDocumentById(id: string) {\n  return CASE_DOCUMENTS.find(doc => doc.id === id);\n}\n","size_bytes":11349},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options: {\n    method?: string;\n    data?: unknown;\n  } = {}\n): Promise<any> {\n  const { method = \"GET\", data } = options;\n  \n  const res = await fetch(url, {\n    method: method.toUpperCase(),\n    headers: {\n      ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n    },\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1495},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BarChart, TrendingUp, PieChart, Activity, FileText, Clock, Camera, AlertTriangle, Download } from \"lucide-react\";\nimport { ResponsiveContainer, BarChart as RechartsBarChart, Bar, XAxis, YAxis, Tooltip, PieChart as RechartsPieChart, Pie, Cell, LineChart, Line, Area, AreaChart } from \"recharts\";\nimport { CASE_DOCUMENTS, CASE_TIMELINE, FOIA_REQUESTS, LEGAL_ISSUES, formatDate } from \"@/lib/case-data\";\n\nexport default function Analytics() {\n  const [timeRange, setTimeRange] = useState(\"all\");\n  const [chartType, setChartType] = useState(\"timeline\");\n\n  const handleSearch = (query: string) => {\n    console.log(\"Searching analytics:\", query);\n  };\n\n  const handleExport = () => {\n    window.print();\n  };\n\n  // Calculate analytics data\n  const documentsByType = CASE_DOCUMENTS.reduce((acc, doc) => {\n    acc[doc.type] = (acc[doc.type] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const documentTypeData = Object.entries(documentsByType).map(([type, count]) => ({\n    type: type.charAt(0).toUpperCase() + type.slice(1),\n    count,\n    percentage: Math.round((count / CASE_DOCUMENTS.length) * 100),\n  }));\n\n  const timelineData = CASE_TIMELINE.reduce((acc, event) => {\n    const month = new Date(event.date).toISOString().slice(0, 7);\n    const existing = acc.find(item => item.month === month);\n    if (existing) {\n      existing.events += 1;\n    } else {\n      acc.push({ \n        month, \n        events: 1,\n        monthName: new Date(event.date).toLocaleDateString('en-US', { month: 'short', year: '2-digit' })\n      });\n    }\n    return acc;\n  }, [] as { month: string; events: number; monthName: string }[])\n  .sort((a, b) => a.month.localeCompare(b.month));\n\n  const foiaStatusData = FOIA_REQUESTS.reduce((acc, request) => {\n    acc[request.status] = (acc[request.status] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const foiaChartData = Object.entries(foiaStatusData).map(([status, count]) => ({\n    status: status.charAt(0).toUpperCase() + status.slice(1),\n    count,\n    percentage: Math.round((count / FOIA_REQUESTS.length) * 100),\n  }));\n\n  const legalIssuesByPriority = LEGAL_ISSUES.reduce((acc, issue) => {\n    acc[issue.priority] = (acc[issue.priority] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const priorityData = Object.entries(legalIssuesByPriority).map(([priority, count]) => ({\n    priority: priority.charAt(0).toUpperCase() + priority.slice(1),\n    count,\n    color: priority === \"critical\" ? \"#ef4444\" : \n           priority === \"high\" ? \"#f97316\" :\n           priority === \"medium\" ? \"#eab308\" : \"#22c55e\"\n  }));\n\n  const caseMetrics = {\n    caseStrength: 88,\n    documentCompleteness: 92,\n    timelineCoherence: 95,\n    evidenceQuality: 89,\n    legalCompliance: 85,\n  };\n\n  const COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Analytics Dashboard\"\n        onSearch={handleSearch}\n        onExport={handleExport}\n      />\n\n      <div className=\"p-6 overflow-y-auto h-full bg-muted/30 print-friendly\">\n        {/* Analytics Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2\">Case Analytics & Insights</h2>\n            <p className=\"text-muted-foreground\">\n              Comprehensive analysis of case progress, evidence, and legal strength\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Select value={timeRange} onValueChange={setTimeRange}>\n              <SelectTrigger className=\"w-32\" data-testid=\"analytics-time-range\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Time</SelectItem>\n                <SelectItem value=\"6m\">Last 6 Months</SelectItem>\n                <SelectItem value=\"3m\">Last 3 Months</SelectItem>\n                <SelectItem value=\"1m\">Last Month</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"outline\" data-testid=\"export-analytics\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Report\n            </Button>\n          </div>\n        </div>\n\n        {/* Key Metrics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"w-6 h-6 text-primary\" />\n                </div>\n                <Badge variant=\"secondary\" className=\"text-xs bg-chart-2/10 text-chart-2\">\n                  +12% vs baseline\n                </Badge>\n              </div>\n              <h3 className=\"text-2xl font-bold text-primary\">{caseMetrics.caseStrength}%</h3>\n              <p className=\"text-sm text-muted-foreground\">Overall Case Strength</p>\n              <Progress value={caseMetrics.caseStrength} className=\"mt-2\" />\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"w-6 h-6 text-chart-2\" />\n                </div>\n                <Badge variant=\"secondary\" className=\"text-xs bg-chart-2/10 text-chart-2\">\n                  Excellent\n                </Badge>\n              </div>\n              <h3 className=\"text-2xl font-bold text-chart-2\">{caseMetrics.documentCompleteness}%</h3>\n              <p className=\"text-sm text-muted-foreground\">Document Completeness</p>\n              <Progress value={caseMetrics.documentCompleteness} className=\"mt-2\" />\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"w-6 h-6 text-chart-3\" />\n                </div>\n                <Badge variant=\"secondary\" className=\"text-xs bg-chart-3/10 text-chart-3\">\n                  Strong\n                </Badge>\n              </div>\n              <h3 className=\"text-2xl font-bold text-chart-3\">{caseMetrics.timelineCoherence}%</h3>\n              <p className=\"text-sm text-muted-foreground\">Timeline Coherence</p>\n              <Progress value={caseMetrics.timelineCoherence} className=\"mt-2\" />\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-chart-4/10 rounded-lg flex items-center justify-center\">\n                  <Camera className=\"w-6 h-6 text-chart-4\" />\n                </div>\n                <Badge variant=\"secondary\" className=\"text-xs bg-chart-4/10 text-chart-4\">\n                  High Quality\n                </Badge>\n              </div>\n              <h3 className=\"text-2xl font-bold text-chart-4\">{caseMetrics.evidenceQuality}%</h3>\n              <p className=\"text-sm text-muted-foreground\">Evidence Quality</p>\n              <Progress value={caseMetrics.evidenceQuality} className=\"mt-2\" />\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Timeline Activity Chart */}\n          <Card className=\"rounded-xl\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <Activity className=\"w-5 h-5\" />\n                Case Activity Timeline\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart data={timelineData}>\n                    <XAxis \n                      dataKey=\"monthName\" \n                      fontSize={12} \n                      tickLine={false} \n                      axisLine={false} \n                    />\n                    <YAxis \n                      allowDecimals={false} \n                      fontSize={12} \n                      tickLine={false} \n                      axisLine={false} \n                    />\n                    <Tooltip \n                      cursor={{ fill: \"transparent\" }}\n                      formatter={(value) => [value, \"Events\"]}\n                    />\n                    <Area \n                      type=\"monotone\"\n                      dataKey=\"events\" \n                      stroke=\"hsl(var(--primary))\"\n                      fill=\"hsl(var(--primary))\"\n                      fillOpacity={0.2}\n                      strokeWidth={2}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Document Distribution */}\n          <Card className=\"rounded-xl\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <PieChart className=\"w-5 h-5\" />\n                Document Type Distribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <RechartsPieChart>\n                    <Pie\n                      data={documentTypeData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ type, percentage }) => `${type} (${percentage}%)`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"count\"\n                    >\n                      {documentTypeData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value) => [value, \"Documents\"]} />\n                  </RechartsPieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* FOIA Status */}\n          <Card className=\"rounded-xl\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                FOIA Request Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <RechartsBarChart data={foiaChartData}>\n                    <XAxis \n                      dataKey=\"status\" \n                      fontSize={12} \n                      tickLine={false} \n                      axisLine={false} \n                    />\n                    <YAxis \n                      allowDecimals={false} \n                      fontSize={12} \n                      tickLine={false} \n                      axisLine={false} \n                    />\n                    <Tooltip \n                      cursor={{ fill: \"hsl(var(--muted))\" }}\n                      formatter={(value) => [value, \"Requests\"]}\n                    />\n                    <Bar \n                      dataKey=\"count\" \n                      radius={[6, 6, 0, 0]}\n                      fill=\"hsl(var(--chart-2))\"\n                    />\n                  </RechartsBarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Legal Issues Priority */}\n          <Card className=\"rounded-xl\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <AlertTriangle className=\"w-5 h-5\" />\n                Legal Issues by Priority\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {priorityData.map((item) => (\n                  <div key={item.priority} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium\">{item.priority} Priority</span>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-semibold\">{item.count}</span>\n                        <div\n                          className=\"w-3 h-3 rounded-full\"\n                          style={{ backgroundColor: item.color }}\n                        />\n                      </div>\n                    </div>\n                    <Progress \n                      value={(item.count / LEGAL_ISSUES.length) * 100} \n                      className=\"h-2\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Detailed Metrics */}\n        <Card className=\"rounded-xl\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n              <BarChart className=\"w-5 h-5\" />\n              Detailed Case Strength Metrics\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <div className=\"space-y-6\">\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Evidence Quality</span>\n                    <span className=\"text-sm font-semibold text-chart-2\">{caseMetrics.evidenceQuality}%</span>\n                  </div>\n                  <Progress value={caseMetrics.evidenceQuality} className=\"h-2\" />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    High-quality documentation with clear chain of custody\n                  </p>\n                </div>\n\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Documentation Completeness</span>\n                    <span className=\"text-sm font-semibold text-primary\">{caseMetrics.documentCompleteness}%</span>\n                  </div>\n                  <Progress value={caseMetrics.documentCompleteness} className=\"h-2\" />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Comprehensive record collection across multiple sources\n                  </p>\n                </div>\n\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Timeline Coherence</span>\n                    <span className=\"text-sm font-semibold text-chart-3\">{caseMetrics.timelineCoherence}%</span>\n                  </div>\n                  <Progress value={caseMetrics.timelineCoherence} className=\"h-2\" />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Clear chronological sequence with cross-referenced events\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"space-y-6\">\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Legal Compliance</span>\n                    <span className=\"text-sm font-semibold text-chart-4\">{caseMetrics.legalCompliance}%</span>\n                  </div>\n                  <Progress value={caseMetrics.legalCompliance} className=\"h-2\" />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Adherence to procedural requirements and legal standards\n                  </p>\n                </div>\n\n                <div className=\"bg-primary/5 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <TrendingUp className=\"w-4 h-4 text-primary\" />\n                    <span className=\"font-medium text-sm\">Key Insights</span>\n                  </div>\n                  <ul className=\"text-xs text-muted-foreground space-y-1\">\n                    <li>â¢ Strong evidence foundation with verifiable sources</li>\n                    <li>â¢ Timeline shows clear pattern of escalation</li>\n                    <li>â¢ FOIA responses support constitutional claims</li>\n                    <li>â¢ Multi-jurisdictional scope strengthens federal case</li>\n                  </ul>\n                </div>\n\n                <div className=\"bg-chart-3/5 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <AlertTriangle className=\"w-4 h-4 text-chart-3\" />\n                    <span className=\"font-medium text-sm\">Recommendations</span>\n                  </div>\n                  <ul className=\"text-xs text-muted-foreground space-y-1\">\n                    <li>â¢ Gather additional witness statements</li>\n                    <li>â¢ Expand documentation for jurisdictional claims</li>\n                    <li>â¢ Focus on constitutional law precedents</li>\n                    <li>â¢ Prepare expert testimony on civil rights violations</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18413},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { StatsGrid } from \"@/components/case/stats-grid\";\nimport { TimelineEventComponent } from \"@/components/case/timeline-event\";\nimport { EvidenceGallery } from \"@/components/case/evidence-gallery\";\nimport { LegalAnalysis } from \"@/components/case/legal-analysis\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { FileText, Globe, MapPin } from \"lucide-react\";\nimport { CASE_TIMELINE, CASE_DOCUMENTS, FOIA_REQUESTS, Doc, formatDate, getDocumentById } from \"@/lib/case-data\";\n\nexport default function Dashboard() {\n  const [selectedDocument, setSelectedDocument] = useState<Doc | null>(null);\n\n  const handleSearch = (query: string) => {\n    console.log(\"Searching:\", query);\n    // Search functionality will be implemented in the search context\n  };\n\n  const handleExport = () => {\n    window.print();\n  };\n\n  const handleDocumentClick = (docId: string) => {\n    const doc = getDocumentById(docId);\n    if (doc) {\n      setSelectedDocument(doc);\n    }\n  };\n\n  const recentTimeline = CASE_TIMELINE.slice(0, 3);\n  const recentDocuments = CASE_DOCUMENTS\n    .filter(doc => doc.date)\n    .sort((a, b) => new Date(b.date!).getTime() - new Date(a.date!).getTime())\n    .slice(0, 3);\n\n  const activeFoiaRequests = FOIA_REQUESTS.filter(req => req.status !== \"completed\");\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"CaseBuddy Dashboard\"\n        onSearch={handleSearch}\n        onExport={handleExport}\n      />\n\n      <div className=\"p-4 sm:p-6 overflow-y-auto h-full bg-muted/30 print-friendly\">\n        {/* Case Overview Hero */}\n        <div className=\"case-header text-white rounded-2xl p-4 sm:p-8 mb-6 sm:mb-8 relative overflow-hidden\">\n          <div className=\"relative z-10\">\n            <div className=\"flex flex-col lg:flex-row items-start justify-between gap-4\">\n              <div>\n                <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-2\">CaseBuddy - Evidence Timeline</h1>\n                <p className=\"text-sm sm:text-base lg:text-lg opacity-90 mb-4\">Federal Civil Rights Violation Case</p>\n                <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-6 text-xs sm:text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <Globe className=\"w-4 h-4\" />\n                    <span>Case Initiated: June 23, 2025</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-4 h-4\" />\n                    <span>Multiple Jurisdictions: LA, MS, TX, UT</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <FileText className=\"w-4 h-4\" />\n                    <span>Status: Active Investigation</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"w-24 h-24 sm:w-32 sm:h-32 rounded-xl overflow-hidden border-2 border-white/20 shrink-0\">\n                <img\n                  src=\"https://images.unsplash.com/photo-1589829545856-d10d557cf95f?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"\n                  alt=\"Federal courthouse with classical columns\"\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"absolute inset-0 bg-gradient-to-r from-black/20 to-transparent\"></div>\n        </div>\n\n        {/* Statistics Grid */}\n        <div className=\"mb-8\">\n          <StatsGrid />\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8 mb-6 sm:mb-8\">\n          {/* Recent Timeline */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"rounded-xl\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-xl font-semibold\">Recent Timeline Events</CardTitle>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"view-full-timeline\">\n                    View Full Timeline\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"relative\">\n                  <div className=\"absolute left-6 top-0 bottom-0 w-0.5 timeline-line\"></div>\n                  <div className=\"space-y-8\">\n                    {recentTimeline.map((event) => (\n                      <TimelineEventComponent\n                        key={event.id}\n                        event={event}\n                        onDocumentClick={handleDocumentClick}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar Content */}\n          <div className=\"space-y-6\">\n            {/* Evidence Gallery Preview */}\n            <EvidenceGallery maxItems={4} />\n\n            {/* Recent Documents */}\n            <Card className=\"rounded-xl\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-lg font-semibold\">Recent Documents</CardTitle>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"manage-all-documents\">\n                    Manage All\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {recentDocuments.map((doc) => (\n                    <div\n                      key={doc.id}\n                      className=\"flex items-start gap-3 p-3 rounded-lg hover:bg-accent cursor-pointer transition-colors\"\n                      onClick={() => setSelectedDocument(doc)}\n                      data-testid={`recent-document-${doc.id}`}\n                    >\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <FileText className=\"text-primary w-4 h-4\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-sm mb-1 line-clamp-1\">{doc.title}</h4>\n                        <p className=\"text-xs text-muted-foreground mb-1 line-clamp-2\">{doc.summary}</p>\n                        <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                          <span>{formatDate(doc.date || '')}</span>\n                          <span>â¢</span>\n                          <span className=\"capitalize\">{doc.type}</span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* FOIA Status */}\n            <Card className=\"rounded-xl\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-lg font-semibold\">FOIA Request Status</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {activeFoiaRequests.map((request) => (\n                    <div\n                      key={request.id}\n                      className={`p-3 rounded-lg border ${\n                        request.status === \"completed\" ? \"border-chart-2/20 bg-chart-2/5\" :\n                        request.status === \"pending\" ? \"border-chart-3/20 bg-chart-3/5\" :\n                        \"border-border bg-muted/30\"\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-2 h-2 rounded-full ${\n                            request.status === \"completed\" ? \"bg-chart-2\" :\n                            request.status === \"pending\" ? \"bg-chart-3 animate-pulse\" :\n                            \"bg-muted-foreground\"\n                          }`} />\n                          <div>\n                            <div className=\"font-medium text-sm\">\n                              {request.agency} #{request.requestNumber}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {request.responseSummary || request.description.slice(0, 50) + \"...\"}\n                            </div>\n                          </div>\n                        </div>\n                        <Badge variant=\"secondary\" className=\"text-xs capitalize\">\n                          {request.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Legal Analysis */}\n        <LegalAnalysis />\n\n        {/* Document Viewer Modal */}\n        <Dialog open={!!selectedDocument} onOpenChange={() => setSelectedDocument(null)}>\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                Document Viewer\n              </DialogTitle>\n            </DialogHeader>\n            {selectedDocument && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  {selectedDocument.date && <span>{formatDate(selectedDocument.date)}</span>}\n                  {selectedDocument.sourceNote && (\n                    <>\n                      <span>â¢</span>\n                      <span>{selectedDocument.sourceNote}</span>\n                    </>\n                  )}\n                </div>\n                {selectedDocument.path ? (\n                  selectedDocument.type === \"image\" ? (\n                    <img\n                      src={selectedDocument.path}\n                      alt={selectedDocument.title}\n                      className=\"w-full rounded-lg border max-h-[70vh] object-contain\"\n                    />\n                  ) : (\n                    <iframe\n                      title={selectedDocument.title}\n                      src={selectedDocument.path}\n                      className=\"w-full h-[70vh] rounded-lg border\"\n                    />\n                  )\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No preview available for this document\n                  </div>\n                )}\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <h3 className=\"font-semibold\">{selectedDocument.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{selectedDocument.summary}</p>\n                  </div>\n                  {selectedDocument.path && (\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <a\n                        href={selectedDocument.path}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        data-testid=\"open-document-source\"\n                      >\n                        Open Source\n                      </a>\n                    </Button>\n                  )}\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11861},"client/src/pages/documents.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { DocumentCard } from \"@/components/case/document-card\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { FolderOpen, Upload, Filter, FileText, Download } from \"lucide-react\";\nimport { CASE_DOCUMENTS, Doc, DocType } from \"@/lib/case-data\";\nimport { useCaseSearch } from \"@/hooks/use-case-search\";\nimport type { UploadResult } from \"@uppy/core\";\n\nexport default function Documents() {\n  const [selectedDocument, setSelectedDocument] = useState<Doc | null>(null);\n  const [activeTab, setActiveTab] = useState<DocType | \"all\">(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"date\");\n  \n  const { query, setQuery, results } = useCaseSearch();\n\n  const handleSearch = (searchQuery: string) => {\n    setQuery(searchQuery);\n  };\n\n  const handleExport = () => {\n    window.print();\n  };\n\n  const handleDocumentOpen = (doc: Doc) => {\n    setSelectedDocument(doc);\n  };\n\n  const handleUploadComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    console.log(\"Upload completed with full result:\", result);\n    \n    if (result.successful && result.successful.length > 0) {\n      try {\n        console.log(`Processing ${result.successful.length} uploaded files`);\n        \n        // Process each uploaded file\n        for (const file of result.successful) {\n          console.log('Processing uploaded file:', file);\n          \n          const response = await fetch('/api/documents', {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              documentURL: file.uploadURL,\n              title: file.name,\n              type: getFileType(file.name || ''),\n            }),\n          });\n          \n          if (response.ok) {\n            const result = await response.json();\n            console.log(`File ${file.name} processed successfully:`, result);\n          } else {\n            console.error(`Failed to process file ${file.name}:`, response.status, response.statusText);\n          }\n        }\n        \n        alert(`Successfully uploaded ${result.successful.length} file(s)!`);\n        console.log('All files processed successfully');\n      } catch (error) {\n        console.error('Error processing uploaded files:', error);\n        alert('Files uploaded but there was an error processing them.');\n      }\n    } else {\n      console.log('No successful uploads found');\n      if (result.failed && result.failed.length > 0) {\n        console.error('Failed uploads:', result.failed);\n        alert(`Upload failed: ${result.failed.map(f => f.error).join(', ')}`);\n      }\n    }\n  };\n\n  const getFileType = (filename: string): string => {\n    const ext = filename.toLowerCase().split('.').pop();\n    switch (ext) {\n      case 'pdf': return 'pdf';\n      case 'jpg': case 'jpeg': case 'png': case 'gif': return 'image';\n      case 'mp3': case 'wav': case 'ogg': return 'audio';\n      case 'mp4': case 'mov': case 'avi': case 'mkv': return 'video';\n      case 'doc': case 'docx': case 'txt': return 'letter';\n      default: return 'pdf';\n    }\n  };\n\n  const getUploadParameters = async () => {\n    try {\n      const response = await fetch('/api/objects/upload', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      const data = await response.json();\n      return { method: 'PUT' as const, url: data.uploadURL };\n    } catch (error) {\n      console.error('Failed to get upload URL:', error);\n      throw error;\n    }\n  };\n\n  // Filter documents based on active tab and search\n  const filteredDocuments = CASE_DOCUMENTS.filter(doc => {\n    if (activeTab !== \"all\" && doc.type !== activeTab) return false;\n    \n    if (query.trim()) {\n      const searchResults = results.filter(r => r.type === 'document');\n      return searchResults.some(r => r.id === doc.id);\n    }\n    \n    return true;\n  });\n\n  // Sort documents\n  const sortedDocuments = [...filteredDocuments].sort((a, b) => {\n    switch (sortBy) {\n      case \"date\":\n        return new Date(b.date || \"\").getTime() - new Date(a.date || \"\").getTime();\n      case \"title\":\n        return a.title.localeCompare(b.title);\n      case \"type\":\n        return a.type.localeCompare(b.type);\n      default:\n        return 0;\n    }\n  });\n\n  const docTypes: Array<{ value: DocType | \"all\"; label: string; count: number }> = [\n    { value: \"all\", label: \"All Documents\", count: CASE_DOCUMENTS.length },\n    { value: \"pdf\", label: \"PDFs\", count: CASE_DOCUMENTS.filter(d => d.type === \"pdf\").length },\n    { value: \"letter\", label: \"Letters\", count: CASE_DOCUMENTS.filter(d => d.type === \"letter\").length },\n    { value: \"transcript\", label: \"Transcripts\", count: CASE_DOCUMENTS.filter(d => d.type === \"transcript\").length },\n    { value: \"image\", label: \"Images\", count: CASE_DOCUMENTS.filter(d => d.type === \"image\").length },\n    { value: \"audio\", label: \"Audio\", count: CASE_DOCUMENTS.filter(d => d.type === \"audio\").length },\n    { value: \"video\", label: \"Videos\", count: CASE_DOCUMENTS.filter(d => d.type === \"video\").length },\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Document Management\"\n        onSearch={handleSearch}\n        onExport={handleExport}\n      />\n\n      <div className=\"p-4 sm:p-6 overflow-y-auto h-full bg-muted/30 print-friendly\">\n        {/* Documents Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6\">\n          <div className=\"flex-1\">\n            <h2 className=\"text-xl sm:text-2xl font-bold mb-2\">Case Documents</h2>\n            <p className=\"text-muted-foreground text-sm sm:text-base\">\n              Manage and organize all case-related documents and evidence\n            </p>\n          </div>\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3\">\n            <ObjectUploader\n              maxNumberOfFiles={5}\n              maxFileSize={50 * 1024 * 1024} // 50MB\n              onGetUploadParameters={getUploadParameters}\n              onComplete={handleUploadComplete}\n              buttonClassName=\"upload-button-primary text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg font-bold text-sm w-full sm:w-auto\"\n            >\n              <div className=\"flex items-center justify-center gap-2\">\n                <Upload className=\"w-4 sm:w-5 h-4 sm:h-5\" />\n                <span className=\"font-semibold\">Upload Documents</span>\n              </div>\n            </ObjectUploader>\n            <Badge variant=\"outline\" className=\"flex items-center gap-1 text-xs\">\n              <FolderOpen className=\"w-3 h-3\" />\n              {filteredDocuments.length} Documents\n            </Badge>\n          </div>\n        </div>\n\n        {/* Filters and Controls */}\n        <Card className=\"rounded-xl mb-6\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n              <Filter className=\"w-5 h-5\" />\n              Filter & Sort Documents\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col sm:flex-row flex-wrap items-start sm:items-center gap-4\">\n              <div className=\"flex items-center gap-2 w-full sm:w-auto\">\n                <label className=\"text-sm font-medium whitespace-nowrap\">Sort by:</label>\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-full sm:w-32\" data-testid=\"documents-sort-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"date\">Date</SelectItem>\n                    <SelectItem value=\"title\">Title</SelectItem>\n                    <SelectItem value=\"type\">Type</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search documents, summaries, tags...\"\n                  value={query}\n                  onChange={(e) => setQuery(e.target.value)}\n                  className=\"max-w-md\"\n                  data-testid=\"documents-search-input\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Document Tabs */}\n        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as DocType | \"all\")}>\n          <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 mb-6 h-auto\">\n            {docTypes.map(type => (\n              <TabsTrigger\n                key={type.value}\n                value={type.value}\n                className=\"flex items-center gap-1 sm:gap-2 text-xs sm:text-sm p-2 sm:p-3\"\n                data-testid={`tab-${type.value}`}\n              >\n                <span className=\"truncate\">{type.label}</span>\n                <Badge variant=\"secondary\" className=\"text-xs hidden sm:inline-flex\">\n                  {type.count}\n                </Badge>\n              </TabsTrigger>\n            ))}\n          </TabsList>\n\n          {docTypes.map(type => (\n            <TabsContent key={type.value} value={type.value}>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4 lg:gap-6\">\n                {sortedDocuments.map((doc) => (\n                  <DocumentCard\n                    key={doc.id}\n                    document={doc}\n                    onOpen={handleDocumentOpen}\n                  />\n                ))}\n                \n                {sortedDocuments.length === 0 && (\n                  <div className=\"col-span-full text-center py-12 text-muted-foreground\">\n                    <FolderOpen className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <h3 className=\"text-lg font-medium mb-2\">No documents found</h3>\n                    <p className=\"text-sm\">\n                      {query ? \"Try adjusting your search terms\" : \"Upload documents to get started\"}\n                    </p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          ))}\n        </Tabs>\n\n        {/* Document Viewer Modal */}\n        <Dialog open={!!selectedDocument} onOpenChange={() => setSelectedDocument(null)}>\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                Document Viewer - {selectedDocument?.title}\n              </DialogTitle>\n            </DialogHeader>\n            {selectedDocument && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    {selectedDocument.date && <span>Date: {selectedDocument.date}</span>}\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {selectedDocument.type}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button size=\"sm\" variant=\"outline\" data-testid=\"annotate-document\">\n                      Annotate\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" data-testid=\"download-document\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Download\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"document-viewer\">\n                  {selectedDocument.path ? (\n                    selectedDocument.type === \"image\" ? (\n                      <img\n                        src={selectedDocument.path}\n                        alt={selectedDocument.title}\n                        className=\"w-full rounded-lg border max-h-[70vh] object-contain\"\n                      />\n                    ) : (\n                      <iframe\n                        title={selectedDocument.title}\n                        src={selectedDocument.path}\n                        className=\"w-full h-[70vh] rounded-lg border\"\n                      />\n                    )\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <FileText className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                      <p>No preview available for this document</p>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <h3 className=\"font-semibold\">{selectedDocument.title}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{selectedDocument.summary}</p>\n                  \n                  {selectedDocument.tags && (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {selectedDocument.tags.map((tag) => (\n                        <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                  \n                  {selectedDocument.sourceNote && (\n                    <div className=\"text-xs text-muted-foreground italic border-t pt-2\">\n                      Source: {selectedDocument.sourceNote}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14207},"client/src/pages/evidence.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { EvidenceGallery } from \"@/components/case/evidence-gallery\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Camera, Video, Play, Download, ZoomIn, Grid, List } from \"lucide-react\";\nimport { CASE_DOCUMENTS, Doc, formatDate } from \"@/lib/case-data\";\n\nexport default function Evidence() {\n  const [selectedEvidence, setSelectedEvidence] = useState<Doc | null>(null);\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const handleExport = () => {\n    window.print();\n  };\n\n  // Filter evidence items (images, audio, video)\n  const evidenceItems = CASE_DOCUMENTS.filter(doc => \n    doc.type === \"image\" || doc.type === \"audio\" || doc.type === \"video\"\n  );\n\n  const filteredEvidence = evidenceItems.filter(item => {\n    if (filterType !== \"all\" && item.type !== filterType) return false;\n    \n    if (searchQuery.trim()) {\n      const searchLower = searchQuery.toLowerCase();\n      return (\n        item.title.toLowerCase().includes(searchLower) ||\n        item.summary?.toLowerCase().includes(searchLower) ||\n        item.tags?.some(tag => tag.toLowerCase().includes(searchLower))\n      );\n    }\n    \n    return true;\n  });\n\n  const evidenceStats = {\n    total: evidenceItems.length,\n    images: evidenceItems.filter(item => item.type === \"image\").length,\n    audio: evidenceItems.filter(item => item.type === \"audio\").length,\n    video: evidenceItems.filter(item => item.type === \"video\").length,\n  };\n\n  const renderEvidencePreview = (item: Doc) => {\n    if (item.type === \"image\") {\n      return (\n        <img\n          src={item.path || \"https://images.unsplash.com/photo-1589578527966-fdac0f44566c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"}\n          alt={item.title}\n          className=\"w-full h-48 object-cover\"\n        />\n      );\n    }\n\n    if (item.type === \"audio\") {\n      return (\n        <div className=\"w-full h-48 bg-gradient-to-br from-primary/20 to-chart-2/20 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Video className=\"w-12 h-12 text-primary mx-auto mb-3\" />\n            <span className=\"text-sm font-medium\">Audio Evidence</span>\n            <p className=\"text-xs text-muted-foreground mt-1\">Click to play</p>\n          </div>\n        </div>\n      );\n    }\n\n    if (item.type === \"video\") {\n      return (\n        <div className=\"w-full h-48 bg-gradient-to-br from-chart-4/20 to-chart-1/20 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Play className=\"w-12 h-12 text-chart-4 mx-auto mb-3\" />\n            <span className=\"text-sm font-medium\">Video Evidence</span>\n            <p className=\"text-xs text-muted-foreground mt-1\">Click to play</p>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"w-full h-48 bg-muted flex items-center justify-center\">\n        <span className=\"text-muted-foreground\">Preview not available</span>\n      </div>\n    );\n  };\n\n  const renderListView = (item: Doc) => (\n    <Card\n      key={item.id}\n      className=\"cursor-pointer hover:shadow-md transition-all duration-200\"\n      onClick={() => setSelectedEvidence(item)}\n      data-testid={`evidence-list-item-${item.id}`}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start gap-4\">\n          <div className=\"w-20 h-20 rounded-lg overflow-hidden border border-border\">\n            {renderEvidencePreview(item)}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <h3 className=\"font-semibold line-clamp-1\">{item.title}</h3>\n              <Badge variant=\"outline\" className=\"capitalize text-xs\">\n                {item.type}\n              </Badge>\n            </div>\n            <p className=\"text-sm text-muted-foreground line-clamp-2 mb-2\">\n              {item.summary}\n            </p>\n            <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n              {item.date && <span>{formatDate(item.date)}</span>}\n              {item.tags && item.tags.length > 0 && (\n                <div className=\"flex gap-1\">\n                  {item.tags.slice(0, 3).map(tag => (\n                    <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\">\n            <ZoomIn className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderGridView = (item: Doc) => (\n    <Card\n      key={item.id}\n      className=\"evidence-zoom cursor-pointer hover:shadow-md transition-all duration-200\"\n      onClick={() => setSelectedEvidence(item)}\n      data-testid={`evidence-grid-item-${item.id}`}\n    >\n      <div className=\"relative overflow-hidden\">\n        {renderEvidencePreview(item)}\n        <div className=\"absolute top-2 right-2\">\n          <Badge variant=\"secondary\" className=\"text-xs bg-black/50 text-white\">\n            {item.type.toUpperCase()}\n          </Badge>\n        </div>\n        {item.type === \"audio\" && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-black/20\">\n            <Play className=\"w-8 h-8 text-white\" />\n          </div>\n        )}\n      </div>\n      <CardContent className=\"p-4\">\n        <h3 className=\"font-medium text-sm mb-2 line-clamp-2\">{item.title}</h3>\n        <p className=\"text-xs text-muted-foreground line-clamp-2 mb-3\">\n          {item.summary}\n        </p>\n        {item.date && (\n          <p className=\"text-xs text-muted-foreground mb-2\">{formatDate(item.date)}</p>\n        )}\n        {item.tags && (\n          <div className=\"flex flex-wrap gap-1\">\n            {item.tags.slice(0, 2).map(tag => (\n              <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Evidence Gallery\"\n        onSearch={handleSearch}\n        onExport={handleExport}\n      />\n\n      <div className=\"p-4 sm:p-6 overflow-y-auto h-full bg-muted/30 print-friendly\">\n        {/* Evidence Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6\">\n          <div className=\"flex-1\">\n            <h2 className=\"text-xl sm:text-2xl font-bold mb-2\">Evidence Gallery</h2>\n            <p className=\"text-sm sm:text-base text-muted-foreground\">\n              Visual and audio evidence collection with metadata tracking\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n              <Camera className=\"w-3 h-3\" />\n              {evidenceStats.total} Items\n            </Badge>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4 mb-6\">\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <Camera className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div className=\"text-2xl font-bold text-primary\">{evidenceStats.total}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Evidence</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <ZoomIn className=\"w-6 h-6 text-chart-2\" />\n              </div>\n              <div className=\"text-2xl font-bold text-chart-2\">{evidenceStats.images}</div>\n              <div className=\"text-sm text-muted-foreground\">Images</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <Video className=\"w-6 h-6 text-chart-3\" />\n              </div>\n              <div className=\"text-2xl font-bold text-chart-3\">{evidenceStats.audio}</div>\n              <div className=\"text-sm text-muted-foreground\">Audio Files</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 bg-chart-4/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <Play className=\"w-6 h-6 text-chart-4\" />\n              </div>\n              <div className=\"text-2xl font-bold text-chart-4\">{evidenceStats.video}</div>\n              <div className=\"text-sm text-muted-foreground\">Videos</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Controls */}\n        <Card className=\"rounded-xl mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-wrap items-center justify-between gap-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-2\">\n                  <label className=\"text-sm font-medium\">Filter:</label>\n                  <Select value={filterType} onValueChange={setFilterType}>\n                    <SelectTrigger className=\"w-32\" data-testid=\"evidence-filter-select\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Types</SelectItem>\n                      <SelectItem value=\"image\">Images</SelectItem>\n                      <SelectItem value=\"audio\">Audio</SelectItem>\n                      <SelectItem value=\"video\">Video</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <Input\n                  placeholder=\"Search evidence...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-64\"\n                  data-testid=\"evidence-search-input\"\n                />\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"grid\")}\n                  data-testid=\"evidence-grid-view\"\n                >\n                  <Grid className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"list\")}\n                  data-testid=\"evidence-list-view\"\n                >\n                  <List className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Evidence Gallery */}\n        <div className={viewMode === \"grid\" ? \"grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\" : \"space-y-4\"}>\n          {filteredEvidence.map((item) => \n            viewMode === \"grid\" ? renderGridView(item) : renderListView(item)\n          )}\n          \n          {filteredEvidence.length === 0 && (\n            <div className=\"col-span-full text-center py-12 text-muted-foreground\">\n              <Camera className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No evidence found</h3>\n              <p className=\"text-sm\">\n                {searchQuery ? \"Try adjusting your search terms\" : \"Upload evidence files to get started\"}\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Evidence Viewer Modal */}\n        <Dialog open={!!selectedEvidence} onOpenChange={() => setSelectedEvidence(null)}>\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <ZoomIn className=\"w-5 h-5\" />\n                Evidence Viewer\n              </DialogTitle>\n            </DialogHeader>\n            {selectedEvidence && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    {selectedEvidence.date && <span>Date: {formatDate(selectedEvidence.date)}</span>}\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {selectedEvidence.type}\n                    </Badge>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\" data-testid=\"download-evidence\">\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download\n                  </Button>\n                </div>\n\n                <div className=\"rounded-lg border overflow-hidden\">\n                  {selectedEvidence.type === \"image\" ? (\n                    <img\n                      src={selectedEvidence.path || \"https://images.unsplash.com/photo-1589578527966-fdac0f44566c?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=800\"}\n                      alt={selectedEvidence.title}\n                      className=\"w-full max-h-[70vh] object-contain\"\n                    />\n                  ) : selectedEvidence.type === \"audio\" ? (\n                    <div className=\"bg-gradient-to-br from-primary/10 to-chart-2/10 p-12 text-center\">\n                      <div className=\"w-24 h-24 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <Play className=\"w-12 h-12 text-primary\" />\n                      </div>\n                      <h3 className=\"text-lg font-semibold mb-4\">{selectedEvidence.title}</h3>\n                      <Button className=\"mb-4\" data-testid=\"play-audio-modal\">\n                        Play Audio\n                      </Button>\n                      <div className=\"w-full bg-muted rounded-full h-2 max-w-md mx-auto\">\n                        <div className=\"bg-primary h-2 rounded-full\" style={{ width: \"30%\" }}></div>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"p-12 text-center text-muted-foreground\">\n                      Preview not available for this evidence type\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <h3 className=\"font-semibold text-lg\">{selectedEvidence.title}</h3>\n                  <p className=\"text-muted-foreground\">{selectedEvidence.summary}</p>\n                  \n                  {selectedEvidence.tags && (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {selectedEvidence.tags.map((tag) => (\n                        <Badge key={tag} variant=\"secondary\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n\n                  {selectedEvidence.sourceNote && (\n                    <div className=\"text-sm text-muted-foreground italic border-t pt-2\">\n                      Source: {selectedEvidence.sourceNote}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16354},"client/src/pages/foia.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { FileText, Plus, Clock, CheckCircle, XCircle, AlertCircle, Calendar, Building } from \"lucide-react\";\nimport { FOIA_REQUESTS, FoiaRequest, formatDate } from \"@/lib/case-data\";\n\nexport default function FoiaRequests() {\n  const [selectedRequest, setSelectedRequest] = useState<FoiaRequest | null>(null);\n  const [filterStatus, setFilterStatus] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const handleExport = () => {\n    window.print();\n  };\n\n  const filteredRequests = FOIA_REQUESTS.filter(request => {\n    if (filterStatus !== \"all\" && request.status !== filterStatus) return false;\n    \n    if (searchQuery.trim()) {\n      const searchLower = searchQuery.toLowerCase();\n      return (\n        request.agency.toLowerCase().includes(searchLower) ||\n        request.description.toLowerCase().includes(searchLower) ||\n        request.requestNumber?.toLowerCase().includes(searchLower)\n      );\n    }\n    \n    return true;\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return <CheckCircle className=\"w-4 h-4 text-chart-2\" />;\n      case \"pending\":\n        return <Clock className=\"w-4 h-4 text-chart-3\" />;\n      case \"denied\":\n        return <XCircle className=\"w-4 h-4 text-destructive\" />;\n      case \"submitted\":\n        return <AlertCircle className=\"w-4 h-4 text-primary\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"chart-2\";\n      case \"pending\":\n        return \"chart-3\";\n      case \"denied\":\n        return \"destructive\";\n      case \"submitted\":\n        return \"primary\";\n      default:\n        return \"muted\";\n    }\n  };\n\n  const foiaStats = {\n    total: FOIA_REQUESTS.length,\n    completed: FOIA_REQUESTS.filter(r => r.status === \"completed\").length,\n    pending: FOIA_REQUESTS.filter(r => r.status === \"pending\").length,\n    submitted: FOIA_REQUESTS.filter(r => r.status === \"submitted\").length,\n    denied: FOIA_REQUESTS.filter(r => r.status === \"denied\").length,\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"FOIA Requests\"\n        onSearch={handleSearch}\n        onExport={handleExport}\n      />\n\n      <div className=\"p-6 overflow-y-auto h-full bg-muted/30 print-friendly\">\n        {/* FOIA Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2\">FOIA Request Management</h2>\n            <p className=\"text-muted-foreground\">\n              Track and manage Freedom of Information Act requests and responses\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Dialog>\n              <DialogTrigger asChild>\n                <Button data-testid=\"create-foia-request\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  New FOIA Request\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Create New FOIA Request</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"agency\">Agency</Label>\n                      <Input id=\"agency\" placeholder=\"e.g., US Marshals Service\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"requestNumber\">Request Number (optional)</Label>\n                      <Input id=\"requestNumber\" placeholder=\"e.g., 2025-FOIA-08901\" />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"description\">Request Description</Label>\n                    <Textarea \n                      id=\"description\" \n                      placeholder=\"Detailed description of requested records...\"\n                      className=\"min-h-24\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"submittedDate\">Submitted Date</Label>\n                      <Input id=\"submittedDate\" type=\"date\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"status\">Status</Label>\n                      <Select defaultValue=\"submitted\">\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"submitted\">Submitted</SelectItem>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                          <SelectItem value=\"completed\">Completed</SelectItem>\n                          <SelectItem value=\"denied\">Denied</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\">Cancel</Button>\n                    <Button>Create Request</Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n            <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n              <FileText className=\"w-3 h-3\" />\n              {filteredRequests.length} Requests\n            </Badge>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <FileText className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div className=\"text-2xl font-bold text-primary\">{foiaStats.total}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Requests</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <CheckCircle className=\"w-6 h-6 text-chart-2\" />\n              </div>\n              <div className=\"text-2xl font-bold text-chart-2\">{foiaStats.completed}</div>\n              <div className=\"text-sm text-muted-foreground\">Completed</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <Clock className=\"w-6 h-6 text-chart-3\" />\n              </div>\n              <div className=\"text-2xl font-bold text-chart-3\">{foiaStats.pending}</div>\n              <div className=\"text-sm text-muted-foreground\">Pending</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <AlertCircle className=\"w-6 h-6 text-primary\" />\n              </div>\n              <div className=\"text-2xl font-bold text-primary\">{foiaStats.submitted}</div>\n              <div className=\"text-sm text-muted-foreground\">Submitted</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n                <XCircle className=\"w-6 h-6 text-destructive\" />\n              </div>\n              <div className=\"text-2xl font-bold text-destructive\">{foiaStats.denied}</div>\n              <div className=\"text-sm text-muted-foreground\">Denied</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"rounded-xl mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-wrap items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <Label>Filter by Status:</Label>\n                <Select value={filterStatus} onValueChange={setFilterStatus}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"foia-status-filter\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"submitted\">Submitted</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"completed\">Completed</SelectItem>\n                    <SelectItem value=\"denied\">Denied</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Input\n                placeholder=\"Search by agency, description, or request number...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"max-w-md\"\n                data-testid=\"foia-search-input\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* FOIA Requests List */}\n        <div className=\"space-y-4\">\n          {filteredRequests.map((request) => (\n            <Card\n              key={request.id}\n              className=\"rounded-xl cursor-pointer hover:shadow-md transition-all duration-200\"\n              onClick={() => setSelectedRequest(request)}\n              data-testid={`foia-request-${request.id}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <h3 className=\"text-lg font-semibold\">{request.agency}</h3>\n                      {request.requestNumber && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {request.requestNumber}\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-muted-foreground text-sm mb-3 line-clamp-2\">\n                      {request.description}\n                    </p>\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"w-4 h-4\" />\n                        <span>Submitted: {formatDate(request.submittedDate)}</span>\n                      </div>\n                      {request.responseDate && (\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"w-4 h-4\" />\n                          <span>Response: {formatDate(request.responseDate)}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex items-center gap-2\">\n                      {getStatusIcon(request.status)}\n                      <Badge \n                        variant=\"secondary\" \n                        className={`bg-${getStatusColor(request.status)}/10 text-${getStatusColor(request.status)} capitalize`}\n                      >\n                        {request.status}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                {request.responseSummary && (\n                  <div className=\"border-t pt-4\">\n                    <div className=\"bg-muted/50 rounded-lg p-3\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <FileText className=\"w-4 h-4 text-primary\" />\n                        <span className=\"font-medium text-sm\">Response Summary</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {request.responseSummary}\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n\n          {filteredRequests.length === 0 && (\n            <Card className=\"rounded-xl\">\n              <CardContent className=\"p-12 text-center\">\n                <FileText className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground/50\" />\n                <h3 className=\"text-lg font-medium mb-2\">No FOIA requests found</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  {searchQuery ? \"Try adjusting your search terms\" : \"Create your first FOIA request to get started\"}\n                </p>\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create FOIA Request\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>Create New FOIA Request</DialogTitle>\n                    </DialogHeader>\n                    {/* Same form content as above */}\n                  </DialogContent>\n                </Dialog>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Request Details Modal */}\n        <Dialog open={!!selectedRequest} onOpenChange={() => setSelectedRequest(null)}>\n          <DialogContent className=\"max-w-3xl\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                FOIA Request Details\n              </DialogTitle>\n            </DialogHeader>\n            {selectedRequest && (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Agency</Label>\n                    <p className=\"text-lg font-semibold\">{selectedRequest.agency}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Request Number</Label>\n                    <p className=\"text-lg font-semibold\">\n                      {selectedRequest.requestNumber || \"Not assigned\"}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Status</Label>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      {getStatusIcon(selectedRequest.status)}\n                      <Badge \n                        variant=\"secondary\" \n                        className={`bg-${getStatusColor(selectedRequest.status)}/10 text-${getStatusColor(selectedRequest.status)} capitalize`}\n                      >\n                        {selectedRequest.status}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Submitted Date</Label>\n                    <p className=\"text-lg font-semibold\">{formatDate(selectedRequest.submittedDate)}</p>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Request Description</Label>\n                  <p className=\"mt-2 text-sm\">{selectedRequest.description}</p>\n                </div>\n\n                {selectedRequest.responseSummary && (\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Response Summary</Label>\n                    <div className=\"mt-2 bg-muted/50 rounded-lg p-4\">\n                      <p className=\"text-sm\">{selectedRequest.responseSummary}</p>\n                    </div>\n                  </div>\n                )}\n\n                {selectedRequest.documentsReceived && selectedRequest.documentsReceived.length > 0 && (\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Documents Received</Label>\n                    <div className=\"mt-2 space-y-2\">\n                      {selectedRequest.documentsReceived.map((docId, index) => (\n                        <div key={index} className=\"flex items-center gap-2 p-2 bg-muted/50 rounded\">\n                          <FileText className=\"w-4 h-4 text-primary\" />\n                          <span className=\"text-sm\">{docId}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setSelectedRequest(null)}>\n                    Close\n                  </Button>\n                  <Button>\n                    Edit Request\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18337},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/search.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { DocumentCard } from \"@/components/case/document-card\";\nimport { TimelineEventComponent } from \"@/components/case/timeline-event\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Search, Filter, X, FileText, Clock, Calendar, Tags, MapPin } from \"lucide-react\";\nimport { useCaseSearch } from \"@/hooks/use-case-search\";\nimport { CASE_DOCUMENTS, CASE_TIMELINE, Doc, TimelineEvent, formatDate, getDocumentById } from \"@/lib/case-data\";\n\nexport default function SearchPage() {\n  const [selectedDocument, setSelectedDocument] = useState<Doc | null>(null);\n  const [advancedFilters, setAdvancedFilters] = useState({\n    dateFrom: \"\",\n    dateTo: \"\",\n    tags: [] as string[],\n    locations: [] as string[],\n    hasEvidence: false,\n    hasFOIA: false,\n  });\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [sortBy, setSortBy] = useState(\"relevance\");\n\n  const { query, setQuery, results, activeFilters, addFilter, removeFilter, clearFilters } = useCaseSearch();\n\n  const handleSearch = (searchQuery: string) => {\n    setQuery(searchQuery);\n  };\n\n  const handleExport = () => {\n    window.print();\n  };\n\n  const handleDocumentClick = (docId: string) => {\n    const doc = getDocumentById(docId);\n    if (doc) {\n      setSelectedDocument(doc);\n    }\n  };\n\n  // Get unique tags and locations for filters\n  const allTags = Array.from(new Set([\n    ...results.flatMap(item => item.tags || [])\n  ])).sort();\n\n  const allLocations = Array.from(new Set([\n    \"Lafayette, LA\",\n    \"Mississippi\",\n    \"Texas\", \n    \"Utah\",\n    \"Washington DC\",\n    \"Federal Court\"\n  ])).sort();\n\n  // Filter results based on advanced filters\n  const filteredResults = results.filter(item => {\n    if (advancedFilters.dateFrom && item.date && item.date < advancedFilters.dateFrom) return false;\n    if (advancedFilters.dateTo && item.date && item.date > advancedFilters.dateTo) return false;\n    \n    if (advancedFilters.tags.length > 0) {\n      const itemTags = item.tags || [];\n      if (!advancedFilters.tags.some(tag => itemTags.includes(tag))) return false;\n    }\n    \n    if (advancedFilters.hasEvidence && item.type === 'document') {\n      if (item.docType !== 'image' && item.docType !== 'audio') return false;\n    }\n    \n    if (advancedFilters.hasFOIA) {\n      const itemTags = item.tags || [];\n      if (!itemTags.includes('FOIA')) return false;\n    }\n    \n    return true;\n  });\n\n  // Sort results\n  const sortedResults = [...filteredResults].sort((a, b) => {\n    switch (sortBy) {\n      case \"date\":\n        return new Date(b.date || \"\").getTime() - new Date(a.date || \"\").getTime();\n      case \"title\":\n        return a.title.localeCompare(b.title);\n      case \"type\":\n        if (a.type !== b.type) return a.type.localeCompare(b.type);\n        return a.title.localeCompare(b.title);\n      default:\n        return 0; // relevance - keep search order\n    }\n  });\n\n  // Convert SearchableItems back to original types for components\n  const documentResults = sortedResults\n    .filter(item => item.type === 'document')\n    .map(item => {\n      const originalDoc = CASE_DOCUMENTS.find(doc => doc.id === item.id);\n      return originalDoc!;\n    })\n    .filter(Boolean);\n    \n  const timelineResults = sortedResults\n    .filter(item => item.type === 'timeline')\n    .map(item => {\n      const originalEvent = CASE_TIMELINE.find(event => event.id === item.id);\n      return originalEvent!;\n    })\n    .filter(Boolean);\n\n  const searchStats = {\n    total: sortedResults.length,\n    documents: documentResults.length,\n    timeline: timelineResults.length,\n  };\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Advanced Search\"\n        onSearch={handleSearch}\n        onExport={handleExport}\n      />\n\n      <div className=\"p-6 overflow-y-auto h-full bg-muted/30 print-friendly\">\n        {/* Search Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold mb-2\">Advanced Case Search</h2>\n            <p className=\"text-muted-foreground\">\n              Search across all documents, timeline events, and evidence with advanced filtering\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              data-testid=\"toggle-advanced-search\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Advanced Filters\n            </Button>\n            <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n              <Search className=\"w-3 h-3\" />\n              {searchStats.total} Results\n            </Badge>\n          </div>\n        </div>\n\n        {/* Search Bar */}\n        <Card className=\"rounded-xl mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Search documents, timeline events, tags, summaries...\"\n                value={query}\n                onChange={(e) => setQuery(e.target.value)}\n                className=\"pl-12 pr-4 py-3 text-lg\"\n                data-testid=\"advanced-search-input\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Advanced Filters Panel */}\n        {showAdvanced && (\n          <Card className=\"rounded-xl mb-6\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <Filter className=\"w-5 h-5\" />\n                Advanced Filters\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Date Range */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"dateFrom\">Date From</Label>\n                  <Input\n                    id=\"dateFrom\"\n                    type=\"date\"\n                    value={advancedFilters.dateFrom}\n                    onChange={(e) => setAdvancedFilters(prev => ({ ...prev, dateFrom: e.target.value }))}\n                    data-testid=\"search-date-from\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"dateTo\">Date To</Label>\n                  <Input\n                    id=\"dateTo\"\n                    type=\"date\"\n                    value={advancedFilters.dateTo}\n                    onChange={(e) => setAdvancedFilters(prev => ({ ...prev, dateTo: e.target.value }))}\n                    data-testid=\"search-date-to\"\n                  />\n                </div>\n              </div>\n\n              {/* Content Type Filters */}\n              <div className=\"space-y-3\">\n                <Label>Content Types</Label>\n                <div className=\"flex flex-wrap gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"hasEvidence\"\n                      checked={advancedFilters.hasEvidence}\n                      onCheckedChange={(checked) => \n                        setAdvancedFilters(prev => ({ ...prev, hasEvidence: !!checked }))\n                      }\n                    />\n                    <Label htmlFor=\"hasEvidence\" className=\"text-sm\">Has Evidence</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"hasFOIA\"\n                      checked={advancedFilters.hasFOIA}\n                      onCheckedChange={(checked) => \n                        setAdvancedFilters(prev => ({ ...prev, hasFOIA: !!checked }))\n                      }\n                    />\n                    <Label htmlFor=\"hasFOIA\" className=\"text-sm\">FOIA Related</Label>\n                  </div>\n                </div>\n              </div>\n\n              {/* Tags Filter */}\n              {allTags.length > 0 && (\n                <div className=\"space-y-3\">\n                  <Label>Tags</Label>\n                  <div className=\"flex flex-wrap gap-2 max-h-32 overflow-y-auto\">\n                    {allTags.map(tag => (\n                      <div key={tag} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={`tag-${tag}`}\n                          checked={advancedFilters.tags.includes(tag)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setAdvancedFilters(prev => ({ \n                                ...prev, \n                                tags: [...prev.tags, tag] \n                              }));\n                            } else {\n                              setAdvancedFilters(prev => ({ \n                                ...prev, \n                                tags: prev.tags.filter(t => t !== tag) \n                              }));\n                            }\n                          }}\n                        />\n                        <Label htmlFor={`tag-${tag}`} className=\"text-sm\">\n                          <Badge variant=\"outline\" className=\"text-xs\">{tag}</Badge>\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setAdvancedFilters({\n                      dateFrom: \"\",\n                      dateTo: \"\",\n                      tags: [],\n                      locations: [],\n                      hasEvidence: false,\n                      hasFOIA: false,\n                    });\n                    clearFilters();\n                  }}\n                  data-testid=\"clear-advanced-filters\"\n                >\n                  Clear All Filters\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Active Filters */}\n        {(activeFilters.length > 0 || query) && (\n          <div className=\"flex flex-wrap items-center gap-2 mb-6\">\n            <span className=\"text-sm font-medium\">Active filters:</span>\n            {query && (\n              <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                <Search className=\"w-3 h-3\" />\n                Search: \"{query}\"\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-auto p-0 ml-1\"\n                  onClick={() => setQuery(\"\")}\n                >\n                  <X className=\"w-3 h-3\" />\n                </Button>\n              </Badge>\n            )}\n            {activeFilters.map(filter => (\n              <Badge key={filter} variant=\"secondary\" className=\"flex items-center gap-1\">\n                {filter}\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-auto p-0 ml-1\"\n                  onClick={() => removeFilter(filter)}\n                >\n                  <X className=\"w-3 h-3\" />\n                </Button>\n              </Badge>\n            ))}\n          </div>\n        )}\n\n        {/* Results Controls */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Label>Sort by:</Label>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-32\" data-testid=\"search-sort-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"relevance\">Relevance</SelectItem>\n                  <SelectItem value=\"date\">Date</SelectItem>\n                  <SelectItem value=\"title\">Title</SelectItem>\n                  <SelectItem value=\"type\">Type</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            {searchStats.total} results ({searchStats.documents} documents, {searchStats.timeline} timeline events)\n          </div>\n        </div>\n\n        {/* Search Results */}\n        {sortedResults.length > 0 ? (\n          <Tabs defaultValue=\"all\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"all\" className=\"flex items-center gap-2\">\n                All Results\n                <Badge variant=\"secondary\" className=\"text-xs\">{searchStats.total}</Badge>\n              </TabsTrigger>\n              <TabsTrigger value=\"documents\" className=\"flex items-center gap-2\">\n                Documents\n                <Badge variant=\"secondary\" className=\"text-xs\">{searchStats.documents}</Badge>\n              </TabsTrigger>\n              <TabsTrigger value=\"timeline\" className=\"flex items-center gap-2\">\n                Timeline\n                <Badge variant=\"secondary\" className=\"text-xs\">{searchStats.timeline}</Badge>\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"all\" className=\"space-y-6\">\n              {/* Documents */}\n              {documentResults.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                    <FileText className=\"w-5 h-5\" />\n                    Documents ({documentResults.length})\n                  </h3>\n                  <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n                    {documentResults.slice(0, 6).map((doc) => (\n                      <DocumentCard\n                        key={doc.id}\n                        document={doc}\n                        onOpen={setSelectedDocument}\n                      />\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Timeline Events */}\n              {timelineResults.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                    <Clock className=\"w-5 h-5\" />\n                    Timeline Events ({timelineResults.length})\n                  </h3>\n                  <div className=\"space-y-6\">\n                    {timelineResults.slice(0, 5).map((event) => (\n                      <TimelineEventComponent\n                        key={event.id}\n                        event={event}\n                        onDocumentClick={handleDocumentClick}\n                        showConnector={false}\n                      />\n                    ))}\n                  </div>\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"documents\">\n              <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {documentResults.map((doc) => (\n                  <DocumentCard\n                    key={doc.id}\n                    document={doc}\n                    onOpen={setSelectedDocument}\n                  />\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"timeline\">\n              <div className=\"space-y-6\">\n                {timelineResults.map((event) => (\n                  <TimelineEventComponent\n                    key={event.id}\n                    event={event}\n                    onDocumentClick={handleDocumentClick}\n                    showConnector={false}\n                  />\n                ))}\n              </div>\n            </TabsContent>\n          </Tabs>\n        ) : (\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-12 text-center\">\n              <Search className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground/50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No results found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {query \n                  ? `No items match your search for \"${query}\"`\n                  : \"Enter a search term to find documents and timeline events\"\n                }\n              </p>\n              <div className=\"flex flex-wrap justify-center gap-2\">\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setQuery(\"FOIA\")}>\n                  Search FOIA\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setQuery(\"courthouse\")}>\n                  Search Courthouse\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setQuery(\"First Amendment\")}>\n                  Search First Amendment\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Document Viewer Modal */}\n        <Dialog open={!!selectedDocument} onOpenChange={() => setSelectedDocument(null)}>\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                Document Viewer\n              </DialogTitle>\n            </DialogHeader>\n            {selectedDocument && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  {selectedDocument.date && <span>{formatDate(selectedDocument.date)}</span>}\n                  {selectedDocument.sourceNote && (\n                    <>\n                      <span>â¢</span>\n                      <span>{selectedDocument.sourceNote}</span>\n                    </>\n                  )}\n                </div>\n                {selectedDocument.path ? (\n                  selectedDocument.type === \"image\" ? (\n                    <img\n                      src={selectedDocument.path}\n                      alt={selectedDocument.title}\n                      className=\"w-full rounded-lg border max-h-[70vh] object-contain\"\n                    />\n                  ) : (\n                    <iframe\n                      title={selectedDocument.title}\n                      src={selectedDocument.path}\n                      className=\"w-full h-[70vh] rounded-lg border\"\n                    />\n                  )\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No preview available for this document\n                  </div>\n                )}\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <h3 className=\"font-semibold\">{selectedDocument.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{selectedDocument.summary}</p>\n                  </div>\n                  {selectedDocument.path && (\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <a\n                        href={selectedDocument.path}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        data-testid=\"open-document-source\"\n                      >\n                        Open Source\n                      </a>\n                    </Button>\n                  )}\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20202},"client/src/pages/timeline.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { TimelineEventComponent } from \"@/components/case/timeline-event\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar, Filter, FileText, BarChart } from \"lucide-react\";\nimport { ResponsiveContainer, BarChart as RechartsBarChart, Bar, XAxis, YAxis, Tooltip } from \"recharts\";\nimport { CASE_TIMELINE, Doc, formatDate, getDocumentById } from \"@/lib/case-data\";\n\nexport default function Timeline() {\n  const [selectedDocument, setSelectedDocument] = useState<Doc | null>(null);\n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [dateRange, setDateRange] = useState({ start: \"\", end: \"\" });\n\n  const handleSearch = (query: string) => {\n    console.log(\"Searching timeline:\", query);\n  };\n\n  const handleExport = () => {\n    window.print();\n  };\n\n  const handleDocumentClick = (docId: string) => {\n    const doc = getDocumentById(docId);\n    if (doc) {\n      setSelectedDocument(doc);\n    }\n  };\n\n  // Filter timeline events\n  const filteredTimeline = CASE_TIMELINE.filter(event => {\n    if (filterType !== \"all\") {\n      const hasTag = event.tags?.includes(filterType);\n      if (!hasTag) return false;\n    }\n\n    if (dateRange.start && event.date < dateRange.start) return false;\n    if (dateRange.end && event.date > dateRange.end) return false;\n\n    return true;\n  });\n\n  // Create chart data\n  const chartData = CASE_TIMELINE.reduce((acc, event) => {\n    const month = new Date(event.date).toISOString().slice(0, 7);\n    const existing = acc.find(item => item.month === month);\n    if (existing) {\n      existing.events += 1;\n    } else {\n      acc.push({ month, events: 1 });\n    }\n    return acc;\n  }, [] as { month: string; events: number }[])\n  .sort((a, b) => a.month.localeCompare(b.month));\n\n  const filterOptions = [\n    { value: \"all\", label: \"All Events\" },\n    { value: \"courthouse\", label: \"Courthouse Events\" },\n    { value: \"FOIA\", label: \"FOIA Related\" },\n    { value: \"critical\", label: \"Critical Events\" },\n    { value: \"recording\", label: \"Recordings\" },\n  ];\n\n  return (\n    <div className=\"flex-1 overflow-hidden\">\n      <Header\n        title=\"Case Timeline\"\n        onSearch={handleSearch}\n        onExport={handleExport}\n      />\n\n      <div className=\"p-4 sm:p-6 overflow-y-auto h-full bg-muted/30 print-friendly\">\n        {/* Timeline Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6\">\n          <div>\n            <h2 className=\"text-xl sm:text-2xl font-bold mb-2\">Case Timeline & Events</h2>\n            <p className=\"text-sm sm:text-base text-muted-foreground\">\n              Chronological view of all case developments and key events\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n              <Calendar className=\"w-3 h-3\" />\n              {filteredTimeline.length} Events\n            </Badge>\n          </div>\n        </div>\n\n        {/* Filters and Chart */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          {/* Filters */}\n          <Card className=\"lg:col-span-1 rounded-xl\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <Filter className=\"w-5 h-5\" />\n                Filter Timeline\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4 p-3 sm:p-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Event Type</label>\n                <Select value={filterType} onValueChange={setFilterType}>\n                  <SelectTrigger data-testid=\"timeline-filter-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {filterOptions.map(option => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Date Range</label>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n                  <Input\n                    type=\"date\"\n                    placeholder=\"Start date\"\n                    value={dateRange.start}\n                    onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}\n                    data-testid=\"timeline-start-date\"\n                  />\n                  <Input\n                    type=\"date\"\n                    placeholder=\"End date\"\n                    value={dateRange.end}\n                    onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}\n                    data-testid=\"timeline-end-date\"\n                  />\n                </div>\n              </div>\n\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => {\n                  setFilterType(\"all\");\n                  setDateRange({ start: \"\", end: \"\" });\n                }}\n                data-testid=\"clear-timeline-filters\"\n              >\n                Clear Filters\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Events Chart */}\n          <Card className=\"lg:col-span-2 rounded-xl\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                <BarChart className=\"w-5 h-5\" />\n                Events by Month\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-48\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <RechartsBarChart data={chartData}>\n                    <XAxis \n                      dataKey=\"month\" \n                      fontSize={12} \n                      tickLine={false} \n                      axisLine={false}\n                      tickFormatter={(value) => new Date(value + \"-01\").toLocaleDateString('en-US', { month: 'short', year: '2-digit' })}\n                    />\n                    <YAxis \n                      allowDecimals={false} \n                      fontSize={12} \n                      tickLine={false} \n                      axisLine={false} \n                    />\n                    <Tooltip \n                      cursor={{ fill: \"hsl(var(--muted))\" }}\n                      labelFormatter={(value) => new Date(value + \"-01\").toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}\n                      formatter={(value) => [value, \"Events\"]}\n                    />\n                    <Bar \n                      dataKey=\"events\" \n                      radius={[6, 6, 0, 0]}\n                      fill=\"hsl(var(--primary))\"\n                    />\n                  </RechartsBarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Timeline Events */}\n        <Card className=\"rounded-xl\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"text-lg font-semibold\">Timeline Events</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"relative\">\n              <div className=\"absolute left-6 top-0 bottom-0 w-0.5 timeline-line\"></div>\n              <div className=\"space-y-8\">\n                {filteredTimeline.map((event) => (\n                  <TimelineEventComponent\n                    key={event.id}\n                    event={event}\n                    onDocumentClick={handleDocumentClick}\n                  />\n                ))}\n                {filteredTimeline.length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No events match the current filters\n                  </div>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Document Viewer Modal */}\n        <Dialog open={!!selectedDocument} onOpenChange={() => setSelectedDocument(null)}>\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                Document Viewer\n              </DialogTitle>\n            </DialogHeader>\n            {selectedDocument && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  {selectedDocument.date && <span>{formatDate(selectedDocument.date)}</span>}\n                  {selectedDocument.sourceNote && (\n                    <>\n                      <span>â¢</span>\n                      <span>{selectedDocument.sourceNote}</span>\n                    </>\n                  )}\n                </div>\n                {selectedDocument.path ? (\n                  selectedDocument.type === \"image\" ? (\n                    <img\n                      src={selectedDocument.path}\n                      alt={selectedDocument.title}\n                      className=\"w-full rounded-lg border max-h-[70vh] object-contain\"\n                    />\n                  ) : (\n                    <iframe\n                      title={selectedDocument.title}\n                      src={selectedDocument.path}\n                      className=\"w-full h-[70vh] rounded-lg border\"\n                    />\n                  )\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No preview available for this document\n                  </div>\n                )}\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <h3 className=\"font-semibold\">{selectedDocument.title}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{selectedDocument.summary}</p>\n                  </div>\n                  {selectedDocument.path && (\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                      <a\n                        href={selectedDocument.path}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        data-testid=\"open-document-source\"\n                      >\n                        Open Source\n                      </a>\n                    </Button>\n                  )}\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11205},"client/src/components/case/document-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Image, Video, List, Info, ExternalLink } from \"lucide-react\";\nimport { Doc, DocType, formatDate } from \"@/lib/case-data\";\n\ninterface DocumentCardProps {\n  document: Doc;\n  onOpen?: (doc: Doc) => void;\n}\n\nexport function DocumentCard({ document, onOpen }: DocumentCardProps) {\n  const getTypeIcon = (type: DocType) => {\n    switch (type) {\n      case \"pdf\":\n      case \"letter\":\n        return <FileText className=\"h-4 w-4\" />;\n      case \"image\":\n        return <Image className=\"h-4 w-4\" />;\n      case \"audio\":\n        return <Video className=\"h-4 w-4\" />;\n      case \"transcript\":\n        return <List className=\"h-4 w-4\" />;\n      default:\n        return <Info className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getTypeColor = (type: DocType) => {\n    switch (type) {\n      case \"pdf\":\n      case \"letter\":\n        return \"chart-4\";\n      case \"image\":\n        return \"chart-3\";\n      case \"audio\":\n        return \"chart-2\";\n      case \"transcript\":\n        return \"primary\";\n      default:\n        return \"muted-foreground\";\n    }\n  };\n\n  return (\n    <Card className=\"rounded-xl sm:rounded-2xl hover:shadow-md transition-all duration-200 evidence-zoom\">\n      <CardHeader className=\"pb-2 p-3 sm:p-4\">\n        <div className=\"flex items-start justify-between gap-2 sm:gap-3\">\n          <div className=\"flex-1 min-w-0\">\n            <CardTitle className=\"text-sm sm:text-base leading-tight line-clamp-2\">\n              {document.title}\n            </CardTitle>\n            {document.date && (\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                {formatDate(document.date)}\n              </div>\n            )}\n          </div>\n          <div className={`text-${getTypeColor(document.type)} flex-shrink-0`}>\n            {getTypeIcon(document.type)}\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-3 p-3 sm:p-4 pt-0\">\n        <p className=\"text-sm line-clamp-2 sm:line-clamp-3 min-h-[2.5rem] sm:min-h-[3.5rem] text-muted-foreground\">\n          {document.summary}\n        </p>\n        \n        {document.tags && document.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 sm:gap-2\">\n            {document.tags.map((tag) => (\n              <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        )}\n        \n        <div className=\"flex flex-col sm:flex-row gap-2 pt-1\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"flex-1 text-xs sm:text-sm\"\n            onClick={() => onOpen?.(document)}\n            data-testid={`open-document-${document.id}`}\n          >\n            Open\n          </Button>\n          \n          {document.path && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              asChild\n              data-testid={`view-source-${document.id}`}\n            >\n              <a\n                href={document.path}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"flex items-center gap-1\"\n              >\n                <ExternalLink className=\"h-3 w-3\" />\n                Source\n              </a>\n            </Button>\n          )}\n        </div>\n        \n        {document.sourceNote && (\n          <div className=\"text-xs text-muted-foreground italic border-t pt-2\">\n            {document.sourceNote}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3689},"client/src/components/case/evidence-gallery.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ZoomIn, Download, Play, Pause } from \"lucide-react\";\nimport { CASE_DOCUMENTS, Doc, formatDate } from \"@/lib/case-data\";\n\ninterface EvidenceGalleryProps {\n  maxItems?: number;\n  showViewAll?: boolean;\n}\n\nexport function EvidenceGallery({ maxItems = 4, showViewAll = true }: EvidenceGalleryProps) {\n  const [selectedEvidence, setSelectedEvidence] = useState<Doc | null>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const evidenceItems = CASE_DOCUMENTS.filter(doc => \n    doc.type === \"image\" || doc.type === \"audio\"\n  ).slice(0, maxItems);\n\n  const renderEvidencePreview = (item: Doc) => {\n    if (item.type === \"image\") {\n      return (\n        <img\n          src={item.path || \"https://images.unsplash.com/photo-1589578527966-fdac0f44566c?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"}\n          alt={item.title}\n          className=\"w-full h-32 object-cover\"\n        />\n      );\n    }\n\n    if (item.type === \"audio\") {\n      return (\n        <div className=\"w-full h-32 bg-gradient-to-br from-primary/20 to-chart-2/20 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <Play className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n            <span className=\"text-sm font-medium\">Audio Evidence</span>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"w-full h-32 bg-muted flex items-center justify-center\">\n        <span className=\"text-muted-foreground\">Preview not available</span>\n      </div>\n    );\n  };\n\n  const renderEvidenceModal = (item: Doc) => {\n    if (item.type === \"image\") {\n      return (\n        <div className=\"space-y-4\">\n          <img\n            src={item.path || \"https://images.unsplash.com/photo-1589578527966-fdac0f44566c?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=800\"}\n            alt={item.title}\n            className=\"w-full rounded-lg border border-border max-h-[70vh] object-contain\"\n          />\n          <div className=\"flex justify-between items-center\">\n            <div className=\"space-y-1\">\n              <p className=\"text-sm font-medium\">{item.title}</p>\n              {item.date && (\n                <p className=\"text-xs text-muted-foreground\">{formatDate(item.date)}</p>\n              )}\n            </div>\n            <Button size=\"sm\" variant=\"outline\" data-testid=\"download-evidence\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Download\n            </Button>\n          </div>\n        </div>\n      );\n    }\n\n    if (item.type === \"audio\") {\n      return (\n        <div className=\"space-y-4\">\n          <div className=\"bg-gradient-to-br from-primary/10 to-chart-2/10 rounded-lg p-8 text-center\">\n            <div className=\"w-24 h-24 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              {isPlaying ? (\n                <Pause className=\"w-12 h-12 text-primary\" />\n              ) : (\n                <Play className=\"w-12 h-12 text-primary\" />\n              )}\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">{item.title}</h3>\n            {item.date && (\n              <p className=\"text-sm text-muted-foreground mb-4\">{formatDate(item.date)}</p>\n            )}\n            <Button\n              onClick={() => setIsPlaying(!isPlaying)}\n              className=\"mb-4\"\n              data-testid=\"play-audio-evidence\"\n            >\n              {isPlaying ? \"Pause\" : \"Play\"} Audio\n            </Button>\n            <div className=\"w-full bg-muted rounded-full h-2\">\n              <div className=\"bg-primary h-2 rounded-full\" style={{ width: \"30%\" }}></div>\n            </div>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <p className=\"text-sm text-muted-foreground\">{item.summary}</p>\n            <Button size=\"sm\" variant=\"outline\" data-testid=\"download-audio\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Download\n            </Button>\n          </div>\n        </div>\n      );\n    }\n\n    return <div>Preview not available for this evidence type.</div>;\n  };\n\n  return (\n    <>\n      <Card className=\"rounded-xl\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold\">Key Evidence</CardTitle>\n            {showViewAll && (\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"view-all-evidence\">\n                View All\n              </Button>\n            )}\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            {evidenceItems.map((item) => (\n              <div\n                key={item.id}\n                className=\"evidence-zoom cursor-pointer rounded-lg overflow-hidden border border-border\"\n                onClick={() => setSelectedEvidence(item)}\n                data-testid={`evidence-item-${item.id}`}\n              >\n                {renderEvidencePreview(item)}\n                <div className=\"p-3\">\n                  <h4 className=\"font-medium text-sm mb-1 line-clamp-1\">{item.title}</h4>\n                  <p className=\"text-xs text-muted-foreground line-clamp-1\">\n                    {item.summary}\n                  </p>\n                  {item.tags && (\n                    <div className=\"flex flex-wrap gap-1 mt-2\">\n                      {item.tags.slice(0, 2).map((tag) => (\n                        <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"bg-muted/50 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <ZoomIn className=\"text-primary w-4 h-4\" />\n              <span className=\"font-medium text-sm\">Evidence Summary</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              All evidence items are categorized, timestamped, and cross-referenced with timeline events. \n              Digital chain of custody maintained.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Dialog open={!!selectedEvidence} onOpenChange={() => setSelectedEvidence(null)}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <ZoomIn className=\"w-5 h-5\" />\n              Evidence Viewer\n            </DialogTitle>\n          </DialogHeader>\n          {selectedEvidence && renderEvidenceModal(selectedEvidence)}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":7037},"client/src/components/case/legal-analysis.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, BarChart, Lightbulb, FileText, Download } from \"lucide-react\";\nimport { LEGAL_ISSUES } from \"@/lib/case-data\";\n\nexport function LegalAnalysis() {\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"critical\": return \"destructive\";\n      case \"high\": return \"chart-4\";\n      case \"medium\": return \"chart-3\";\n      case \"low\": return \"chart-2\";\n      default: return \"muted\";\n    }\n  };\n\n  const getCaseStrengthMetrics = () => [\n    { label: \"Evidence Quality\", value: 92, color: \"chart-2\" },\n    { label: \"Documentation Completeness\", value: 88, color: \"primary\" },\n    { label: \"Timeline Coherence\", value: 95, color: \"chart-3\" },\n    { label: \"Jurisdictional Coverage\", value: 76, color: \"chart-4\" },\n  ];\n\n  return (\n    <Card className=\"rounded-xl\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-xl font-semibold\">Legal Analysis Dashboard</CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Button size=\"sm\" data-testid=\"generate-legal-brief\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Generate Brief\n            </Button>\n            <Button size=\"sm\" variant=\"outline\" data-testid=\"export-analysis\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Analysis\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Potential Violations */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold flex items-center gap-2\">\n              <AlertTriangle className=\"text-chart-4 w-5 h-5\" />\n              Identified Legal Issues\n            </h4>\n            \n            <div className=\"space-y-3\">\n              {LEGAL_ISSUES.map((issue) => (\n                <div\n                  key={issue.id}\n                  className={`p-4 rounded-lg border border-${getPriorityColor(issue.priority)}/20 bg-${getPriorityColor(issue.priority)}/5`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"font-medium text-sm\">{issue.title}</span>\n                    <Badge\n                      variant=\"secondary\"\n                      className={`text-xs bg-${getPriorityColor(issue.priority)} text-white`}\n                    >\n                      {issue.priority.charAt(0).toUpperCase() + issue.priority.slice(1)} Priority\n                    </Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mb-2\">{issue.description}</p>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {issue.category.replace('-', ' ')}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Case Strength Metrics */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold flex items-center gap-2\">\n              <BarChart className=\"text-primary w-5 h-5\" />\n              Case Strength Analysis\n            </h4>\n            \n            <div className=\"space-y-4\">\n              {getCaseStrengthMetrics().map((metric) => (\n                <div key={metric.label} className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">{metric.label}</span>\n                    <span className={`text-sm font-semibold text-${metric.color}`}>\n                      {metric.value}%\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-muted rounded-full h-2\">\n                    <div\n                      className={`bg-${metric.color} h-2 rounded-full transition-all duration-500`}\n                      style={{ width: `${metric.value}%` }}\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"mt-6 p-4 rounded-lg border border-primary/20 bg-primary/5\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Lightbulb className=\"text-primary w-4 h-4\" />\n                <span className=\"font-medium text-sm\">Recommendation</span>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Strong case foundation with excellent documentation. Focus on expanding \n                jurisdictional evidence and witness statements.\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4855},"client/src/components/case/stats-grid.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FileText, Clock, Camera, AlertTriangle } from \"lucide-react\";\nimport { CASE_STATS } from \"@/lib/case-data\";\n\nexport function StatsGrid() {\n  const stats = [\n    {\n      title: \"Total Documents\",\n      value: CASE_STATS.totalDocuments,\n      description: \"Legal filings, evidence, correspondence\",\n      icon: FileText,\n      color: \"primary\",\n    },\n    {\n      title: \"Timeline Events\",\n      value: CASE_STATS.timelineEvents,\n      description: \"Chronological case developments\",\n      icon: Clock,\n      color: \"chart-2\",\n    },\n    {\n      title: \"Evidence Items\",\n      value: CASE_STATS.evidenceItems,\n      description: \"Photos, recordings, physical evidence\",\n      icon: Camera,\n      color: \"chart-3\",\n    },\n    {\n      title: \"Potential Violations\",\n      value: CASE_STATS.potentialViolations,\n      description: \"Identified legal infractions\",\n      icon: AlertTriangle,\n      color: \"chart-4\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {stats.map((stat) => (\n        <Card key={stat.title} className=\"case-stat border border-border\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <div className={`w-12 h-12 bg-${stat.color}/10 rounded-lg flex items-center justify-center`}>\n              <stat.icon className={`text-${stat.color} text-xl w-6 h-6`} />\n            </div>\n            <span className={`text-3xl font-bold text-${stat.color}`} data-testid={`stat-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {stat.value}\n            </span>\n          </CardHeader>\n          <CardContent>\n            <CardTitle className=\"text-base font-semibold mb-1\">{stat.title}</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">{stat.description}</p>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1971},"client/src/components/case/timeline-event.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, FileText } from \"lucide-react\";\nimport { TimelineEvent, formatDate, getDocumentById } from \"@/lib/case-data\";\n\ninterface TimelineEventProps {\n  event: TimelineEvent;\n  onDocumentClick?: (docId: string) => void;\n  showConnector?: boolean;\n}\n\nexport function TimelineEventComponent({ event, onDocumentClick, showConnector = true }: TimelineEventProps) {\n  const getEventIcon = (tags?: string[] | null) => {\n    if (tags?.includes(\"FOIA\")) return \"ð\";\n    if (tags?.includes(\"courthouse\")) return \"ðï¸\";\n    if (tags?.includes(\"livestream\")) return \"ð¹\";\n    return \"âï¸\";\n  };\n\n  const getEventPriority = (tags?: string[] | null) => {\n    if (tags?.includes(\"critical\") || tags?.includes(\"criminal\")) return \"Critical Event\";\n    if (tags?.includes(\"FOIA\")) return \"FOIA Request\";\n    if (tags?.includes(\"response\")) return \"Response\";\n    return \"Event\";\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"Critical Event\": return \"destructive\";\n      case \"FOIA Request\": return \"chart-2\";\n      case \"Response\": return \"chart-3\";\n      default: return \"primary\";\n    }\n  };\n\n  return (\n    <div className=\"relative flex items-start gap-6\">\n      {showConnector && (\n        <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center border-4 border-background relative z-10\">\n          <span className=\"text-lg\">{getEventIcon(event.tags || undefined)}</span>\n        </div>\n      )}\n      \n      <Card className=\"flex-1 min-w-0\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"text-sm font-semibold text-primary\">\n              {formatDate(event.date)}\n            </div>\n            <Badge \n              variant=\"secondary\" \n              className={`text-xs bg-${getPriorityColor(getEventPriority(event.tags))}/10 text-${getPriorityColor(getEventPriority(event.tags))}`}\n            >\n              {getEventPriority(event.tags || undefined)}\n            </Badge>\n          </div>\n          <CardTitle className=\"text-base font-semibold\">\n            {event.title}\n          </CardTitle>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-3\">\n          <p className=\"text-sm text-muted-foreground\">\n            {event.summary}\n          </p>\n          \n          {event.tags && event.tags.length > 0 && (\n            <div className=\"flex flex-wrap gap-2\">\n              {event.tags.map((tag) => (\n                <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n          )}\n          \n          {event.docRefs && event.docRefs.length > 0 && (\n            <div className=\"space-y-2\">\n              <div className=\"text-xs font-medium text-muted-foreground\">Related Documents:</div>\n              <div className=\"flex flex-wrap gap-2\">\n                {event.docRefs.map((docId) => {\n                  const doc = getDocumentById(docId);\n                  if (!doc) return null;\n                  \n                  return (\n                    <Button\n                      key={docId}\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      className=\"text-xs h-7\"\n                      onClick={() => onDocumentClick?.(docId)}\n                      data-testid={`document-ref-${docId}`}\n                    >\n                      <FileText className=\"w-3 h-3 mr-1\" />\n                      {doc.title.length > 40 ? `${doc.title.slice(0, 40)}...` : doc.title}\n                    </Button>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3955},"client/src/components/layout/header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Moon, Sun, Download } from \"lucide-react\";\nimport { formatDate } from \"@/lib/case-data\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { CaseSelector } from \"@/components/case-selector\";\nimport { useCurrentCase } from \"@/lib/case-context\";\n\ninterface HeaderProps {\n  title: string;\n  onSearch?: (query: string) => void;\n  onExport?: () => void;\n  searchPlaceholder?: string;\n}\n\nexport function Header({ title, onSearch, onExport, searchPlaceholder = \"Search...\" }: HeaderProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDark, setIsDark] = useState(false);\n  const isMobile = useIsMobile();\n  const { currentCase } = useCurrentCase();\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    const shouldBeDark = savedTheme === 'dark' || (!savedTheme && prefersDark);\n    \n    setIsDark(shouldBeDark);\n    if (shouldBeDark) {\n      document.documentElement.classList.add('dark');\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = !isDark;\n    setIsDark(newTheme);\n    \n    if (newTheme) {\n      document.documentElement.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n  };\n\n  const handleSearchChange = (value: string) => {\n    setSearchQuery(value);\n    onSearch?.(value);\n  };\n\n  const handleExport = () => {\n    onExport?.();\n    // Fallback to browser print if no custom export handler\n    if (!onExport) {\n      window.print();\n    }\n  };\n\n  return (\n    <header className={cn(\n      \"bg-card border-b border-border print-friendly\",\n      isMobile ? \"px-4 py-3\" : \"px-6 py-4\",\n      isMobile ? \"flex-col space-y-3\" : \"flex items-center justify-between\"\n    )}>\n      <div className={cn(\n        \"flex items-center\",\n        isMobile ? \"justify-between w-full\" : \"gap-4\"\n      )}>\n        <div className=\"flex items-center gap-3\">\n          <h2 className={cn(\n            \"font-bold\",\n            isMobile ? \"text-lg\" : \"text-2xl\"\n          )}>{title}</h2>\n          {currentCase && (\n            <div className={cn(\n              \"text-sm text-muted-foreground\",\n              isMobile && \"hidden\"\n            )}>\n              â¢ {currentCase.title}\n            </div>\n          )}\n        </div>\n        {!isMobile && (\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm text-muted-foreground\">Last updated:</span>\n            <span className=\"text-sm font-medium\">{formatDate(new Date().toISOString())}</span>\n          </div>\n        )}\n        {isMobile && (\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              data-testid=\"theme-toggle-button\"\n            >\n              {isDark ? <Sun className=\"w-3 h-3\" /> : <Moon className=\"w-3 h-3\" />}\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={handleExport}\n              data-testid=\"export-case-button\"\n            >\n              <Download className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <div className={cn(\n        \"flex items-center\",\n        isMobile ? \"w-full gap-2\" : \"gap-3\"\n      )}>\n        {!isMobile && <CaseSelector />}\n        <div className={cn(\n          \"relative\",\n          isMobile ? \"flex-1\" : \"\"\n        )}>\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n          <Input\n            type=\"search\"\n            placeholder={searchPlaceholder}\n            value={searchQuery}\n            onChange={(e) => handleSearchChange(e.target.value)}\n            className={cn(\n              \"pl-10 pr-4 py-2\",\n              isMobile ? \"w-full\" : \"w-80\"\n            )}\n            data-testid=\"header-search-input\"\n          />\n        </div>\n\n        {!isMobile && (\n          <>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              data-testid=\"theme-toggle-button\"\n            >\n              {isDark ? <Sun className=\"w-4 h-4\" /> : <Moon className=\"w-4 h-4\" />}\n            </Button>\n\n            <Button\n              onClick={handleExport}\n              className=\"flex items-center gap-2\"\n              data-testid=\"export-case-button\"\n            >\n              <Download className=\"w-4 h-4\" />\n              <span>Export Case</span>\n            </Button>\n          </>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":4875},"client/src/components/layout/sidebar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { Shield, ChartPie, Clock, FolderOpen, Camera, FileText, BarChart, Search, Highlighter, Download, Video, Menu, Scale, Calendar, Briefcase, Wand2, Brain, User, LogOut, Crown, Ticket, Settings } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { CaseSelector } from \"@/components/case-selector\";\nimport { useCurrentCase } from \"@/lib/case-context\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { CASE_STATS, FOIA_REQUESTS } from \"@/lib/case-data\";\nimport { useState } from \"react\";\n\ninterface SidebarProps {\n  className?: string;\n}\n\nexport function Sidebar({ className }: SidebarProps) {\n  const [location] = useLocation();\n  const isMobile = useIsMobile();\n  const [isOpen, setIsOpen] = useState(false);\n  const { user, logout } = useAuth();\n  \n  const getUserInitials = (user: any) => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    if (user?.username) {\n      return user.username.slice(0, 2).toUpperCase();\n    }\n    return \"U\";\n  };\n\n  const pendingFoiaCount = FOIA_REQUESTS.filter(r => r.status === \"pending\").length;\n\n  const navItems = [\n    {\n      title: \"CASE OVERVIEW\",\n      items: [\n        { href: \"/\", label: \"Dashboard\", icon: ChartPie },\n        { href: \"/timeline\", label: \"Timeline\", icon: Clock },\n        { href: \"/documents\", label: \"Documents\", icon: FolderOpen },\n        { href: \"/evidence\", label: \"Evidence Gallery\", icon: Camera },\n        { href: \"/video-evidence\", label: \"Video Evidence\", icon: Video },\n      ]\n    },\n    {\n      title: \"CASE MANAGEMENT\",\n      items: [\n        { href: \"/cases\", label: \"Case Management\", icon: Briefcase },\n        { href: \"/motions\", label: \"Motions\", icon: Scale },\n        { href: \"/deadlines\", label: \"Deadlines\", icon: Calendar },\n        { href: \"/brief-generator\", label: \"Brief Generator\", icon: Wand2 },\n        { href: \"/legal-analytics\", label: \"AI Analytics\", icon: Brain },\n        { href: \"/foia\", label: \"FOIA Requests\", icon: FileText, badge: pendingFoiaCount },\n        { href: \"/analytics\", label: \"Analytics\", icon: BarChart },\n        { href: \"/search\", label: \"Advanced Search\", icon: Search },\n        { href: \"/advanced-search\", label: \"AI Research\", icon: Brain },\n      ]\n    },\n    {\n      title: \"ACCOUNT\",\n      items: [\n        { href: \"/subscription\", label: \"Subscription\", icon: Crown },\n      ]\n    },\n    {\n      title: \"LEGAL TOOLS\",\n      items: [\n        { href: \"/annotations\", label: \"Annotations\", icon: Highlighter },\n        { href: \"/export\", label: \"Export Reports\", icon: Download },\n      ]\n    },\n    // Admin section - only show for admin users\n    ...(user?.role === 'admin' ? [{\n      title: \"ADMINISTRATION\",\n      items: [\n        { href: \"/admin/coupons\", label: \"Coupon Management\", icon: Ticket },\n      ]\n    }] : [])\n  ];\n\n  const SidebarContent = () => (\n    <div className=\"h-full flex flex-col overflow-y-auto sidebar-nav\">\n      <div className=\"p-6 border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"w-10 h-10 bg-sidebar-primary rounded-lg flex items-center justify-center\">\n            <Shield className=\"text-sidebar-primary-foreground w-5 h-5\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-sidebar-foreground\">CaseBuddy</h1>\n            <p className=\"text-sm text-sidebar-foreground/70\">Your Legal Case Assistant</p>\n          </div>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <CaseSelector />\n        </div>\n      </div>\n\n      <nav className=\"p-4 space-y-6 flex-1\">\n        {navItems.map((section) => (\n          <div key={section.title} className=\"space-y-2\">\n            <div className=\"text-xs font-semibold text-sidebar-foreground/50 uppercase tracking-wider mb-3\">\n              {section.title}\n            </div>\n            {section.items.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Link key={item.href} href={item.href} onClick={() => isMobile && setIsOpen(false)}>\n                  <div className={cn(\n                    \"flex items-center gap-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors cursor-pointer\",\n                    isActive \n                      ? \"bg-sidebar-primary text-sidebar-primary-foreground\" \n                      : \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground text-sidebar-foreground\"\n                  )}>\n                    <item.icon className=\"w-4 h-4\" />\n                    <span>{item.label}</span>\n                    {item.badge && item.badge > 0 && (\n                      <Badge variant=\"secondary\" className=\"ml-auto text-xs\">\n                        {item.badge}\n                      </Badge>\n                    )}\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        ))}\n      </nav>\n\n      <div className=\"p-4 border-t border-sidebar-border mt-auto\">\n        <div className=\"text-xs font-semibold text-sidebar-foreground/50 uppercase tracking-wider mb-3\">\n          CASE STATISTICS\n        </div>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-sidebar-foreground/70\">Documents</span>\n            <span className=\"font-semibold text-sidebar-foreground\">{CASE_STATS.totalDocuments}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-sidebar-foreground/70\">Evidence Items</span>\n            <span className=\"font-semibold text-sidebar-foreground\">{CASE_STATS.evidenceItems}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-sidebar-foreground/70\">Timeline Events</span>\n            <span className=\"font-semibold text-sidebar-foreground\">{CASE_STATS.timelineEvents}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-sidebar-foreground/70\">FOIA Requests</span>\n            <span className=\"font-semibold text-sidebar-foreground\">{CASE_STATS.foiaRequests}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* User Profile Section */}\n      <div className=\"mt-auto p-4 border-t border-sidebar-border\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"w-full justify-start h-auto p-3 hover:bg-sidebar-accent\">\n              <div className=\"flex items-center gap-3 w-full\">\n                <Avatar className=\"w-8 h-8\">\n                  <AvatarFallback className=\"bg-sidebar-primary text-sidebar-primary-foreground text-sm\">\n                    {getUserInitials(user)}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1 text-left\">\n                  <p className=\"text-sm font-medium text-sidebar-foreground\">\n                    {user?.firstName && user?.lastName ? `${user.firstName} ${user.lastName}` : user?.username || \"User\"}\n                  </p>\n                  <p className=\"text-xs text-sidebar-foreground/70\">{user?.email}</p>\n                </div>\n              </div>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-56\">\n            <DropdownMenuLabel>My Account</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>\n              <User className=\"mr-2 h-4 w-4\" />\n              <span>Profile</span>\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem onClick={() => logout()} className=\"text-red-600\">\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              <span>Log out</span>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </div>\n  );\n\n  // Mobile navigation with sheet\n  if (isMobile) {\n    return (\n      <>\n        <Sheet open={isOpen} onOpenChange={setIsOpen}>\n          <SheetTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"fixed top-4 left-4 z-50 md:hidden bg-background/80 backdrop-blur-sm border shadow-sm\"\n              data-testid=\"mobile-menu-toggle\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"left\" className=\"w-80 p-0 bg-sidebar\">\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Navigation Menu</SheetTitle>\n            </SheetHeader>\n            <SidebarContent />\n          </SheetContent>\n        </Sheet>\n      </>\n    );\n  }\n\n  // Desktop sidebar\n  return (\n    <aside className={cn(\n      \"w-80 bg-sidebar border-r border-sidebar-border overflow-y-auto sidebar-nav\",\n      className\n    )}>\n      <SidebarContent />\n    </aside>\n  );\n}","size_bytes":9435},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/case-selector.tsx":{"content":"import { useState } from \"react\";\nimport { Check, ChevronsUpDown, Plus, Folder } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { useCase } from \"@/lib/case-context\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface CaseSelectorProps {\n  onCreateNew?: () => void;\n}\n\nexport function CaseSelector({ onCreateNew }: CaseSelectorProps) {\n  const [open, setOpen] = useState(false);\n  const { currentCase, setCurrentCase, cases } = useCase();\n  const isMobile = useIsMobile();\n\n  const handleCaseSelect = (caseItem: any) => {\n    setCurrentCase(caseItem);\n    setOpen(false);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case \"high\": return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300\";\n      case \"medium\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      case \"low\": return \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\";\n      default: return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"closed\": return \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\";\n      default: return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n    }\n  };\n\n  const activeCases = cases.filter(c => c.status === \"active\");\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\n            \"justify-between\",\n            isMobile ? \"w-full max-w-[200px]\" : \"w-72\",\n            \"text-left\"\n          )}\n          data-testid=\"case-selector\"\n        >\n          <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n            <Folder className=\"w-4 h-4 flex-shrink-0\" />\n            <div className=\"min-w-0 flex-1\">\n              {currentCase ? (\n                <div className=\"flex flex-col\">\n                  <span className=\"text-sm font-medium truncate\">\n                    {currentCase.title}\n                  </span>\n                  {currentCase.caseNumber && (\n                    <span className=\"text-xs text-muted-foreground\">\n                      {currentCase.caseNumber}\n                    </span>\n                  )}\n                </div>\n              ) : (\n                <span className=\"text-muted-foreground\">Select case...</span>\n              )}\n            </div>\n          </div>\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className={cn(\"p-0\", isMobile ? \"w-[300px]\" : \"w-80\")} align=\"start\">\n        <Command>\n          <CommandInput placeholder=\"Search cases...\" className=\"h-9\" />\n          <CommandList>\n            <CommandEmpty>No cases found.</CommandEmpty>\n            <CommandGroup heading=\"Active Cases\">\n              {activeCases.map((caseItem) => (\n                <CommandItem\n                  key={caseItem.id}\n                  value={`${caseItem.title} ${caseItem.caseNumber || \"\"}`}\n                  onSelect={() => handleCaseSelect(caseItem)}\n                  className=\"cursor-pointer p-3\"\n                >\n                  <div className=\"flex items-center justify-between w-full\">\n                    <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n                      <Check\n                        className={cn(\n                          \"h-4 w-4 flex-shrink-0\",\n                          currentCase?.id === caseItem.id ? \"opacity-100\" : \"opacity-0\"\n                        )}\n                      />\n                      <div className=\"min-w-0 flex-1\">\n                        <div className=\"font-medium text-sm truncate\">\n                          {caseItem.title}\n                        </div>\n                        {caseItem.caseNumber && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            {caseItem.caseNumber}\n                          </div>\n                        )}\n                        <div className=\"flex gap-1 mt-1\">\n                          <Badge \n                            className={cn(\"text-xs\", getPriorityColor(caseItem.priority))}\n                          >\n                            {caseItem.priority}\n                          </Badge>\n                          <Badge \n                            className={cn(\"text-xs\", getStatusColor(caseItem.status))}\n                          >\n                            {caseItem.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n            {cases.filter(c => c.status !== \"active\").length > 0 && (\n              <CommandGroup heading=\"Other Cases\">\n                {cases.filter(c => c.status !== \"active\").map((caseItem) => (\n                  <CommandItem\n                    key={caseItem.id}\n                    value={`${caseItem.title} ${caseItem.caseNumber || \"\"}`}\n                    onSelect={() => handleCaseSelect(caseItem)}\n                    className=\"cursor-pointer p-3\"\n                  >\n                    <div className=\"flex items-center justify-between w-full\">\n                      <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n                        <Check\n                          className={cn(\n                            \"h-4 w-4 flex-shrink-0\",\n                            currentCase?.id === caseItem.id ? \"opacity-100\" : \"opacity-0\"\n                          )}\n                        />\n                        <div className=\"min-w-0 flex-1\">\n                          <div className=\"font-medium text-sm truncate\">\n                            {caseItem.title}\n                          </div>\n                          {caseItem.caseNumber && (\n                            <div className=\"text-xs text-muted-foreground\">\n                              {caseItem.caseNumber}\n                            </div>\n                          )}\n                          <div className=\"flex gap-1 mt-1\">\n                            <Badge \n                              className={cn(\"text-xs\", getPriorityColor(caseItem.priority))}\n                            >\n                              {caseItem.priority}\n                            </Badge>\n                            <Badge \n                              className={cn(\"text-xs\", getStatusColor(caseItem.status))}\n                            >\n                              {caseItem.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            )}\n            {onCreateNew && (\n              <>\n                <CommandGroup>\n                  <CommandItem\n                    onSelect={() => {\n                      setOpen(false);\n                      onCreateNew();\n                    }}\n                    className=\"cursor-pointer\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Create new case\n                  </CommandItem>\n                </CommandGroup>\n              </>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":8146},"client/src/components/subscription-gate.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Crown, Clock, Zap, AlertTriangle } from \"lucide-react\";\nimport { useSubscription } from \"@/hooks/use-subscription\";\n\ninterface SubscriptionGateProps {\n  children: ReactNode;\n  feature: string;\n  description?: string;\n}\n\nexport function SubscriptionGate({ children, feature, description }: SubscriptionGateProps) {\n  const { hasActiveSubscription, isTrialActive, daysRemainingInTrial, isLoading } = useSubscription();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-64 items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Checking subscription...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (hasActiveSubscription) {\n    return <>{children}</>;\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      <Card className=\"text-center\">\n        <CardHeader>\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center mb-4\">\n            <Crown className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl\">\n            {isTrialActive \n              ? `Upgrade to Continue Using ${feature}`\n              : `Unlock ${feature} with CaseBuddy Pro`\n            }\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {isTrialActive && daysRemainingInTrial > 0 && (\n            <Alert className=\"border-blue-200 bg-blue-50\">\n              <Clock className=\"w-4 h-4\" />\n              <AlertDescription>\n                Your free trial expires in {daysRemainingInTrial} day{daysRemainingInTrial !== 1 ? 's' : ''}. \n                Upgrade now to continue using all pro features.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {!isTrialActive && (\n            <Alert className=\"border-red-200 bg-red-50\">\n              <AlertTriangle className=\"w-4 h-4\" />\n              <AlertDescription>\n                Your trial has expired. Upgrade to CaseBuddy Pro to regain access to premium features.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-3 justify-center\">\n              <Zap className=\"w-5 h-5 text-orange-500\" />\n              <span className=\"font-medium\">{feature}</span>\n            </div>\n            \n            {description && (\n              <p className=\"text-muted-foreground max-w-md mx-auto\">\n                {description}\n              </p>\n            )}\n\n            <div className=\"bg-gradient-to-r from-orange-50 to-red-50 border border-orange-200 rounded-lg p-4\">\n              <p className=\"text-lg font-semibold\">\n                CaseBuddy Pro - $14.95/month\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                14-day free trial â¢ Cancel anytime\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Link href=\"/subscription\">\n                <Button size=\"lg\" className=\"w-full max-w-sm mx-auto\" data-testid=\"button-upgrade-subscription\">\n                  <Crown className=\"w-4 h-4 mr-2\" />\n                  {isTrialActive ? \"Upgrade Now\" : \"Start Free Trial\"}\n                </Button>\n              </Link>\n              \n              <p className=\"text-xs text-muted-foreground\">\n                Get instant access to all premium legal analytics and AI features\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3963},"client/src/hooks/use-subscription.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SubscriptionStatus {\n  status: string;\n  trialEndsAt?: string;\n  subscriptionEndsAt?: string;\n  isTrialActive: boolean;\n  isSubscriptionActive: boolean;\n}\n\nexport function useSubscription() {\n  const { data: subscriptionStatus, isLoading, error } = useQuery<SubscriptionStatus>({\n    queryKey: [\"/api/subscription/status\"],\n    retry: false,\n  });\n\n  return {\n    subscriptionStatus,\n    isLoading,\n    error,\n    hasActiveSubscription: subscriptionStatus?.isSubscriptionActive || false,\n    isTrialActive: subscriptionStatus?.isTrialActive || false,\n    trialEndsAt: subscriptionStatus?.trialEndsAt ? new Date(subscriptionStatus.trialEndsAt) : null,\n    daysRemainingInTrial: subscriptionStatus?.trialEndsAt \n      ? Math.max(0, Math.ceil((new Date(subscriptionStatus.trialEndsAt).getTime() - Date.now()) / (1000 * 60 * 60 * 24)))\n      : 0,\n  };\n}","size_bytes":958},"client/src/lib/auth-context.tsx":{"content":"import { createContext, useContext, useEffect, useState, type ReactNode } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"./queryClient\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (usernameOrEmail: string, password: string) => Promise<{ success: boolean; error?: string }>;\n  register: (userData: RegisterData) => Promise<{ success: boolean; error?: string }>;\n  logout: () => Promise<void>;\n}\n\ninterface RegisterData {\n  username: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const queryClient = useQueryClient();\n\n  // Get current user\n  const { data: authData, isLoading: isLoadingUser, refetch: refetchUser } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    enabled: isInitialized,\n  });\n\n  const user = authData?.user || null;\n  const isAuthenticated = !!user;\n\n  // Initialize auth check\n  useEffect(() => {\n    setIsInitialized(true);\n  }, []);\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async ({ usernameOrEmail, password }: { usernameOrEmail: string; password: string }) => {\n      return apiRequest(\"/api/auth/login\", {\n        method: \"POST\",\n        data: { usernameOrEmail, password },\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  // Register mutation\n  const registerMutation = useMutation({\n    mutationFn: async (userData: RegisterData) => {\n      return apiRequest(\"/api/auth/register\", {\n        method: \"POST\",\n        data: userData,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"/api/auth/logout\", {\n        method: \"POST\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.clear(); // Clear all cached data\n    },\n  });\n\n  const login = async (usernameOrEmail: string, password: string) => {\n    try {\n      await loginMutation.mutateAsync({ usernameOrEmail, password });\n      return { success: true };\n    } catch (error: any) {\n      return { \n        success: false, \n        error: error.message || \"Login failed\" \n      };\n    }\n  };\n\n  const register = async (userData: RegisterData) => {\n    try {\n      await registerMutation.mutateAsync(userData);\n      return { success: true };\n    } catch (error: any) {\n      return { \n        success: false, \n        error: error.message || \"Registration failed\" \n      };\n    }\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading: !isInitialized || isLoadingUser || loginMutation.isPending || registerMutation.isPending,\n        isAuthenticated,\n        login,\n        register,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":3539},"client/src/lib/brief-export.ts":{"content":"// Legal Brief Export Utilities\n\nexport interface ExportOptions {\n  format: 'txt' | 'html' | 'pdf';\n  filename: string;\n  includeHeader: boolean;\n  includeFooter: boolean;\n  pageNumbers: boolean;\n}\n\nexport class BriefExporter {\n  \n  static exportAsText(content: string, filename: string): void {\n    const blob = new Blob([content], { type: 'text/plain' });\n    this.downloadFile(blob, `${filename}.txt`);\n  }\n\n  static exportAsHTML(content: string, filename: string, options: Partial<ExportOptions> = {}): void {\n    const htmlContent = this.generateHTML(content, options);\n    const blob = new Blob([htmlContent], { type: 'text/html' });\n    this.downloadFile(blob, `${filename}.html`);\n  }\n\n  static exportForPrint(content: string): void {\n    const htmlContent = this.generateHTML(content, { \n      includeHeader: true, \n      includeFooter: true, \n      pageNumbers: true \n    });\n    \n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(htmlContent);\n      printWindow.document.close();\n      printWindow.focus();\n      printWindow.print();\n    }\n  }\n\n  private static generateHTML(content: string, options: Partial<ExportOptions> = {}): string {\n    const formattedContent = content\n      .replace(/\\n\\n/g, '</p><p>')\n      .replace(/\\n/g, '<br>')\n      .replace(/^/, '<p>')\n      .replace(/$/, '</p>');\n\n    return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Legal Brief</title>\n    <style>\n        @page {\n            size: 8.5in 11in;\n            margin: 1in;\n            ${options.pageNumbers ? '@bottom-center { content: \"Page \" counter(page); }' : ''}\n        }\n        \n        body {\n            font-family: 'Times New Roman', serif;\n            font-size: 12pt;\n            line-height: 1.5;\n            color: #000;\n            background: #fff;\n            margin: 0;\n            padding: 0;\n        }\n        \n        .brief-container {\n            max-width: 8.5in;\n            margin: 0 auto;\n            padding: 1in;\n            background: white;\n        }\n        \n        .brief-header {\n            text-align: center;\n            margin-bottom: 2em;\n            border-bottom: 2px solid #000;\n            padding-bottom: 1em;\n        }\n        \n        .brief-footer {\n            text-align: center;\n            margin-top: 2em;\n            border-top: 1px solid #000;\n            padding-top: 1em;\n            font-size: 10pt;\n        }\n        \n        .brief-content {\n            text-align: justify;\n            text-indent: 0.5in;\n        }\n        \n        .brief-content p {\n            margin: 1em 0;\n        }\n        \n        .brief-content h1,\n        .brief-content h2,\n        .brief-content h3 {\n            text-align: center;\n            font-weight: bold;\n            margin: 2em 0 1em 0;\n            text-indent: 0;\n        }\n        \n        .signature-block {\n            margin-top: 3em;\n            text-align: right;\n        }\n        \n        @media print {\n            .brief-container {\n                max-width: none;\n                margin: 0;\n                padding: 0;\n            }\n            \n            body {\n                font-size: 12pt;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"brief-container\">\n        ${options.includeHeader ? this.generateHeader() : ''}\n        \n        <div class=\"brief-content\">\n            ${formattedContent}\n        </div>\n        \n        ${options.includeFooter ? this.generateFooter() : ''}\n    </div>\n</body>\n</html>`;\n  }\n\n  private static generateHeader(): string {\n    return `\n        <div class=\"brief-header\">\n            <h1>LEGAL BRIEF</h1>\n            <p>Generated on ${new Date().toLocaleDateString()}</p>\n        </div>\n    `;\n  }\n\n  private static generateFooter(): string {\n    return `\n        <div class=\"brief-footer\">\n            <p>Generated by Case Intelligence Portal</p>\n            <p>${new Date().toLocaleDateString()}</p>\n        </div>\n    `;\n  }\n\n  private static downloadFile(blob: Blob, filename: string): void {\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n\n  static copyToClipboard(content: string): Promise<void> {\n    return navigator.clipboard.writeText(content);\n  }\n\n  static getFormattedFilename(templateName: string, caseNumber?: string): string {\n    const timestamp = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\n    const safeCaseNumber = caseNumber?.replace(/[^a-zA-Z0-9-]/g, '_') || 'Draft';\n    const safeTemplateName = templateName.replace(/[^a-zA-Z0-9-]/g, '_');\n    \n    return `${safeTemplateName}_${safeCaseNumber}_${timestamp}`;\n  }\n\n  static generateWordDocument(content: string, filename: string): void {\n    // Basic Word document generation using HTML format that Word can open\n    const wordContent = `\n<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" \n      xmlns:w=\"urn:schemas-microsoft-com:office:word\" \n      xmlns=\"http://www.w3.org/TR/REC-html40\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>Legal Brief</title>\n    <style>\n        @page {\n            size: 8.5in 11in;\n            margin: 1in;\n        }\n        body {\n            font-family: 'Times New Roman', serif;\n            font-size: 12pt;\n            line-height: 1.5;\n        }\n        .MsoNormal {\n            margin: 0in 0in 0pt;\n            font-size: 12pt;\n            font-family: 'Times New Roman', serif;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"WordSection1\">\n        ${content.replace(/\\n\\n/g, '</p><p class=\"MsoNormal\">').replace(/\\n/g, '<br>').replace(/^/, '<p class=\"MsoNormal\">').replace(/$/, '</p>')}\n    </div>\n</body>\n</html>`;\n\n    const blob = new Blob([wordContent], { \n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' \n    });\n    this.downloadFile(blob, `${filename}.doc`);\n  }\n}\n\n// Export utility functions\nexport const exportBriefAsText = (content: string, filename: string) => \n  BriefExporter.exportAsText(content, filename);\n\nexport const exportBriefAsHTML = (content: string, filename: string, options?: Partial<ExportOptions>) => \n  BriefExporter.exportAsHTML(content, filename, options);\n\nexport const exportBriefForPrint = (content: string) => \n  BriefExporter.exportForPrint(content);\n\nexport const exportBriefAsWord = (content: string, filename: string) => \n  BriefExporter.generateWordDocument(content, filename);\n\nexport const copyBriefToClipboard = (content: string) => \n  BriefExporter.copyToClipboard(content);\n\nexport const getFormattedFilename = (templateName: string, caseNumber?: string) => \n  BriefExporter.getFormattedFilename(templateName, caseNumber);","size_bytes":6888},"client/src/lib/brief-templates.ts":{"content":"// Legal Brief Templates and Generation Logic\n\nimport { Case } from \"@/lib/case-context\";\nimport { CASE_TIMELINE, CASE_DOCUMENTS, LEGAL_ISSUES } from \"@/lib/case-data\";\nimport { formatDate } from \"@/lib/case-data\";\n\nexport interface BriefSection {\n  title: string;\n  content: string;\n  required: boolean;\n  order: number;\n}\n\nexport interface BriefTemplate {\n  id: string;\n  name: string;\n  description: string;\n  sections: BriefSection[];\n  caseTypes: string[];\n}\n\nexport interface BriefGenerationOptions {\n  templateId: string;\n  caseId: string;\n  customSections?: Partial<BriefSection>[];\n  includeTimeline: boolean;\n  includeDocuments: boolean;\n  includeLegalIssues: boolean;\n  attorneyName: string;\n  attorneyBar: string;\n  clientName?: string;\n  courtName?: string;\n}\n\n// Legal Brief Templates\nexport const BRIEF_TEMPLATES: BriefTemplate[] = [\n  {\n    id: \"motion-to-dismiss\",\n    name: \"Motion to Dismiss\",\n    description: \"Standard motion to dismiss for failure to state a claim\",\n    caseTypes: [\"criminal\", \"civil_rights\", \"constitutional\"],\n    sections: [\n      {\n        title: \"Caption\",\n        content: \"\",\n        required: true,\n        order: 1\n      },\n      {\n        title: \"Introduction\",\n        content: \"This matter comes before the Court on Defendant's Motion to Dismiss the charges pursuant to Federal Rule of Criminal Procedure 12(b).\",\n        required: true,\n        order: 2\n      },\n      {\n        title: \"Factual Background\",\n        content: \"\",\n        required: true,\n        order: 3\n      },\n      {\n        title: \"Legal Standard\",\n        content: \"A motion to dismiss challenges the legal sufficiency of the charges. The Court must accept all factual allegations as true and determine whether the government has stated a valid claim for relief.\",\n        required: true,\n        order: 4\n      },\n      {\n        title: \"Argument\",\n        content: \"\",\n        required: true,\n        order: 5\n      },\n      {\n        title: \"Conclusion\",\n        content: \"For the foregoing reasons, Defendant respectfully requests that this Court grant the Motion to Dismiss.\",\n        required: true,\n        order: 6\n      }\n    ]\n  },\n  {\n    id: \"motion-suppress\",\n    name: \"Motion to Suppress Evidence\",\n    description: \"Motion to suppress evidence obtained in violation of constitutional rights\",\n    caseTypes: [\"criminal\"],\n    sections: [\n      {\n        title: \"Caption\",\n        content: \"\",\n        required: true,\n        order: 1\n      },\n      {\n        title: \"Introduction\",\n        content: \"Defendant hereby moves to suppress all evidence obtained in violation of the Fourth Amendment to the United States Constitution.\",\n        required: true,\n        order: 2\n      },\n      {\n        title: \"Factual Background\",\n        content: \"\",\n        required: true,\n        order: 3\n      },\n      {\n        title: \"Legal Standard\",\n        content: \"Evidence obtained in violation of the Fourth Amendment must be suppressed under the exclusionary rule established in Mapp v. Ohio, 367 U.S. 643 (1961).\",\n        required: true,\n        order: 4\n      },\n      {\n        title: \"Argument\",\n        content: \"\",\n        required: true,\n        order: 5\n      },\n      {\n        title: \"Conclusion\",\n        content: \"For the foregoing reasons, Defendant respectfully requests that this Court grant the Motion to Suppress Evidence.\",\n        required: true,\n        order: 6\n      }\n    ]\n  },\n  {\n    id: \"civil-rights-complaint\",\n    name: \"Civil Rights Complaint\",\n    description: \"42 U.S.C. Â§ 1983 civil rights violation complaint\",\n    caseTypes: [\"civil_rights\", \"constitutional\"],\n    sections: [\n      {\n        title: \"Caption\",\n        content: \"\",\n        required: true,\n        order: 1\n      },\n      {\n        title: \"Jurisdiction and Venue\",\n        content: \"This Court has jurisdiction over this action pursuant to 28 U.S.C. Â§Â§ 1331 and 1343, as this case arises under the Constitution and laws of the United States, specifically 42 U.S.C. Â§ 1983.\",\n        required: true,\n        order: 2\n      },\n      {\n        title: \"Parties\",\n        content: \"\",\n        required: true,\n        order: 3\n      },\n      {\n        title: \"Factual Allegations\",\n        content: \"\",\n        required: true,\n        order: 4\n      },\n      {\n        title: \"Count I: Violation of Constitutional Rights Under 42 U.S.C. Â§ 1983\",\n        content: \"\",\n        required: true,\n        order: 5\n      },\n      {\n        title: \"Prayer for Relief\",\n        content: \"WHEREFORE, Plaintiff respectfully requests that this Court enter judgment in favor of Plaintiff and award compensatory damages, punitive damages, attorney's fees, and such other relief as the Court deems just and proper.\",\n        required: true,\n        order: 6\n      }\n    ]\n  },\n  {\n    id: \"response-brief\",\n    name: \"Response Brief\",\n    description: \"Response to opposing party's motion or brief\",\n    caseTypes: [\"criminal\", \"civil_rights\", \"constitutional\", \"administrative\"],\n    sections: [\n      {\n        title: \"Caption\",\n        content: \"\",\n        required: true,\n        order: 1\n      },\n      {\n        title: \"Introduction\",\n        content: \"\",\n        required: true,\n        order: 2\n      },\n      {\n        title: \"Statement of Facts\",\n        content: \"\",\n        required: true,\n        order: 3\n      },\n      {\n        title: \"Legal Standard\",\n        content: \"\",\n        required: true,\n        order: 4\n      },\n      {\n        title: \"Argument\",\n        content: \"\",\n        required: true,\n        order: 5\n      },\n      {\n        title: \"Conclusion\",\n        content: \"\",\n        required: true,\n        order: 6\n      }\n    ]\n  },\n  {\n    id: \"appeal-brief\",\n    name: \"Appellate Brief\",\n    description: \"Brief for appellate court proceedings\",\n    caseTypes: [\"criminal\", \"civil_rights\", \"constitutional\", \"administrative\"],\n    sections: [\n      {\n        title: \"Caption\",\n        content: \"\",\n        required: true,\n        order: 1\n      },\n      {\n        title: \"Table of Contents\",\n        content: \"\",\n        required: true,\n        order: 2\n      },\n      {\n        title: \"Table of Authorities\",\n        content: \"\",\n        required: true,\n        order: 3\n      },\n      {\n        title: \"Statement of the Issues\",\n        content: \"\",\n        required: true,\n        order: 4\n      },\n      {\n        title: \"Statement of the Case\",\n        content: \"\",\n        required: true,\n        order: 5\n      },\n      {\n        title: \"Statement of Facts\",\n        content: \"\",\n        required: true,\n        order: 6\n      },\n      {\n        title: \"Summary of Argument\",\n        content: \"\",\n        required: true,\n        order: 7\n      },\n      {\n        title: \"Argument\",\n        content: \"\",\n        required: true,\n        order: 8\n      },\n      {\n        title: \"Conclusion\",\n        content: \"\",\n        required: true,\n        order: 9\n      }\n    ]\n  }\n];\n\n// Brief Generation Functions\nexport class BriefGenerator {\n  \n  static generateCaption(caseData: Case, attorneyName: string, courtName?: string): string {\n    const court = courtName || caseData.court || \"UNITED STATES DISTRICT COURT\";\n    const caseTitle = caseData.title;\n    const caseNumber = caseData.caseNumber ? `Case No. ${caseData.caseNumber}` : \"\";\n    \n    return `\n${court.toUpperCase()}\n\n${caseTitle}                                    ${caseNumber}\n\n${this.getPartyDesignation(caseData)}\n\n                                               ${attorneyName}\n                                               Attorney for ${this.getClientDesignation(caseData)}\n`.trim();\n  }\n\n  static getPartyDesignation(caseData: Case): string {\n    if (caseData.caseType === \"criminal\") {\n      return `${caseData.opposingParty || \"Defendant\"},`;\n    }\n    return \"Plaintiff,\\n\\nv.\\n\\n\" + (caseData.opposingParty || \"Defendant\") + \",\\n\\nDefendant.\";\n  }\n\n  static getClientDesignation(caseData: Case): string {\n    if (caseData.caseType === \"criminal\") {\n      return \"Defendant\";\n    }\n    return \"Plaintiff\";\n  }\n\n  static generateFactualBackground(caseData: Case, includeTimeline: boolean = true): string {\n    let content = `This case involves ${caseData.description || \"the matters set forth in the complaint.\"}\\n\\n`;\n    \n    if (includeTimeline && CASE_TIMELINE.length > 0) {\n      content += \"CHRONOLOGY OF EVENTS\\n\\n\";\n      \n      const relevantEvents = CASE_TIMELINE\n        .filter(event => event.date >= \"2025-06-01\") // Filter to recent events\n        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n      \n      relevantEvents.forEach((event, index) => {\n        content += `${index + 1}. ${formatDate(event.date)}: ${event.title}\\n`;\n        if (event.summary) {\n          content += `   ${event.summary}\\n`;\n        }\n        content += \"\\n\";\n      });\n    }\n    \n    return content.trim();\n  }\n\n  static generateDocumentReferences(includeDocuments: boolean = true): string {\n    if (!includeDocuments || CASE_DOCUMENTS.length === 0) {\n      return \"\";\n    }\n    \n    let content = \"SUPPORTING DOCUMENTATION\\n\\n\";\n    content += \"The following documents support the factual allegations in this brief:\\n\\n\";\n    \n    CASE_DOCUMENTS.forEach((doc, index) => {\n      content += `${index + 1}. ${doc.title}`;\n      if (doc.date) {\n        content += ` (${formatDate(doc.date)})`;\n      }\n      if (doc.summary) {\n        content += ` - ${doc.summary}`;\n      }\n      content += \"\\n\";\n    });\n    \n    return content;\n  }\n\n  static generateLegalIssuesAnalysis(includeLegalIssues: boolean = true): string {\n    if (!includeLegalIssues || LEGAL_ISSUES.length === 0) {\n      return \"\";\n    }\n    \n    let content = \"LEGAL ISSUES IDENTIFIED\\n\\n\";\n    \n    const priorityOrder = { \"critical\": 1, \"high\": 2, \"medium\": 3, \"low\": 4 };\n    const sortedIssues = LEGAL_ISSUES.sort((a, b) => \n      priorityOrder[a.priority] - priorityOrder[b.priority]\n    );\n    \n    sortedIssues.forEach((issue, index) => {\n      content += `${index + 1}. ${issue.title} (${issue.priority.toUpperCase()} PRIORITY)\\n`;\n      content += `   Category: ${issue.category.replace(\"-\", \" \").toUpperCase()}\\n`;\n      content += `   ${issue.description}\\n\\n`;\n    });\n    \n    return content.trim();\n  }\n\n  static generateBrief(options: BriefGenerationOptions, caseData: Case): string {\n    const template = BRIEF_TEMPLATES.find(t => t.id === options.templateId);\n    if (!template) {\n      throw new Error(\"Template not found\");\n    }\n\n    let briefContent = \"\";\n    const sections = [...template.sections].sort((a, b) => a.order - b.order);\n\n    sections.forEach(section => {\n      briefContent += `${section.title.toUpperCase()}\\n\\n`;\n      \n      // Generate section content based on type\n      switch (section.title) {\n        case \"Caption\":\n          briefContent += this.generateCaption(caseData, options.attorneyName, options.courtName);\n          break;\n          \n        case \"Factual Background\":\n        case \"Statement of Facts\":\n        case \"Factual Allegations\":\n          briefContent += this.generateFactualBackground(caseData, options.includeTimeline);\n          break;\n          \n        case \"Parties\":\n          briefContent += this.generatePartiesSection(caseData);\n          break;\n          \n        default:\n          // Use template content or custom content\n          const customSection = options.customSections?.find(cs => cs.title === section.title);\n          briefContent += customSection?.content || section.content;\n      }\n      \n      briefContent += \"\\n\\n\";\n      \n      // Add supporting sections if requested\n      if (section.title === \"Factual Background\" || section.title === \"Statement of Facts\") {\n        if (options.includeDocuments) {\n          briefContent += this.generateDocumentReferences(true) + \"\\n\\n\";\n        }\n        if (options.includeLegalIssues) {\n          briefContent += this.generateLegalIssuesAnalysis(true) + \"\\n\\n\";\n        }\n      }\n    });\n\n    // Add signature block\n    briefContent += this.generateSignatureBlock(options.attorneyName, options.attorneyBar);\n    \n    return briefContent.trim();\n  }\n\n  static generatePartiesSection(caseData: Case): string {\n    let content = \"\";\n    \n    if (caseData.caseType === \"criminal\") {\n      content += `Defendant ${caseData.opposingParty || \"MATTHEW REARDON\"} is the individual charged in this matter.\\n\\n`;\n      content += `The United States of America, acting through the U.S. Attorney's Office, is the prosecuting party.\\n\\n`;\n    } else {\n      content += `Plaintiff is an individual whose constitutional rights were violated as described herein.\\n\\n`;\n      content += `Defendant ${caseData.opposingParty || \"UNKNOWN DEFENDANTS\"} `;\n      content += caseData.caseType === \"civil_rights\" \n        ? \"acted under color of state law to deprive Plaintiff of rights secured by the Constitution and laws of the United States.\\n\\n\"\n        : \"is responsible for the actions described in this complaint.\\n\\n\";\n    }\n    \n    return content;\n  }\n\n  static generateSignatureBlock(attorneyName: string, attorneyBar: string): string {\n    return `\nRespectfully submitted,\n\n/s/ ${attorneyName}\n${attorneyName}\n${attorneyBar ? `Bar No. ${attorneyBar}` : \"\"}\nAttorney for ${BRIEF_TEMPLATES[0] ? \"Defendant\" : \"Plaintiff\"}\n\nDate: ${new Date().toLocaleDateString()}\n`.trim();\n  }\n\n  static getTemplatesForCaseType(caseType: string): BriefTemplate[] {\n    return BRIEF_TEMPLATES.filter(template => \n      template.caseTypes.includes(caseType) || template.caseTypes.includes(\"all\")\n    );\n  }\n}\n\n// Export utility functions\nexport const generateBriefPreview = (options: BriefGenerationOptions, caseData: Case): string => {\n  try {\n    return BriefGenerator.generateBrief(options, caseData);\n  } catch (error) {\n    return `Error generating brief: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n  }\n};\n\nexport const getAllTemplates = (): BriefTemplate[] => BRIEF_TEMPLATES;\n\nexport const getTemplateById = (id: string): BriefTemplate | undefined => \n  BRIEF_TEMPLATES.find(template => template.id === id);","size_bytes":14053},"client/src/lib/case-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\nexport interface Case {\n  id: string;\n  title: string;\n  caseNumber?: string;\n  description?: string;\n  caseType: string;\n  status: string;\n  priority: string;\n  court?: string;\n  jurisdiction?: string;\n  opposingParty?: string;\n  leadAttorney?: string;\n  dateOpened: string;\n  dateClosed?: string;\n  tags: string[];\n  notes?: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt?: string;\n  createdBy?: string;\n}\n\ninterface CaseContextType {\n  currentCase: Case | null;\n  setCurrentCase: (caseItem: Case | null) => void;\n  cases: Case[];\n  setCases: (cases: Case[]) => void;\n  isLoading: boolean;\n}\n\nconst CaseContext = createContext<CaseContextType | undefined>(undefined);\n\ninterface CaseProviderProps {\n  children: ReactNode;\n}\n\n// Sample cases that match your real case data\nconst SAMPLE_CASES: Case[] = [\n  {\n    id: \"1\",\n    title: \"United States v. Matthew Reardon\",\n    caseNumber: \"6:25-MJ-00153-01\",\n    description: \"Federal criminal case charging defendant with loitering, exhibiting disorderly conduct, or exhibiting other conduct on federal property. Allegations include creating loud or unusual noise, creating a nuisance, and/or unreasonably obstructing the usual use of entrances, foyers, lobbies, or corridors on federal property.\",\n    caseType: \"criminal\",\n    status: \"active\",\n    priority: \"high\",\n    court: \"United States District Court, Western District of Louisiana, Lafayette Division\",\n    jurisdiction: \"Federal\",\n    opposingParty: \"Matthew Reardon\",\n    leadAttorney: \"Ladonte A. Murphy (AUSA)\",\n    dateOpened: \"2025-08-25\",\n    tags: [\"criminal\", \"federal-property\", \"disorderly-conduct\", \"magistrate\", \"41-cfr\"],\n    notes: \"Case before Magistrate Whitehurst. Charges under 41 C.F.R. Â§ 102-74.390 with penalty provision 41 C.F.R. Â§ 102-74.450. Acting U.S. Attorney: Alexander C. Van Hook. Assistant U.S. Attorney: Ladonte A. Murphy (La. Bar No. 32772).\",\n    isActive: true,\n    createdAt: \"2025-08-25\",\n  },\n  {\n    id: \"2\",\n    title: \"Federal Civil Rights Violation Case\",\n    caseNumber: \"2025-CV-8901\",\n    description: \"Constitutional violations by US Marshals, unlawful arrest, and First Amendment rights infringement at Lafayette federal courthouse.\",\n    caseType: \"civil_rights\",\n    status: \"active\",\n    priority: \"urgent\",\n    court: \"US District Court - Western District of Louisiana\",\n    jurisdiction: \"Federal\",\n    opposingParty: \"United States Marshals Service\",\n    leadAttorney: \"Constitutional Rights Attorney\",\n    dateOpened: \"2025-08-25\",\n    tags: [\"constitutional\", \"federal\", \"civil-rights\", \"first-amendment\"],\n    notes: \"High-profile case involving federal agent misconduct and constitutional violations.\",\n    isActive: true,\n    createdAt: \"2025-08-25\",\n  },\n  {\n    id: \"3\",\n    title: \"FOIA Appeal Case\",\n    caseNumber: \"2025-FOIA-001\",\n    description: \"Appeal of denied FOIA requests for surveillance records and inter-agency communications.\",\n    caseType: \"administrative\",\n    status: \"active\",\n    priority: \"high\",\n    court: \"Administrative Court\",\n    jurisdiction: \"Federal\",\n    opposingParty: \"US Marshals Service\",\n    leadAttorney: \"FOIA Specialist\",\n    dateOpened: \"2025-06-27\",\n    tags: [\"foia\", \"transparency\", \"government-records\"],\n    notes: \"Multiple agencies involved, seeking disclosure of surveillance operations.\",\n    isActive: true,\n    createdAt: \"2025-06-27\",\n  },\n];\n\nexport function CaseProvider({ children }: CaseProviderProps) {\n  const [currentCase, setCurrentCase] = useState<Case | null>(null);\n  const [cases, setCases] = useState<Case[]>(SAMPLE_CASES);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Set the first case as default if none selected\n  useEffect(() => {\n    if (!currentCase && cases.length > 0) {\n      setCurrentCase(cases[0]); // This will now default to the Reardon case\n    }\n  }, [cases, currentCase]);\n\n  // Save current case to localStorage\n  useEffect(() => {\n    if (currentCase) {\n      localStorage.setItem('currentCaseId', currentCase.id);\n    }\n  }, [currentCase]);\n\n  // Load current case from localStorage on mount\n  useEffect(() => {\n    const savedCaseId = localStorage.getItem('currentCaseId');\n    if (savedCaseId && cases.length > 0) {\n      const savedCase = cases.find(c => c.id === savedCaseId);\n      if (savedCase) {\n        setCurrentCase(savedCase);\n      }\n    }\n  }, [cases]);\n\n  const value = {\n    currentCase,\n    setCurrentCase,\n    cases,\n    setCases,\n    isLoading,\n  };\n\n  return <CaseContext.Provider value={value}>{children}</CaseContext.Provider>;\n}\n\nexport function useCase() {\n  const context = useContext(CaseContext);\n  if (context === undefined) {\n    throw new Error('useCase must be used within a CaseProvider');\n  }\n  return context;\n}\n\nexport function useCases() {\n  const { cases, setCases } = useCase();\n  return { cases, setCases };\n}\n\nexport function useCurrentCase() {\n  const { currentCase, setCurrentCase } = useCase();\n  return { currentCase, setCurrentCase };\n}","size_bytes":5052},"client/src/lib/legal-analytics.ts":{"content":"// Legal Analytics and AI Intelligence System\n\nimport { Case } from \"@/lib/case-context\";\nimport { CASE_TIMELINE, CASE_DOCUMENTS, LEGAL_ISSUES } from \"@/lib/case-data\";\n\nexport interface CaseOutcomePrediction {\n  successLikelihood: number; // 0-100 percentage\n  confidence: number; // 0-100 confidence in prediction\n  keyFactors: string[];\n  similarCases: SimilarCase[];\n  riskFactors: string[];\n  strengths: string[];\n  recommendations: string[];\n}\n\nexport interface SimilarCase {\n  id: string;\n  title: string;\n  jurisdiction: string;\n  outcome: 'won' | 'lost' | 'settled';\n  similarity: number; // 0-100 similarity score\n  keyFactors: string[];\n  year: number;\n}\n\nexport interface JudgeAnalytics {\n  judgeName: string;\n  court: string;\n  totalCases: number;\n  rulingTendencies: {\n    plaintiffFavorable: number; // percentage\n    defendantFavorable: number; // percentage\n    settlements: number; // percentage\n  };\n  averageCaseDuration: number; // days\n  caseTypes: {\n    type: string;\n    count: number;\n    successRate: number;\n  }[];\n  recentTrends: string[];\n  recommendations: string[];\n}\n\nexport interface LegalPrecedent {\n  id: string;\n  caseName: string;\n  citation: string;\n  year: number;\n  court: string;\n  relevanceScore: number; // 0-100\n  keyHolding: string;\n  factualSimilarity: number; // 0-100\n  legalPrinciples: string[];\n  applicationSuggestions: string[];\n}\n\nexport interface StrategyRecommendation {\n  priority: 'high' | 'medium' | 'low';\n  category: 'motion' | 'discovery' | 'settlement' | 'trial' | 'appeal';\n  title: string;\n  description: string;\n  reasoning: string;\n  expectedOutcome: string;\n  timeframe: string;\n  risks: string[];\n  benefits: string[];\n  nextSteps: string[];\n}\n\nexport class LegalAnalyticsEngine {\n  \n  static async predictCaseOutcome(caseData: Case): Promise<CaseOutcomePrediction> {\n    try {\n      const response = await fetch('/api/legal-analytics/predict-outcome', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          case: caseData,\n          timeline: CASE_TIMELINE,\n          documents: CASE_DOCUMENTS,\n          legalIssues: LEGAL_ISSUES,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to predict case outcome');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error predicting case outcome:', error);\n      throw error;\n    }\n  }\n\n  static async analyzeJudge(judgeName: string, court: string): Promise<JudgeAnalytics> {\n    try {\n      const response = await fetch('/api/legal-analytics/judge-analytics', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          judgeName,\n          court,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to analyze judge');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error analyzing judge:', error);\n      throw error;\n    }\n  }\n\n  static async findRelevantPrecedents(caseData: Case): Promise<LegalPrecedent[]> {\n    try {\n      const response = await fetch('/api/legal-analytics/find-precedents', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          case: caseData,\n          legalIssues: LEGAL_ISSUES,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to find precedents');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error finding precedents:', error);\n      throw error;\n    }\n  }\n\n  static async generateStrategyRecommendations(caseData: Case): Promise<StrategyRecommendation[]> {\n    try {\n      const response = await fetch('/api/legal-analytics/strategy-recommendations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          case: caseData,\n          timeline: CASE_TIMELINE,\n          documents: CASE_DOCUMENTS,\n          legalIssues: LEGAL_ISSUES,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to generate strategy recommendations');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error generating strategy recommendations:', error);\n      throw error;\n    }\n  }\n\n  static async analyzeEvidence(evidenceItems: any[]): Promise<{\n    strengthScore: number;\n    weaknesses: string[];\n    recommendations: string[];\n  }> {\n    try {\n      const response = await fetch('/api/legal-analytics/analyze-evidence', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          evidence: evidenceItems,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to analyze evidence');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error analyzing evidence:', error);\n      throw error;\n    }\n  }\n\n  static async compareWithSimilarCases(caseData: Case): Promise<SimilarCase[]> {\n    try {\n      const response = await fetch('/api/legal-analytics/similar-cases', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          case: caseData,\n          legalIssues: LEGAL_ISSUES,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to find similar cases');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error finding similar cases:', error);\n      throw error;\n    }\n  }\n}\n\n// Utility functions for legal analytics\nexport const calculateConfidenceLevel = (factors: string[]): number => {\n  // Simple confidence calculation based on available data\n  const baseConfidence = 60;\n  const factorBonus = Math.min(factors.length * 5, 30);\n  return Math.min(baseConfidence + factorBonus, 95);\n};\n\nexport const categorizeRisk = (riskScore: number): 'low' | 'medium' | 'high' => {\n  if (riskScore < 30) return 'low';\n  if (riskScore < 70) return 'medium';\n  return 'high';\n};\n\nexport const formatSuccessRate = (rate: number): string => {\n  return `${rate.toFixed(1)}%`;\n};\n\nexport const prioritizeRecommendations = (recommendations: StrategyRecommendation[]): StrategyRecommendation[] => {\n  const priorityOrder = { 'high': 1, 'medium': 2, 'low': 3 };\n  return recommendations.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);\n};\n\n// Legal analytics data models\nexport interface AnalyticsSession {\n  id: string;\n  caseId: string;\n  timestamp: string;\n  predictions: CaseOutcomePrediction | null;\n  judgeAnalytics: JudgeAnalytics | null;\n  precedents: LegalPrecedent[];\n  strategies: StrategyRecommendation[];\n  status: 'pending' | 'analyzing' | 'completed' | 'error';\n}\n\n// Mock data for development/demo purposes\nexport const MOCK_SIMILAR_CASES: SimilarCase[] = [\n  {\n    id: 'case-001',\n    title: 'United States v. Thompson',\n    jurisdiction: 'Western District of Louisiana',\n    outcome: 'won',\n    similarity: 87,\n    keyFactors: ['Federal property violation', 'Similar CFR regulation', 'Comparable evidence'],\n    year: 2023,\n  },\n  {\n    id: 'case-002',\n    title: 'United States v. Martinez',\n    jurisdiction: 'Eastern District of Louisiana',\n    outcome: 'settled',\n    similarity: 73,\n    keyFactors: ['Property damage', 'Government facility', 'Plea negotiation'],\n    year: 2022,\n  },\n  {\n    id: 'case-003',\n    title: 'United States v. Davis',\n    jurisdiction: 'Middle District of Louisiana',\n    outcome: 'lost',\n    similarity: 69,\n    keyFactors: ['CFR violation', 'Insufficient evidence', 'Procedural issues'],\n    year: 2021,\n  },\n];\n\nexport const MOCK_PRECEDENTS: LegalPrecedent[] = [\n  {\n    id: 'prec-001',\n    caseName: 'United States v. Johnson',\n    citation: '542 F.3d 991 (5th Cir. 2008)',\n    year: 2008,\n    court: 'Fifth Circuit Court of Appeals',\n    relevanceScore: 92,\n    keyHolding: 'Federal property regulations under 41 C.F.R. Â§ 102-74.390 require specific intent for criminal liability',\n    factualSimilarity: 88,\n    legalPrinciples: ['Specific intent requirement', 'Federal property protection', 'Regulatory interpretation'],\n    applicationSuggestions: [\n      'Challenge intent element in prosecution',\n      'Motion to dismiss for failure to prove specific intent',\n      'Request jury instruction on intent requirement'\n    ],\n  },\n  {\n    id: 'prec-002',\n    caseName: 'United States v. Williams',\n    citation: '789 F.3d 456 (5th Cir. 2015)',\n    year: 2015,\n    court: 'Fifth Circuit Court of Appeals',\n    relevanceScore: 85,\n    keyHolding: 'Government must prove defendant knew property was federal and that actions were unauthorized',\n    factualSimilarity: 81,\n    legalPrinciples: ['Knowledge requirement', 'Federal jurisdiction', 'Burden of proof'],\n    applicationSuggestions: [\n      'Challenge knowledge element',\n      'Request limiting instruction on federal property identification',\n      'Cross-examine on signage and notice'\n    ],\n  },\n];","size_bytes":9163},"client/src/pages/brief-generator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { FileText, Download, Eye, Settings, Wand2, Copy, RefreshCw, Printer, FileDown } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { cn } from \"@/lib/utils\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useCurrentCase } from \"@/lib/case-context\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { GeneratedBrief, BriefTemplate } from \"@shared/types\";\nimport {\n  exportBriefAsText,\n  exportBriefAsHTML,\n  exportBriefForPrint,\n  exportBriefAsWord,\n  copyBriefToClipboard,\n  getFormattedFilename\n} from \"@/utils/briefExport\";\n\n// Form schema for brief generation\nconst briefFormSchema = z.object({\n  templateId: z.string().min(1, \"Please select a template\"),\n  attorneyName: z.string().min(1, \"Attorney name is required\"),\n  attorneyBar: z.string().optional(),\n  clientName: z.string().optional(),\n  courtName: z.string().optional(),\n  includeTimeline: z.boolean().default(true),\n  includeDocuments: z.boolean().default(true),\n  includeLegalIssues: z.boolean().default(true),\n  customIntroduction: z.string().optional(),\n  customArgument: z.string().optional(),\n  customConclusion: z.string().optional(),\n});\n\ntype BriefFormData = z.infer<typeof briefFormSchema>;\n\ninterface BriefGenerationRequest {\n  caseTitle: string;\n  caseNumber?: string;\n  jurisdiction: string;\n  clientName: string;\n  attorneyName: string;\n  attorneyBar?: string;\n  courtName: string;\n  briefType: 'motion' | 'complaint' | 'response' | 'appeal' | 'summary_judgment' | 'injunction';\n  legalIssues: string[];\n  factualBackground: string;\n  timeline?: Array<{\n    date: string;\n    event: string;\n    significance: string;\n  }>;\n  documents?: Array<{\n    title: string;\n    type: string;\n    summary: string;\n  }>;\n  evidence?: Array<{\n    title: string;\n    type: string;\n    summary: string;\n  }>;\n  customSections?: Array<{\n    title: string;\n    content: string;\n  }>;\n  includePrecedents?: boolean;\n  includeStatutes?: boolean;\n}\n\nexport default function BriefGeneratorPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedTemplate, setSelectedTemplate] = useState<BriefTemplate | null>(null);\n  const [generatedBrief, setGeneratedBrief] = useState<GeneratedBrief | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"templates\");\n  const isMobile = useIsMobile();\n  const { currentCase } = useCurrentCase();\n\n  const form = useForm<BriefFormData>({\n    resolver: zodResolver(briefFormSchema),\n    defaultValues: {\n      includeTimeline: true,\n      includeDocuments: true,\n      includeLegalIssues: true,\n      attorneyName: \"\",\n      attorneyBar: \"\",\n    },\n  });\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const handleExport = (format: 'txt' | 'html' | 'word' | 'print' = 'txt') => {\n    if (!generatedBrief) return;\n    \n    const filename = getFormattedFilename(\n      selectedTemplate?.name || 'Legal Brief',\n      currentCase?.caseNumber\n    );\n    \n    switch (format) {\n      case 'txt':\n        exportBriefAsText(generatedBrief, filename);\n        break;\n      case 'html':\n        exportBriefAsHTML(generatedBrief, filename, {\n          includeHeader: true,\n          includeFooter: true,\n          pageNumbers: true\n        });\n        break;\n      case 'word':\n        exportBriefAsWord(generatedBrief, filename);\n        break;\n      case 'print':\n        exportBriefForPrint(generatedBrief);\n        break;\n    }\n  };\n\n  const onSubmit = async (data: BriefFormData) => {\n    if (!currentCase) {\n      alert(\"Please select a case first\");\n      return;\n    }\n\n    setIsGenerating(true);\n    try {\n      const briefRequest: BriefGenerationRequest = {\n        caseTitle: currentCase.title,\n        caseNumber: currentCase.caseNumber,\n        jurisdiction: currentCase.jurisdiction,\n        clientName: data.clientName || currentCase.clientName,\n        attorneyName: data.attorneyName,\n        attorneyBar: data.attorneyBar,\n        courtName: data.courtName || currentCase.courtName || \"\",\n        briefType: (selectedTemplate?.type as any) || 'motion',\n        legalIssues: currentCase.summary ? [currentCase.summary] : [\"Civil rights violation\"],\n        factualBackground: currentCase.description,\n        customSections: [\n          ...(data.customIntroduction ? [{ title: \"Introduction\", content: data.customIntroduction }] : []),\n          ...(data.customArgument ? [{ title: \"Argument\", content: data.customArgument }] : []),\n          ...(data.customConclusion ? [{ title: \"Conclusion\", content: data.customConclusion }] : []),\n        ],\n        includePrecedents: true,\n        includeStatutes: true,\n      };\n\n      console.log('Generating brief with AI...', briefRequest);\n      const response = await apiRequest('/api/brief-generation/generate', {\n        method: 'POST',\n        body: JSON.stringify(briefRequest),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.success) {\n        // Fix date parsing\n        const brief = {\n          ...response.brief,\n          generatedAt: new Date(response.brief.generatedAt)\n        };\n        setGeneratedBrief(brief);\n        setActiveTab(\"preview\");\n      } else {\n        throw new Error(response.error || 'Failed to generate brief');\n      }\n    } catch (error: any) {\n      console.error(\"Error generating brief:\", error);\n      alert(`Error generating brief: ${error.message || 'Please try again.'}`);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const copyToClipboard = async () => {\n    if (generatedBrief) {\n      try {\n        await copyBriefToClipboard(generatedBrief);\n        // You could add a toast notification here\n      } catch (error) {\n        console.error('Failed to copy to clipboard:', error);\n      }\n    }\n  };\n\n  const regenerateBrief = () => {\n    form.handleSubmit(onSubmit)();\n  };\n\n  // Filter templates based on search query\n  const availableTemplates = templates.filter(template => {\n    const matchesSearch = !searchQuery || \n      template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      template.description.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesSearch;\n  });\n\n  const templateStats = {\n    total: templates.length,\n    available: availableTemplates.length,\n    motions: templates.filter(t => t.name.toLowerCase().includes('motion')).length,\n    complaints: templates.filter(t => t.name.toLowerCase().includes('complaint')).length,\n  };\n\n  // Load templates on component mount\n  useEffect(() => {\n    const loadTemplates = async () => {\n      try {\n        const response = await apiRequest('/api/brief-generation/templates');\n        if (response.success) {\n          setTemplates(response.templates);\n          \n          // Set default template if none selected\n          if (response.templates.length > 0 && !selectedTemplate) {\n            setSelectedTemplate(response.templates[0]);\n            form.setValue(\"templateId\", response.templates[0].id);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error loading brief templates:\", error);\n      }\n    };\n    \n    loadTemplates();\n  }, []);\n\n  return (\n    <div className={cn(\"h-screen overflow-y-auto\", isMobile ? \"pt-16\" : \"\")}>\n      <div className=\"container mx-auto p-4 md:p-6 space-y-4 md:space-y-6\">\n        <Header\n          title=\"CaseBuddy Brief Generator\"\n          onSearch={handleSearch}\n          onExport={handleExport}\n          searchPlaceholder=\"Search brief templates...\"\n        />\n\n        {!currentCase && (\n          <Card className=\"border-yellow-200 bg-yellow-50 dark:border-yellow-800 dark:bg-yellow-950\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-3\">\n                <FileText className=\"w-5 h-5 text-yellow-600\" />\n                <div>\n                  <p className=\"font-medium text-yellow-800 dark:text-yellow-200\">No Case Selected</p>\n                  <p className=\"text-sm text-yellow-700 dark:text-yellow-300\">\n                    Please select a case to generate legal briefs with case-specific data.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6\">\n          <Card className=\"rounded-xl stats-card\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <FileText className=\"w-5 h-5 md:w-6 md:h-6 text-primary\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-primary\">{templateStats.available}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Available Templates</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl stats-card\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Wand2 className=\"w-5 h-5 md:w-6 md:h-6 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-blue-600 dark:text-blue-400\">{templateStats.motions}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Motions</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl stats-card\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <FileText className=\"w-5 h-5 md:w-6 md:h-6 text-green-600 dark:text-green-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-green-600 dark:text-green-400\">{templateStats.complaints}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Complaints</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl stats-card\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Settings className=\"w-5 h-5 md:w-6 md:h-6 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-purple-600 dark:text-purple-400\">Auto</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Generation</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"templates\" data-testid=\"templates-tab\">Templates</TabsTrigger>\n            <TabsTrigger value=\"generator\" data-testid=\"generator-tab\">Generate</TabsTrigger>\n            <TabsTrigger value=\"preview\" data-testid=\"preview-tab\">Preview</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"templates\" className=\"space-y-4\">\n            <Card className=\"rounded-xl brief-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileText className=\"w-5 h-5\" />\n                  Brief Templates\n                  <Badge variant=\"secondary\">{availableTemplates.length} available</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-4\">\n                  {availableTemplates.map((template) => (\n                    <Card \n                      key={template.id} \n                      className={cn(\n                        \"cursor-pointer brief-card\",\n                        selectedTemplate?.id === template.id && \"ring-2 ring-primary\"\n                      )}\n                      onClick={() => {\n                        setSelectedTemplate(template);\n                        form.setValue(\"templateId\", template.id);\n                      }}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold mb-1\">{template.name}</h3>\n                            <p className=\"text-sm text-muted-foreground mb-2\">{template.description}</p>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {template.caseTypes.map((type) => (\n                                <Badge key={type} variant=\"outline\" className=\"text-xs\">\n                                  {type.replace(\"_\", \" \")}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-sm text-muted-foreground\">\n                              {template.sections.length} sections\n                            </div>\n                            {selectedTemplate?.id === template.id && (\n                              <Badge className=\"mt-1\">Selected</Badge>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"generator\" className=\"space-y-4\">\n            <Card className=\"rounded-xl brief-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Wand2 className=\"w-5 h-5\" />\n                  Generate Brief\n                  {selectedTemplate && <Badge variant=\"secondary\">{selectedTemplate.name}</Badge>}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    {/* Template Selection */}\n                    <FormField\n                      control={form.control}\n                      name=\"templateId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Brief Template</FormLabel>\n                          <Select onValueChange={(value) => {\n                            field.onChange(value);\n                            const template = getTemplateById(value);\n                            setSelectedTemplate(template || null);\n                          }} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a brief template\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {availableTemplates.map((template) => (\n                                <SelectItem key={template.id} value={template.id}>\n                                  {template.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Attorney Information */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"attorneyName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Attorney Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Attorney Name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"attorneyBar\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Bar Number (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Bar Number\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Case Information */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"clientName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Client Name (Optional)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Client Name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"courtName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Court Name (Optional)</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder={currentCase?.court || \"Court Name\"} \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Include Options */}\n                    <div className=\"space-y-4\">\n                      <Label className=\"text-base font-medium\">Include in Brief:</Label>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"includeTimeline\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                              <FormControl>\n                                <Checkbox\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                              <div className=\"space-y-1 leading-none\">\n                                <FormLabel>Timeline Events</FormLabel>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Include chronological case events\n                                </p>\n                              </div>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"includeDocuments\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                              <FormControl>\n                                <Checkbox\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                              <div className=\"space-y-1 leading-none\">\n                                <FormLabel>Document References</FormLabel>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Include supporting documents\n                                </p>\n                              </div>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"includeLegalIssues\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                              <FormControl>\n                                <Checkbox\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                              <div className=\"space-y-1 leading-none\">\n                                <FormLabel>Legal Issues</FormLabel>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Include legal analysis\n                                </p>\n                              </div>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    {/* Custom Sections */}\n                    <div className=\"space-y-4\">\n                      <Label className=\"text-base font-medium\">Custom Content (Optional):</Label>\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"customIntroduction\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Custom Introduction</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Add custom introduction content...\"\n                                className=\"resize-none\"\n                                rows={3}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"customArgument\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Custom Argument</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Add custom argument content...\"\n                                className=\"resize-none\"\n                                rows={4}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"customConclusion\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Custom Conclusion</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Add custom conclusion content...\"\n                                className=\"resize-none\"\n                                rows={2}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"flex flex-col md:flex-row gap-3 pt-4\">\n                      <Button \n                        type=\"submit\" \n                        disabled={isGenerating || !currentCase}\n                        className=\"flex-1 md:flex-none\"\n                      >\n                        {isGenerating ? (\n                          <>\n                            <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                            Generating...\n                          </>\n                        ) : (\n                          <>\n                            <Wand2 className=\"w-4 h-4 mr-2\" />\n                            Generate Brief\n                          </>\n                        )}\n                      </Button>\n                      \n                      {generatedBrief && (\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\"\n                          onClick={() => setActiveTab(\"preview\")}\n                          className=\"flex-1 md:flex-none\"\n                        >\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          View Preview\n                        </Button>\n                      )}\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"preview\" className=\"space-y-4\">\n            <Card className=\"rounded-xl brief-card\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Eye className=\"w-5 h-5\" />\n                    Generated Brief Preview\n                    {selectedTemplate && <Badge variant=\"secondary\">{selectedTemplate.name}</Badge>}\n                  </CardTitle>\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={copyToClipboard} disabled={!generatedBrief}>\n                      <Copy className=\"w-4 h-4 mr-2\" />\n                      Copy\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" onClick={regenerateBrief} disabled={!generatedBrief}>\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Regenerate\n                    </Button>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button size=\"sm\" disabled={!generatedBrief}>\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Export\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => handleExport('txt')}>\n                          <FileText className=\"w-4 h-4 mr-2\" />\n                          Export as Text\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => handleExport('html')}>\n                          <FileDown className=\"w-4 h-4 mr-2\" />\n                          Export as HTML\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => handleExport('word')}>\n                          <FileText className=\"w-4 h-4 mr-2\" />\n                          Export as Word\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => handleExport('print')}>\n                          <Printer className=\"w-4 h-4 mr-2\" />\n                          Print Preview\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {generatedBrief ? (\n                  <ScrollArea className=\"h-96 w-full border rounded-lg p-4\">\n                    <pre className=\"text-sm whitespace-pre-wrap font-mono leading-relaxed\">\n                      {generatedBrief}\n                    </pre>\n                  </ScrollArea>\n                ) : (\n                  <div className=\"h-96 flex items-center justify-center border rounded-lg bg-muted/50\">\n                    <div className=\"text-center space-y-4\">\n                      <FileText className=\"w-12 h-12 mx-auto text-muted-foreground\" />\n                      <div>\n                        <p className=\"font-medium text-muted-foreground\">No Brief Generated</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Use the Generator tab to create your legal brief\n                        </p>\n                      </div>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => setActiveTab(\"generator\")}\n                      >\n                        <Wand2 className=\"w-4 h-4 mr-2\" />\n                        Go to Generator\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":31059},"client/src/pages/case-management.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Plus, Calendar as CalendarIcon, Scale, Briefcase, Building, User, Clock, CheckCircle2, Archive } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { z } from \"zod\";\n\n// Case form schema\nconst caseFormSchema = z.object({\n  title: z.string().min(1, \"Case title is required\"),\n  caseNumber: z.string().optional(),\n  description: z.string().optional(),\n  caseType: z.string().min(1, \"Case type is required\"),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]).default(\"medium\"),\n  court: z.string().optional(),\n  jurisdiction: z.string().optional(),\n  opposingParty: z.string().optional(),\n  leadAttorney: z.string().optional(),\n  dateOpened: z.date({\n    required_error: \"Date opened is required\",\n  }),\n  notes: z.string().optional(),\n  tags: z.array(z.string()).default([]),\n});\n\ntype CaseFormData = z.infer<typeof caseFormSchema>;\n\n// Sample case data - in real app this would come from the database\nconst SAMPLE_CASES = [\n  {\n    id: \"1\",\n    title: \"Federal Civil Rights Violation Case\",\n    caseNumber: \"2025-CV-8901\",\n    description: \"Constitutional violations by US Marshals, unlawful arrest, and First Amendment rights infringement at Lafayette federal courthouse.\",\n    caseType: \"civil_rights\",\n    status: \"active\",\n    priority: \"urgent\",\n    court: \"US District Court - Western District of Louisiana\",\n    jurisdiction: \"Federal\",\n    opposingParty: \"United States Marshals Service\",\n    leadAttorney: \"Constitutional Rights Attorney\",\n    dateOpened: \"2025-08-25\",\n    tags: [\"constitutional\", \"federal\", \"civil-rights\", \"first-amendment\"],\n    notes: \"High-profile case involving federal agent misconduct and constitutional violations.\",\n    isActive: true,\n    createdAt: \"2025-08-25\",\n  },\n  {\n    id: \"2\",\n    title: \"FOIA Appeal Case\",\n    caseNumber: \"2025-FOIA-001\",\n    description: \"Appeal of denied FOIA requests for surveillance records and inter-agency communications.\",\n    caseType: \"administrative\",\n    status: \"active\",\n    priority: \"high\",\n    court: \"Administrative Court\",\n    jurisdiction: \"Federal\",\n    opposingParty: \"US Marshals Service\",\n    leadAttorney: \"FOIA Specialist\",\n    dateOpened: \"2025-06-27\",\n    tags: [\"foia\", \"transparency\", \"government-records\"],\n    notes: \"Multiple agencies involved, seeking disclosure of surveillance operations.\",\n    isActive: true,\n    createdAt: \"2025-06-27\",\n  },\n];\n\nconst CASE_TYPES = [\n  { value: \"civil_rights\", label: \"Civil Rights\" },\n  { value: \"criminal\", label: \"Criminal\" },\n  { value: \"administrative\", label: \"Administrative\" },\n  { value: \"constitutional\", label: \"Constitutional\" },\n  { value: \"tort\", label: \"Tort\" },\n  { value: \"contract\", label: \"Contract\" },\n  { value: \"employment\", label: \"Employment\" },\n  { value: \"family\", label: \"Family\" },\n  { value: \"immigration\", label: \"Immigration\" },\n  { value: \"other\", label: \"Other\" },\n];\n\nconst PRIORITY_COLORS = {\n  low: \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\",\n  medium: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\",\n  high: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300\",\n  urgent: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\",\n};\n\nconst STATUS_COLORS = {\n  active: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\",\n  pending: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\",\n  closed: \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\",\n  archived: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\",\n};\n\nexport default function CaseManagement() {\n  const [cases, setCases] = useState(SAMPLE_CASES);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [typeFilter, setTypeFilter] = useState<string>(\"all\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedCase, setSelectedCase] = useState<typeof SAMPLE_CASES[0] | null>(null);\n  const isMobile = useIsMobile();\n\n  const form = useForm<CaseFormData>({\n    resolver: zodResolver(caseFormSchema),\n    defaultValues: {\n      priority: \"medium\",\n      tags: [],\n    },\n  });\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const handleExport = () => {\n    window.print();\n  };\n\n  const onSubmit = (data: CaseFormData) => {\n    const newCase = {\n      id: Date.now().toString(),\n      ...data,\n      description: data.description || \"\",\n      caseNumber: data.caseNumber || \"\",\n      court: data.court || \"\",\n      jurisdiction: data.jurisdiction || \"\",\n      opposingParty: data.opposingParty || \"\",\n      leadAttorney: data.leadAttorney || \"\",\n      notes: data.notes || \"\",\n      status: \"active\" as const,\n      dateOpened: format(data.dateOpened, \"yyyy-MM-dd\"),\n      isActive: true,\n      createdAt: format(new Date(), \"yyyy-MM-dd\"),\n    };\n    \n    setCases(prev => [newCase, ...prev]);\n    setIsCreateDialogOpen(false);\n    form.reset();\n  };\n\n  const toggleCaseStatus = (id: string) => {\n    setCases(prev => prev.map(caseItem => \n      caseItem.id === id \n        ? { ...caseItem, status: caseItem.status === \"active\" ? \"closed\" : \"active\", isActive: caseItem.status !== \"active\" }\n        : caseItem\n    ));\n  };\n\n  // Filter cases\n  const filteredCases = cases.filter(caseItem => {\n    const matchesSearch = searchQuery.trim() === \"\" || \n      caseItem.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      caseItem.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      caseItem.caseNumber?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      caseItem.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    \n    const matchesStatus = statusFilter === \"all\" || caseItem.status === statusFilter;\n    const matchesType = typeFilter === \"all\" || caseItem.caseType === typeFilter;\n    \n    return matchesSearch && matchesStatus && matchesType;\n  });\n\n  const caseStats = {\n    total: cases.length,\n    active: cases.filter(c => c.status === \"active\").length,\n    pending: cases.filter(c => c.status === \"pending\").length,\n    closed: cases.filter(c => c.status === \"closed\").length,\n  };\n\n  return (\n    <div className={cn(\"h-screen overflow-y-auto\", isMobile ? \"pt-16\" : \"\")}>\n      <div className=\"container mx-auto p-4 md:p-6 space-y-4 md:space-y-6\">\n        <Header\n          title=\"Case Management\"\n          onSearch={handleSearch}\n          onExport={handleExport}\n          searchPlaceholder=\"Search cases...\"\n        />\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6\">\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Briefcase className=\"w-5 h-5 md:w-6 md:h-6 text-primary\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-primary\">{caseStats.total}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Total Cases</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <CheckCircle2 className=\"w-5 h-5 md:w-6 md:h-6 text-green-600 dark:text-green-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-green-600 dark:text-green-400\">{caseStats.active}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Active</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-yellow-100 dark:bg-yellow-900 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Clock className=\"w-5 h-5 md:w-6 md:h-6 text-yellow-600 dark:text-yellow-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-yellow-600 dark:text-yellow-400\">{caseStats.pending}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Pending</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Archive className=\"w-5 h-5 md:w-6 md:h-6 text-gray-600 dark:text-gray-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-gray-600 dark:text-gray-400\">{caseStats.closed}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Closed</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Controls */}\n        <Card className=\"rounded-xl\">\n          <CardContent className=\"p-3 md:p-4\">\n            <div className=\"flex flex-col space-y-3 md:space-y-0 md:flex-row md:items-center md:justify-between md:gap-4\">\n              <div className=\"flex flex-col space-y-3 md:space-y-0 md:flex-row md:items-center md:gap-4\">\n                <div className=\"flex flex-col md:flex-row gap-2\">\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-full md:w-32\" data-testid=\"status-filter\">\n                      <SelectValue placeholder=\"Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"closed\">Closed</SelectItem>\n                      <SelectItem value=\"archived\">Archived</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={typeFilter} onValueChange={setTypeFilter}>\n                    <SelectTrigger className=\"w-full md:w-40\" data-testid=\"type-filter\">\n                      <SelectValue placeholder=\"Case Type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Types</SelectItem>\n                      {CASE_TYPES.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <Input\n                  placeholder=\"Search cases...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full md:w-64\"\n                  data-testid=\"case-search-input\"\n                />\n              </div>\n\n              <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"w-full md:w-auto\" data-testid=\"create-case-btn\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Case\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className={cn(\"max-w-2xl max-h-[90vh] overflow-y-auto\", isMobile && \"w-[95vw]\")}>\n                  <DialogHeader>\n                    <DialogTitle>Create New Case</DialogTitle>\n                  </DialogHeader>\n                  \n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"title\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Case Title</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter case title...\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"caseNumber\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Case Number</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"2025-CV-001\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"caseType\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Case Type</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select case type\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {CASE_TYPES.map((type) => (\n                                    <SelectItem key={type.value} value={type.value}>\n                                      {type.label}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Describe the case details and legal issues...\"\n                                className=\"resize-none\"\n                                rows={3}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"court\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Court</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"US District Court...\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"jurisdiction\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Jurisdiction</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Federal, State, Local...\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"opposingParty\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Opposing Party</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Defendant/Plaintiff name...\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"leadAttorney\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Lead Attorney</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Attorney name...\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"priority\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Priority</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select priority\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"low\">Low</SelectItem>\n                                  <SelectItem value=\"medium\">Medium</SelectItem>\n                                  <SelectItem value=\"high\">High</SelectItem>\n                                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"dateOpened\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Date Opened</FormLabel>\n                              <Popover>\n                                <PopoverTrigger asChild>\n                                  <FormControl>\n                                    <Button\n                                      variant=\"outline\"\n                                      className={cn(\n                                        \"w-full pl-3 text-left font-normal\",\n                                        !field.value && \"text-muted-foreground\"\n                                      )}\n                                    >\n                                      {field.value ? (\n                                        format(field.value, \"PPP\")\n                                      ) : (\n                                        <span>Pick a date</span>\n                                      )}\n                                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                    </Button>\n                                  </FormControl>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                  <Calendar\n                                    mode=\"single\"\n                                    selected={field.value}\n                                    onSelect={field.onChange}\n                                    disabled={(date) =>\n                                      date > new Date() || date < new Date(\"1900-01-01\")\n                                    }\n                                    initialFocus\n                                  />\n                                </PopoverContent>\n                              </Popover>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"notes\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Notes</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Additional notes and considerations...\"\n                                className=\"resize-none\"\n                                rows={2}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex flex-col-reverse md:flex-row justify-end gap-3\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsCreateDialogOpen(false)}\n                          className=\"w-full md:w-auto\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" className=\"w-full md:w-auto\">\n                          Create Case\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Cases List */}\n        {filteredCases.length > 0 ? (\n          <div className=\"space-y-3 md:space-y-4\">\n            {filteredCases.map((caseItem) => (\n              <Card \n                key={caseItem.id} \n                className={cn(\n                  \"rounded-xl hover:shadow-md transition-shadow cursor-pointer\",\n                  selectedCase?.id === caseItem.id && \"ring-2 ring-primary\"\n                )}\n                onClick={() => setSelectedCase(caseItem)}\n              >\n                <CardContent className=\"p-3 md:p-6\">\n                  <div className=\"flex flex-col md:flex-row md:items-start justify-between gap-3 md:gap-4\">\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex flex-col md:flex-row md:items-center gap-2 md:gap-3 mb-2\">\n                        <h3 className=\"font-semibold text-sm md:text-base line-clamp-2\">{caseItem.title}</h3>\n                        <div className=\"flex flex-wrap gap-2\">\n                          <Badge className={cn(\"text-xs\", STATUS_COLORS[caseItem.status as keyof typeof STATUS_COLORS])}>\n                            {caseItem.status.charAt(0).toUpperCase() + caseItem.status.slice(1)}\n                          </Badge>\n                          <Badge className={cn(\"text-xs\", PRIORITY_COLORS[caseItem.priority as keyof typeof PRIORITY_COLORS])}>\n                            {caseItem.priority.charAt(0).toUpperCase() + caseItem.priority.slice(1)}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {CASE_TYPES.find(t => t.value === caseItem.caseType)?.label}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      {caseItem.description && (\n                        <p className=\"text-xs md:text-sm text-muted-foreground mb-3 line-clamp-2\">\n                          {caseItem.description}\n                        </p>\n                      )}\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 text-xs text-muted-foreground\">\n                        {caseItem.caseNumber && (\n                          <div><span className=\"font-medium\">Case #:</span> {caseItem.caseNumber}</div>\n                        )}\n                        {caseItem.court && (\n                          <div><span className=\"font-medium\">Court:</span> {caseItem.court}</div>\n                        )}\n                        {caseItem.dateOpened && (\n                          <div><span className=\"font-medium\">Opened:</span> {format(new Date(caseItem.dateOpened), \"MMM d, yyyy\")}</div>\n                        )}\n                      </div>\n\n                      {caseItem.tags.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 mt-3\">\n                          {caseItem.tags.slice(0, isMobile ? 2 : 5).map((tag) => (\n                            <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                          {caseItem.tags.length > (isMobile ? 2 : 5) && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              +{caseItem.tags.length - (isMobile ? 2 : 5)}\n                            </Badge>\n                          )}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex flex-row md:flex-col gap-2\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"flex-1 md:flex-none\">\n                        Select\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"flex-1 md:flex-none\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleCaseStatus(caseItem.id);\n                        }}\n                      >\n                        {caseItem.status === \"active\" ? \"Close\" : \"Reopen\"}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-8 md:p-12 text-center\">\n              <Briefcase className=\"w-12 h-12 md:w-16 md:h-16 mx-auto mb-4 text-muted-foreground/50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No cases found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchQuery \n                  ? `No cases match your search for \"${searchQuery}\"`\n                  : \"Create your first case to get started\"\n                }\n              </p>\n              <Button onClick={() => setIsCreateDialogOpen(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Case\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Selected Case Info */}\n        {selectedCase && (\n          <Card className=\"rounded-xl border-primary\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Selected Case: {selectedCase.title}</span>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => setSelectedCase(null)}\n                >\n                  Clear Selection\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium\">Case Number:</span> {selectedCase.caseNumber || \"Not assigned\"}\n                </div>\n                <div>\n                  <span className=\"font-medium\">Status:</span> {selectedCase.status}\n                </div>\n                <div>\n                  <span className=\"font-medium\">Type:</span> {CASE_TYPES.find(t => t.value === selectedCase.caseType)?.label}\n                </div>\n                <div>\n                  <span className=\"font-medium\">Priority:</span> {selectedCase.priority}\n                </div>\n                {selectedCase.court && (\n                  <div>\n                    <span className=\"font-medium\">Court:</span> {selectedCase.court}\n                  </div>\n                )}\n                {selectedCase.opposingParty && (\n                  <div>\n                    <span className=\"font-medium\">Opposing Party:</span> {selectedCase.opposingParty}\n                  </div>\n                )}\n              </div>\n              {selectedCase.description && (\n                <div className=\"mt-4\">\n                  <span className=\"font-medium\">Description:</span>\n                  <p className=\"text-sm text-muted-foreground mt-1\">{selectedCase.description}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":31091},"client/src/pages/deadlines.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar as CalendarIcon, Plus, Bell, AlertTriangle, CheckCircle2, Clock, Target } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { format, differenceInDays, isBefore, isToday } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { z } from \"zod\";\n\n// Deadline form schema\nconst deadlineFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  dueDate: z.date({\n    required_error: \"Due date is required\",\n  }),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]).default(\"medium\"),\n  category: z.string().min(1, \"Category is required\"),\n  reminderDays: z.array(z.number()).default([7, 3, 1]),\n});\n\ntype DeadlineFormData = z.infer<typeof deadlineFormSchema>;\n\n// Sample deadline data\nconst SAMPLE_DEADLINES = [\n  {\n    id: \"1\",\n    title: \"File Motion to Dismiss\",\n    description: \"Deadline to file motion to dismiss unlawful arrest charges\",\n    dueDate: new Date(\"2025-09-15\"),\n    priority: \"urgent\",\n    category: \"filing\",\n    status: \"upcoming\",\n    reminderDays: [7, 3, 1],\n    isCompleted: false,\n    createdAt: new Date(\"2025-08-30\"),\n  },\n  {\n    id: \"2\",\n    title: \"Discovery Response Due\",\n    description: \"Respond to government's discovery requests\",\n    dueDate: new Date(\"2025-09-10\"),\n    priority: \"high\",\n    category: \"discovery\",\n    status: \"upcoming\",\n    reminderDays: [5, 2, 1],\n    isCompleted: false,\n    createdAt: new Date(\"2025-08-28\"),\n  },\n  {\n    id: \"3\",\n    title: \"FOIA Appeal Deadline\",\n    description: \"Appeal deadline for USMS FOIA denial\",\n    dueDate: new Date(\"2025-10-01\"),\n    priority: \"medium\",\n    category: \"appeal\",\n    status: \"upcoming\",\n    reminderDays: [14, 7, 3],\n    isCompleted: false,\n    createdAt: new Date(\"2025-08-25\"),\n  },\n];\n\nconst DEADLINE_CATEGORIES = [\n  { value: \"filing\", label: \"Court Filing\" },\n  { value: \"discovery\", label: \"Discovery\" },\n  { value: \"hearing\", label: \"Hearing\" },\n  { value: \"appeal\", label: \"Appeal\" },\n  { value: \"foia\", label: \"FOIA Request\" },\n  { value: \"response\", label: \"Response Due\" },\n  { value: \"other\", label: \"Other\" },\n];\n\nconst PRIORITY_COLORS = {\n  low: \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\",\n  medium: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\",\n  high: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300\",\n  urgent: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\",\n};\n\nexport default function Deadlines() {\n  const [deadlines, setDeadlines] = useState(SAMPLE_DEADLINES);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\");\n  const [priorityFilter, setPriorityFilter] = useState<string>(\"all\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  const form = useForm<DeadlineFormData>({\n    resolver: zodResolver(deadlineFormSchema),\n    defaultValues: {\n      priority: \"medium\",\n      reminderDays: [7, 3, 1],\n    },\n  });\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const handleExport = () => {\n    window.print();\n  };\n\n  const onSubmit = (data: DeadlineFormData) => {\n    const newDeadline = {\n      id: Date.now().toString(),\n      ...data,\n      description: data.description || \"\",\n      status: \"upcoming\" as const,\n      isCompleted: false,\n      createdAt: new Date(),\n    };\n    \n    setDeadlines(prev => [newDeadline, ...prev]);\n    setIsCreateDialogOpen(false);\n    form.reset();\n  };\n\n  const toggleComplete = (id: string) => {\n    setDeadlines(prev => prev.map(deadline => \n      deadline.id === id \n        ? { ...deadline, isCompleted: !deadline.isCompleted, status: deadline.isCompleted ? \"upcoming\" : \"completed\" }\n        : deadline\n    ));\n  };\n\n  // Filter deadlines\n  const filteredDeadlines = deadlines.filter(deadline => {\n    const matchesSearch = searchQuery.trim() === \"\" || \n      deadline.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      deadline.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = categoryFilter === \"all\" || deadline.category === categoryFilter;\n    const matchesPriority = priorityFilter === \"all\" || deadline.priority === priorityFilter;\n    \n    return matchesSearch && matchesCategory && matchesPriority;\n  });\n\n  // Sort deadlines by due date\n  const sortedDeadlines = [...filteredDeadlines].sort((a, b) => \n    new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime()\n  );\n\n  // Calculate deadline status\n  const getDeadlineStatus = (deadline: typeof SAMPLE_DEADLINES[0]) => {\n    if (deadline.isCompleted) return \"completed\";\n    \n    const daysUntilDue = differenceInDays(deadline.dueDate, new Date());\n    const isPastDue = isBefore(deadline.dueDate, new Date()) && !isToday(deadline.dueDate);\n    \n    if (isPastDue) return \"overdue\";\n    if (daysUntilDue <= 1) return \"urgent\";\n    if (daysUntilDue <= 7) return \"warning\";\n    return \"upcoming\";\n  };\n\n  const deadlineStats = {\n    total: deadlines.length,\n    upcoming: deadlines.filter(d => !d.isCompleted && differenceInDays(d.dueDate, new Date()) > 7).length,\n    warning: deadlines.filter(d => !d.isCompleted && differenceInDays(d.dueDate, new Date()) <= 7 && differenceInDays(d.dueDate, new Date()) > 1).length,\n    urgent: deadlines.filter(d => !d.isCompleted && (differenceInDays(d.dueDate, new Date()) <= 1 || isToday(d.dueDate))).length,\n    overdue: deadlines.filter(d => !d.isCompleted && isBefore(d.dueDate, new Date()) && !isToday(d.dueDate)).length,\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"overdue\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case \"urgent\": return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300\";\n      case \"warning\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      default: return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n    }\n  };\n\n  return (\n    <div className={cn(\"h-screen overflow-y-auto\", isMobile ? \"pt-16\" : \"\")}>\n      <div className=\"container mx-auto p-4 md:p-6 space-y-4 md:space-y-6\">\n        <Header\n          title=\"Deadline Reminders\"\n          onSearch={handleSearch}\n          onExport={handleExport}\n          searchPlaceholder=\"Search deadlines...\"\n        />\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6\">\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Target className=\"w-5 h-5 md:w-6 md:h-6 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-blue-600 dark:text-blue-400\">{deadlineStats.upcoming}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Upcoming</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-yellow-100 dark:bg-yellow-900 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Clock className=\"w-5 h-5 md:w-6 md:h-6 text-yellow-600 dark:text-yellow-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-yellow-600 dark:text-yellow-400\">{deadlineStats.warning}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">This Week</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-orange-100 dark:bg-orange-900 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <AlertTriangle className=\"w-5 h-5 md:w-6 md:h-6 text-orange-600 dark:text-orange-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-orange-600 dark:text-orange-400\">{deadlineStats.urgent}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Urgent</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-red-100 dark:bg-red-900 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <AlertTriangle className=\"w-5 h-5 md:w-6 md:h-6 text-red-600 dark:text-red-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-red-600 dark:text-red-400\">{deadlineStats.overdue}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Overdue</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Controls */}\n        <Card className=\"rounded-xl\">\n          <CardContent className=\"p-3 md:p-4\">\n            <div className=\"flex flex-col space-y-3 md:space-y-0 md:flex-row md:items-center md:justify-between md:gap-4\">\n              <div className=\"flex flex-col space-y-3 md:space-y-0 md:flex-row md:items-center md:gap-4\">\n                <div className=\"flex flex-col md:flex-row gap-2\">\n                  <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                    <SelectTrigger className=\"w-full md:w-32\" data-testid=\"category-filter\">\n                      <SelectValue placeholder=\"Category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      {DEADLINE_CATEGORIES.map((category) => (\n                        <SelectItem key={category.value} value={category.value}>\n                          {category.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                    <SelectTrigger className=\"w-full md:w-32\" data-testid=\"priority-filter\">\n                      <SelectValue placeholder=\"Priority\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Priority</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <Input\n                  placeholder=\"Search deadlines...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full md:w-64\"\n                  data-testid=\"deadline-search-input\"\n                />\n              </div>\n\n              <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"w-full md:w-auto\" data-testid=\"create-deadline-btn\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Deadline\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className={cn(\"max-w-2xl max-h-[90vh] overflow-y-auto\", isMobile && \"w-[95vw]\")}>\n                  <DialogHeader>\n                    <DialogTitle>Create New Deadline</DialogTitle>\n                  </DialogHeader>\n                  \n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"title\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Deadline Title</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter deadline title...\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Describe the deadline and requirements...\"\n                                className=\"resize-none\"\n                                rows={3}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"dueDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Due Date</FormLabel>\n                              <Popover>\n                                <PopoverTrigger asChild>\n                                  <FormControl>\n                                    <Button\n                                      variant=\"outline\"\n                                      className={cn(\n                                        \"w-full pl-3 text-left font-normal\",\n                                        !field.value && \"text-muted-foreground\"\n                                      )}\n                                    >\n                                      {field.value ? (\n                                        format(field.value, \"PPP\")\n                                      ) : (\n                                        <span>Pick a date</span>\n                                      )}\n                                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                    </Button>\n                                  </FormControl>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                  <Calendar\n                                    mode=\"single\"\n                                    selected={field.value}\n                                    onSelect={field.onChange}\n                                    disabled={(date) =>\n                                      date < new Date()\n                                    }\n                                    initialFocus\n                                  />\n                                </PopoverContent>\n                              </Popover>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"priority\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Priority</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select priority\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"low\">Low</SelectItem>\n                                  <SelectItem value=\"medium\">Medium</SelectItem>\n                                  <SelectItem value=\"high\">High</SelectItem>\n                                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"category\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Category</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select category\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {DEADLINE_CATEGORIES.map((category) => (\n                                  <SelectItem key={category.value} value={category.value}>\n                                    {category.label}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex flex-col-reverse md:flex-row justify-end gap-3\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsCreateDialogOpen(false)}\n                          className=\"w-full md:w-auto\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" className=\"w-full md:w-auto\">\n                          Create Deadline\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Deadlines List */}\n        {sortedDeadlines.length > 0 ? (\n          <div className=\"space-y-3 md:space-y-4\">\n            {sortedDeadlines.map((deadline) => {\n              const status = getDeadlineStatus(deadline);\n              const daysUntilDue = differenceInDays(deadline.dueDate, new Date());\n              \n              return (\n                <Card key={deadline.id} className={cn(\n                  \"rounded-xl transition-all\",\n                  status === \"overdue\" && \"border-red-200 dark:border-red-800\",\n                  status === \"urgent\" && \"border-orange-200 dark:border-orange-800\",\n                  deadline.isCompleted && \"opacity-60\"\n                )}>\n                  <CardContent className=\"p-3 md:p-6\">\n                    <div className=\"flex items-start gap-3 md:gap-4\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => toggleComplete(deadline.id)}\n                        className={cn(\n                          \"mt-1 p-1 h-6 w-6 rounded-full\",\n                          deadline.isCompleted && \"bg-green-100 dark:bg-green-900\"\n                        )}\n                        data-testid={`deadline-complete-${deadline.id}`}\n                      >\n                        {deadline.isCompleted ? (\n                          <CheckCircle2 className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                        ) : (\n                          <div className=\"h-4 w-4 border-2 border-muted-foreground rounded-full\" />\n                        )}\n                      </Button>\n\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex flex-col md:flex-row md:items-center gap-2 md:gap-3 mb-2\">\n                          <h3 className={cn(\n                            \"font-semibold text-sm md:text-base line-clamp-2\",\n                            deadline.isCompleted && \"line-through text-muted-foreground\"\n                          )}>\n                            {deadline.title}\n                          </h3>\n                          <div className=\"flex flex-wrap gap-2\">\n                            <Badge className={cn(\"text-xs\", getStatusColor(status))}>\n                              {status === \"overdue\" && \"Overdue\"}\n                              {status === \"urgent\" && \"Due Soon\"}\n                              {status === \"warning\" && \"This Week\"}\n                              {status === \"upcoming\" && \"Upcoming\"}\n                              {status === \"completed\" && \"Completed\"}\n                            </Badge>\n                            <Badge className={cn(\"text-xs\", PRIORITY_COLORS[deadline.priority as keyof typeof PRIORITY_COLORS])}>\n                              {deadline.priority.charAt(0).toUpperCase() + deadline.priority.slice(1)}\n                            </Badge>\n                          </div>\n                        </div>\n                        \n                        {deadline.description && (\n                          <p className=\"text-xs md:text-sm text-muted-foreground mb-3 line-clamp-2\">\n                            {deadline.description}\n                          </p>\n                        )}\n\n                        <div className=\"flex flex-col md:flex-row md:items-center gap-2 md:gap-4 text-xs text-muted-foreground\">\n                          <div className=\"flex items-center gap-1\">\n                            <CalendarIcon className=\"h-3 w-3\" />\n                            <span className=\"font-medium\">Due:</span> \n                            <span className={cn(\n                              status === \"overdue\" && \"text-red-600 dark:text-red-400 font-medium\",\n                              status === \"urgent\" && \"text-orange-600 dark:text-orange-400 font-medium\"\n                            )}>\n                              {format(deadline.dueDate, \"MMM d, yyyy\")}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <span className=\"font-medium\">Category:</span> \n                            <span>{DEADLINE_CATEGORIES.find(c => c.value === deadline.category)?.label}</span>\n                          </div>\n                          {!deadline.isCompleted && (\n                            <div className=\"flex items-center gap-1\">\n                              <span className=\"font-medium\">\n                                {daysUntilDue < 0 ? \"Overdue by:\" : \"Days left:\"}\n                              </span>\n                              <span className={cn(\n                                daysUntilDue < 0 && \"text-red-600 dark:text-red-400 font-medium\",\n                                daysUntilDue <= 1 && daysUntilDue >= 0 && \"text-orange-600 dark:text-orange-400 font-medium\"\n                              )}>\n                                {Math.abs(daysUntilDue)}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"flex flex-col gap-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Bell className=\"w-3 h-3 mr-1\" />\n                          {isMobile ? \"\" : \"Remind\"}\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        ) : (\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-8 md:p-12 text-center\">\n              <CalendarIcon className=\"w-12 h-12 md:w-16 md:h-16 mx-auto mb-4 text-muted-foreground/50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No deadlines found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchQuery \n                  ? `No deadlines match your search for \"${searchQuery}\"`\n                  : \"Create your first deadline to get started\"\n                }\n              </p>\n              <Button onClick={() => setIsCreateDialogOpen(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Deadline\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":26182},"client/src/pages/legal-analytics.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { SubscriptionGate } from \"@/components/subscription-gate\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Brain, \n  Scale, \n  TrendingUp, \n  FileSearch, \n  AlertTriangle, \n  CheckCircle, \n  Clock,\n  Target,\n  Gavel,\n  BookOpen,\n  Zap,\n  BarChart3\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useCurrentCase } from \"@/lib/case-context\";\nimport { \n  LegalAnalyticsEngine,\n  type CaseOutcomePrediction,\n  type JudgeAnalytics,\n  type LegalPrecedent,\n  type StrategyRecommendation,\n  prioritizeRecommendations,\n  formatSuccessRate,\n  categorizeRisk\n} from \"@/lib/legal-analytics\";\n\nfunction LegalAnalyticsContent() {\n  const [prediction, setPrediction] = useState<CaseOutcomePrediction | null>(null);\n  const [judgeAnalytics, setJudgeAnalytics] = useState<JudgeAnalytics | null>(null);\n  const [precedents, setPrecedents] = useState<LegalPrecedent[]>([]);\n  const [strategies, setStrategies] = useState<StrategyRecommendation[]>([]);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"prediction\");\n  const [error, setError] = useState<string | null>(null);\n  const isMobile = useIsMobile();\n  const { currentCase } = useCurrentCase();\n\n  const runFullAnalysis = async () => {\n    if (!currentCase) {\n      setError(\"Please select a case to analyze\");\n      return;\n    }\n\n    setIsAnalyzing(true);\n    setError(null);\n\n    try {\n      // Run all analytics in parallel for efficiency\n      const [predictionResult, precedentsResult, strategiesResult] = await Promise.all([\n        LegalAnalyticsEngine.predictCaseOutcome(currentCase),\n        LegalAnalyticsEngine.findRelevantPrecedents(currentCase),\n        LegalAnalyticsEngine.generateStrategyRecommendations(currentCase),\n      ]);\n\n      setPrediction(predictionResult);\n      setPrecedents(precedentsResult);\n      setStrategies(prioritizeRecommendations(strategiesResult));\n\n      // Analyze judge if available\n      if (currentCase.judge) {\n        const judgeResult = await LegalAnalyticsEngine.analyzeJudge(\n          currentCase.judge, \n          currentCase.court\n        );\n        setJudgeAnalytics(judgeResult);\n      }\n\n    } catch (error) {\n      console.error(\"Analysis failed:\", error);\n      setError(\"Failed to complete legal analysis. Please try again.\");\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const getSuccessColor = (likelihood: number) => {\n    if (likelihood >= 70) return \"text-green-600\";\n    if (likelihood >= 50) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 80) return \"bg-green-100 text-green-800\";\n    if (confidence >= 60) return \"bg-yellow-100 text-yellow-800\";\n    return \"bg-red-100 text-red-800\";\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return \"bg-red-100 text-red-800 border-red-200\";\n      case 'medium': return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case 'low': return \"bg-blue-100 text-blue-800 border-blue-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  return (\n    <div className={cn(\"h-screen overflow-y-auto\", isMobile ? \"pt-16\" : \"\")}>\n      <div className=\"container mx-auto p-4 md:p-6 space-y-4 md:space-y-6\">\n        <Header\n          title=\"CaseBuddy AI Analytics\"\n          searchPlaceholder=\"Search legal insights...\"\n        />\n\n        {!currentCase && (\n          <Alert className=\"border-yellow-200 bg-yellow-50\">\n            <AlertTriangle className=\"w-4 h-4\" />\n            <AlertDescription>\n              Please select a case to run AI-powered legal analytics and predictions.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {error && (\n          <Alert className=\"border-red-200 bg-red-50\">\n            <AlertTriangle className=\"w-4 h-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* Analytics Overview Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6\">\n          <Card className=\"rounded-xl stats-card\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Brain className=\"w-5 h-5 md:w-6 md:h-6 text-blue-600\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-blue-600\">\n                {prediction ? `${prediction.successLikelihood}%` : '--'}\n              </div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Success Likelihood</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl stats-card\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <FileSearch className=\"w-5 h-5 md:w-6 md:h-6 text-green-600\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-green-600\">{precedents.length}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Relevant Precedents</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl stats-card\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Target className=\"w-5 h-5 md:w-6 md:h-6 text-purple-600\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-purple-600\">{strategies.length}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Strategy Recommendations</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl stats-card\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-orange-100 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Gavel className=\"w-5 h-5 md:w-6 md:h-6 text-orange-600\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-orange-600\">\n                {judgeAnalytics ? judgeAnalytics.totalCases : '--'}\n              </div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Judge Cases</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Analysis Control */}\n        <Card className=\"rounded-xl brief-card\">\n          <CardContent className=\"p-4 md:p-6\">\n            <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-4\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\">AI Legal Analysis</h3>\n                <p className=\"text-muted-foreground\">\n                  Run comprehensive AI analysis including case outcome prediction, judge analytics, \n                  precedent research, and strategic recommendations.\n                </p>\n              </div>\n              <Button \n                onClick={runFullAnalysis}\n                disabled={!currentCase || isAnalyzing}\n                size=\"lg\"\n                className=\"w-full md:w-auto\"\n              >\n                {isAnalyzing ? (\n                  <>\n                    <Zap className=\"w-4 h-4 mr-2 animate-pulse\" />\n                    Analyzing...\n                  </>\n                ) : (\n                  <>\n                    <Brain className=\"w-4 h-4 mr-2\" />\n                    Run Analysis\n                  </>\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"prediction\">Prediction</TabsTrigger>\n            <TabsTrigger value=\"precedents\">Precedents</TabsTrigger>\n            <TabsTrigger value=\"strategies\">Strategies</TabsTrigger>\n            <TabsTrigger value=\"judge\">Judge Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"prediction\" className=\"space-y-4\">\n            <Card className=\"rounded-xl brief-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  Case Outcome Prediction\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {prediction ? (\n                  <div className=\"space-y-6\">\n                    {/* Success Likelihood */}\n                    <div className=\"text-center\">\n                      <div className={cn(\"text-4xl font-bold mb-2\", getSuccessColor(prediction.successLikelihood))}>\n                        {prediction.successLikelihood}%\n                      </div>\n                      <p className=\"text-muted-foreground\">Success Likelihood</p>\n                      <Badge className={cn(\"mt-2\", getConfidenceColor(prediction.confidence))}>\n                        {prediction.confidence}% Confidence\n                      </Badge>\n                    </div>\n\n                    <Progress value={prediction.successLikelihood} className=\"w-full\" />\n\n                    {/* Key Factors */}\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <div>\n                        <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                          <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                          Strengths\n                        </h4>\n                        <ul className=\"space-y-2\">\n                          {prediction.strengths.map((strength, index) => (\n                            <li key={index} className=\"text-sm flex items-start gap-2\">\n                              <div className=\"w-1.5 h-1.5 bg-green-500 rounded-full mt-2 flex-shrink-0\" />\n                              {strength}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n\n                      <div>\n                        <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                          <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\n                          Risk Factors\n                        </h4>\n                        <ul className=\"space-y-2\">\n                          {prediction.riskFactors.map((risk, index) => (\n                            <li key={index} className=\"text-sm flex items-start gap-2\">\n                              <div className=\"w-1.5 h-1.5 bg-yellow-500 rounded-full mt-2 flex-shrink-0\" />\n                              {risk}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </div>\n\n                    {/* Recommendations */}\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">AI Recommendations</h4>\n                      <div className=\"space-y-2\">\n                        {prediction.recommendations.map((rec, index) => (\n                          <div key={index} className=\"p-3 bg-muted rounded-lg text-sm\">\n                            {rec}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Similar Cases */}\n                    {prediction.similarCases && prediction.similarCases.length > 0 && (\n                      <div>\n                        <h4 className=\"font-semibold mb-3\">Similar Cases</h4>\n                        <div className=\"space-y-3\">\n                          {prediction.similarCases.map((similarCase) => (\n                            <div key={similarCase.id} className=\"border rounded-lg p-4\">\n                              <div className=\"flex items-start justify-between mb-2\">\n                                <h5 className=\"font-medium\">{similarCase.title}</h5>\n                                <Badge variant={similarCase.outcome === 'won' ? 'default' : 'secondary'}>\n                                  {similarCase.outcome}\n                                </Badge>\n                              </div>\n                              <p className=\"text-sm text-muted-foreground mb-2\">\n                                {similarCase.jurisdiction} â¢ {similarCase.year}\n                              </p>\n                              <div className=\"flex items-center gap-4\">\n                                <span className=\"text-sm font-medium\">\n                                  {similarCase.similarity}% similarity\n                                </span>\n                                <Progress value={similarCase.similarity} className=\"flex-1 max-w-32\" />\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Brain className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">Run analysis to see case outcome prediction</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"precedents\" className=\"space-y-4\">\n            <Card className=\"rounded-xl brief-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BookOpen className=\"w-5 h-5\" />\n                  Relevant Legal Precedents\n                  <Badge variant=\"secondary\">{precedents.length} found</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {precedents.length > 0 ? (\n                  <ScrollArea className=\"h-96\">\n                    <div className=\"space-y-4\">\n                      {precedents.map((precedent) => (\n                        <div key={precedent.id} className=\"border rounded-lg p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div>\n                              <h4 className=\"font-semibold\">{precedent.caseName}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {precedent.citation} â¢ {precedent.court} â¢ {precedent.year}\n                              </p>\n                            </div>\n                            <Badge className=\"bg-blue-100 text-blue-800\">\n                              {precedent.relevanceScore}% relevant\n                            </Badge>\n                          </div>\n                          \n                          <p className=\"text-sm mb-3\">{precedent.keyHolding}</p>\n                          \n                          <div className=\"mb-3\">\n                            <h5 className=\"text-sm font-medium mb-2\">Legal Principles:</h5>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {precedent.legalPrinciples.map((principle, index) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                  {principle}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <h5 className=\"text-sm font-medium mb-2\">Application Suggestions:</h5>\n                            <ul className=\"text-sm space-y-1\">\n                              {precedent.applicationSuggestions.map((suggestion, index) => (\n                                <li key={index} className=\"flex items-start gap-2\">\n                                  <div className=\"w-1 h-1 bg-primary rounded-full mt-2 flex-shrink-0\" />\n                                  {suggestion}\n                                </li>\n                              ))}\n                            </ul>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <FileSearch className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">Run analysis to find relevant legal precedents</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"strategies\" className=\"space-y-4\">\n            <Card className=\"rounded-xl brief-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"w-5 h-5\" />\n                  Strategic Recommendations\n                  <Badge variant=\"secondary\">{strategies.length} recommendations</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {strategies.length > 0 ? (\n                  <ScrollArea className=\"h-96\">\n                    <div className=\"space-y-4\">\n                      {strategies.map((strategy, index) => (\n                        <div key={index} className=\"border rounded-lg p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div>\n                              <h4 className=\"font-semibold\">{strategy.title}</h4>\n                              <p className=\"text-sm text-muted-foreground capitalize\">\n                                {strategy.category} â¢ {strategy.timeframe}\n                              </p>\n                            </div>\n                            <Badge className={getPriorityColor(strategy.priority)}>\n                              {strategy.priority} priority\n                            </Badge>\n                          </div>\n                          \n                          <p className=\"text-sm mb-3\">{strategy.description}</p>\n                          \n                          <div className=\"mb-3\">\n                            <h5 className=\"text-sm font-medium mb-2\">Reasoning:</h5>\n                            <p className=\"text-sm text-muted-foreground\">{strategy.reasoning}</p>\n                          </div>\n                          \n                          <div className=\"grid md:grid-cols-2 gap-4 mb-3\">\n                            <div>\n                              <h5 className=\"text-sm font-medium mb-2 text-green-700\">Benefits:</h5>\n                              <ul className=\"text-sm space-y-1\">\n                                {strategy.benefits.map((benefit, idx) => (\n                                  <li key={idx} className=\"flex items-start gap-2\">\n                                    <CheckCircle className=\"w-3 h-3 text-green-600 mt-0.5 flex-shrink-0\" />\n                                    {benefit}\n                                  </li>\n                                ))}\n                              </ul>\n                            </div>\n                            \n                            <div>\n                              <h5 className=\"text-sm font-medium mb-2 text-red-700\">Risks:</h5>\n                              <ul className=\"text-sm space-y-1\">\n                                {strategy.risks.map((risk, idx) => (\n                                  <li key={idx} className=\"flex items-start gap-2\">\n                                    <AlertTriangle className=\"w-3 h-3 text-red-600 mt-0.5 flex-shrink-0\" />\n                                    {risk}\n                                  </li>\n                                ))}\n                              </ul>\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <h5 className=\"text-sm font-medium mb-2\">Next Steps:</h5>\n                            <ol className=\"text-sm space-y-1\">\n                              {strategy.nextSteps.map((step, idx) => (\n                                <li key={idx} className=\"flex items-start gap-2\">\n                                  <span className=\"w-4 h-4 bg-primary text-primary-foreground rounded-full text-xs flex items-center justify-center mt-0.5 flex-shrink-0\">\n                                    {idx + 1}\n                                  </span>\n                                  {step}\n                                </li>\n                              ))}\n                            </ol>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </ScrollArea>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Target className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">Run analysis to get strategic recommendations</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"judge\" className=\"space-y-4\">\n            <Card className=\"rounded-xl brief-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Gavel className=\"w-5 h-5\" />\n                  Judge Analytics\n                  {judgeAnalytics && (\n                    <Badge variant=\"secondary\">{judgeAnalytics.judgeName}</Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {judgeAnalytics ? (\n                  <div className=\"space-y-6\">\n                    {/* Judge Overview */}\n                    <div className=\"grid md:grid-cols-3 gap-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-primary\">{judgeAnalytics.totalCases}</div>\n                        <p className=\"text-sm text-muted-foreground\">Total Cases</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-blue-600\">{judgeAnalytics.averageCaseDuration}</div>\n                        <p className=\"text-sm text-muted-foreground\">Avg Duration (days)</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          {formatSuccessRate(judgeAnalytics.rulingTendencies.plaintiffFavorable)}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">Plaintiff Favorable</p>\n                      </div>\n                    </div>\n\n                    {/* Ruling Tendencies */}\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">Ruling Tendencies</h4>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm\">Plaintiff Favorable</span>\n                          <div className=\"flex items-center gap-2\">\n                            <Progress value={judgeAnalytics.rulingTendencies.plaintiffFavorable} className=\"w-24\" />\n                            <span className=\"text-sm font-medium\">\n                              {formatSuccessRate(judgeAnalytics.rulingTendencies.plaintiffFavorable)}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm\">Defendant Favorable</span>\n                          <div className=\"flex items-center gap-2\">\n                            <Progress value={judgeAnalytics.rulingTendencies.defendantFavorable} className=\"w-24\" />\n                            <span className=\"text-sm font-medium\">\n                              {formatSuccessRate(judgeAnalytics.rulingTendencies.defendantFavorable)}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm\">Settlements</span>\n                          <div className=\"flex items-center gap-2\">\n                            <Progress value={judgeAnalytics.rulingTendencies.settlements} className=\"w-24\" />\n                            <span className=\"text-sm font-medium\">\n                              {formatSuccessRate(judgeAnalytics.rulingTendencies.settlements)}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Case Types */}\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">Case Types</h4>\n                      <div className=\"space-y-2\">\n                        {judgeAnalytics.caseTypes.map((caseType, index) => (\n                          <div key={index} className=\"flex items-center justify-between p-2 bg-muted rounded\">\n                            <span className=\"text-sm\">{caseType.type}</span>\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"text-xs text-muted-foreground\">{caseType.count} cases</span>\n                              <Badge variant=\"outline\">\n                                {formatSuccessRate(caseType.successRate)} success\n                              </Badge>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Recent Trends */}\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">Recent Trends</h4>\n                      <div className=\"space-y-2\">\n                        {judgeAnalytics.recentTrends.map((trend, index) => (\n                          <div key={index} className=\"p-3 bg-muted rounded-lg text-sm\">\n                            {trend}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Recommendations */}\n                    <div>\n                      <h4 className=\"font-semibold mb-3\">Strategic Recommendations</h4>\n                      <div className=\"space-y-2\">\n                        {judgeAnalytics.recommendations.map((rec, index) => (\n                          <div key={index} className=\"p-3 bg-primary/5 border border-primary/20 rounded-lg text-sm\">\n                            {rec}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Gavel className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">\n                      {currentCase?.judge \n                        ? \"Run analysis to get insights about this judge\" \n                        : \"No judge assigned to this case\"}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\nexport default function LegalAnalyticsPage() {\n  return (\n    <SubscriptionGate \n      feature=\"AI-Powered Legal Analytics\" \n      description=\"Get case outcome predictions, judge behavior analysis, legal precedent finder, and strategic recommendations powered by advanced AI.\"\n    >\n      <LegalAnalyticsContent />\n    </SubscriptionGate>\n  );\n}","size_bytes":28725},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Eye, EyeOff, Scale, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nconst loginSchema = z.object({\n  usernameOrEmail: z.string().min(1, \"Username or email is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string()\n    .min(3, \"Username must be at least 3 characters\")\n    .max(30, \"Username must be less than 30 characters\")\n    .regex(/^[a-zA-Z0-9_]+$/, \"Username can only contain letters, numbers, and underscores\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, \"Password must contain at least one lowercase letter, one uppercase letter, and one number\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function LoginPage() {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"login\");\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const { login, register, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      usernameOrEmail: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onLogin = async (data: LoginFormData) => {\n    setError(null);\n    const result = await login(data.usernameOrEmail, data.password);\n    \n    if (result.success) {\n      setLocation(\"/\");\n    } else {\n      setError(result.error || \"Login failed\");\n    }\n  };\n\n  const onRegister = async (data: RegisterFormData) => {\n    setError(null);\n    setSuccess(null);\n    \n    const result = await register(data);\n    \n    if (result.success) {\n      setSuccess(\"Account created successfully! Redirecting...\");\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 2000);\n    } else {\n      setError(result.error || \"Registration failed\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-cream-50 to-orange-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg\">\n              <Scale className=\"w-6 h-6 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">CaseBuddy</h1>\n          <p className=\"text-gray-600\">Your Legal Case Assistant</p>\n        </div>\n\n        <Card className=\"shadow-xl border-0 bg-white/95 backdrop-blur-sm\">\n          <CardHeader className=\"space-y-1 pb-4\">\n            <CardTitle className=\"text-xl text-center\">Welcome</CardTitle>\n            <CardDescription className=\"text-center\">\n              Sign in to your account or create a new one\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\">Create Account</TabsTrigger>\n              </TabsList>\n\n              {/* Login Tab */}\n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"usernameOrEmail\">Username or Email</Label>\n                    <Input\n                      id=\"usernameOrEmail\"\n                      type=\"text\"\n                      placeholder=\"Enter username or email\"\n                      {...loginForm.register(\"usernameOrEmail\")}\n                      className={cn(loginForm.formState.errors.usernameOrEmail && \"border-red-500\")}\n                      data-testid=\"input-username-email\"\n                    />\n                    {loginForm.formState.errors.usernameOrEmail && (\n                      <p className=\"text-sm text-red-500\">\n                        {loginForm.formState.errors.usernameOrEmail.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter password\"\n                        {...loginForm.register(\"password\")}\n                        className={cn(loginForm.formState.errors.password && \"border-red-500\")}\n                        data-testid=\"input-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        data-testid=\"button-toggle-password\"\n                      >\n                        {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                    {loginForm.formState.errors.password && (\n                      <p className=\"text-sm text-red-500\">\n                        {loginForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {error && (\n                    <Alert className=\"border-red-200 bg-red-50\">\n                      <AlertCircle className=\"w-4 h-4\" />\n                      <AlertDescription className=\"text-red-700\">{error}</AlertDescription>\n                    </Alert>\n                  )}\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={isLoading}\n                    data-testid=\"button-login\"\n                  >\n                    {isLoading ? \"Signing In...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </TabsContent>\n\n              {/* Register Tab */}\n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        type=\"text\"\n                        placeholder=\"John\"\n                        {...registerForm.register(\"firstName\")}\n                        data-testid=\"input-first-name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        type=\"text\"\n                        placeholder=\"Doe\"\n                        {...registerForm.register(\"lastName\")}\n                        data-testid=\"input-last-name\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      type=\"text\"\n                      placeholder=\"john_doe\"\n                      {...registerForm.register(\"username\")}\n                      className={cn(registerForm.formState.errors.username && \"border-red-500\")}\n                      data-testid=\"input-username\"\n                    />\n                    {registerForm.formState.errors.username && (\n                      <p className=\"text-sm text-red-500\">\n                        {registerForm.formState.errors.username.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"john@example.com\"\n                      {...registerForm.register(\"email\")}\n                      className={cn(registerForm.formState.errors.email && \"border-red-500\")}\n                      data-testid=\"input-email\"\n                    />\n                    {registerForm.formState.errors.email && (\n                      <p className=\"text-sm text-red-500\">\n                        {registerForm.formState.errors.email.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"registerPassword\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"registerPassword\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Create password\"\n                        {...registerForm.register(\"password\")}\n                        className={cn(registerForm.formState.errors.password && \"border-red-500\")}\n                        data-testid=\"input-register-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        data-testid=\"button-toggle-register-password\"\n                      >\n                        {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                    {registerForm.formState.errors.password && (\n                      <p className=\"text-sm text-red-500\">\n                        {registerForm.formState.errors.password.message}\n                      </p>\n                    )}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"confirmPassword\"\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        placeholder=\"Confirm password\"\n                        {...registerForm.register(\"confirmPassword\")}\n                        className={cn(registerForm.formState.errors.confirmPassword && \"border-red-500\")}\n                        data-testid=\"input-confirm-password\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        data-testid=\"button-toggle-confirm-password\"\n                      >\n                        {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                    {registerForm.formState.errors.confirmPassword && (\n                      <p className=\"text-sm text-red-500\">\n                        {registerForm.formState.errors.confirmPassword.message}\n                      </p>\n                    )}\n                  </div>\n\n                  {error && (\n                    <Alert className=\"border-red-200 bg-red-50\">\n                      <AlertCircle className=\"w-4 h-4\" />\n                      <AlertDescription className=\"text-red-700\">{error}</AlertDescription>\n                    </Alert>\n                  )}\n\n                  {success && (\n                    <Alert className=\"border-green-200 bg-green-50\">\n                      <CheckCircle className=\"w-4 h-4\" />\n                      <AlertDescription className=\"text-green-700\">{success}</AlertDescription>\n                    </Alert>\n                  )}\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={isLoading}\n                    data-testid=\"button-register\"\n                  >\n                    {isLoading ? \"Creating Account...\" : \"Create Account\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        <div className=\"text-center mt-6 text-sm text-gray-600\">\n          <p>Â© 2025 CaseBuddy Legal Case Management</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14552},"client/src/pages/motions.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Scale, Plus, Search, Filter, Calendar as CalendarIcon, FileText, Clock, AlertCircle, CheckCircle2 } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { z } from \"zod\";\n\n// Motion form schema\nconst motionFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  type: z.string().min(1, \"Motion type is required\"),\n  description: z.string().optional(),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]).default(\"medium\"),\n  dueDate: z.date().optional(),\n  court: z.string().optional(),\n  caseNumber: z.string().optional(),\n  assignedTo: z.string().optional(),\n  notes: z.string().optional(),\n  tags: z.array(z.string()).default([]),\n});\n\ntype MotionFormData = z.infer<typeof motionFormSchema>;\n\n// Sample motion data - in real app this would come from the database\nconst SAMPLE_MOTIONS = [\n  {\n    id: \"1\",\n    title: \"Motion to Dismiss - Unlawful Arrest\",\n    type: \"motion_to_dismiss\",\n    status: \"draft\",\n    priority: \"high\",\n    description: \"Motion to dismiss charges based on Fourth Amendment violations during unlawful arrest at federal courthouse.\",\n    dueDate: \"2025-09-15\",\n    court: \"US District Court - Western District of Louisiana\",\n    caseNumber: \"2025-CV-8901\",\n    assignedTo: \"Lead Attorney\",\n    tags: [\"constitutional\", \"fourth-amendment\", \"unlawful-arrest\"],\n    createdAt: \"2025-08-30\",\n  },\n  {\n    id: \"2\", \n    title: \"Motion for Summary Judgment - Civil Rights Violations\",\n    type: \"motion_for_summary_judgment\",\n    status: \"filed\",\n    priority: \"urgent\",\n    description: \"Summary judgment motion on federal civil rights violations by US Marshals.\",\n    dueDate: \"2025-09-30\",\n    court: \"US District Court - Western District of Louisiana\",\n    caseNumber: \"2025-CV-8901\",\n    assignedTo: \"Constitutional Law Specialist\",\n    tags: [\"civil-rights\", \"federal\", \"summary-judgment\"],\n    createdAt: \"2025-08-25\",\n  },\n];\n\nconst MOTION_TYPES = [\n  { value: \"motion_to_dismiss\", label: \"Motion to Dismiss\" },\n  { value: \"motion_for_summary_judgment\", label: \"Motion for Summary Judgment\" },\n  { value: \"motion_to_suppress\", label: \"Motion to Suppress Evidence\" },\n  { value: \"motion_for_injunctive_relief\", label: \"Motion for Injunctive Relief\" },\n  { value: \"motion_to_compel\", label: \"Motion to Compel Discovery\" },\n  { value: \"motion_for_sanctions\", label: \"Motion for Sanctions\" },\n  { value: \"other\", label: \"Other Motion\" },\n];\n\nconst PRIORITY_COLORS = {\n  low: \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\",\n  medium: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\",\n  high: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300\",\n  urgent: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\",\n};\n\nconst STATUS_COLORS = {\n  draft: \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\",\n  filed: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\",\n  pending: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\",\n  granted: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\",\n  denied: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\",\n};\n\nexport default function Motions() {\n  const [motions, setMotions] = useState(SAMPLE_MOTIONS);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [priorityFilter, setPriorityFilter] = useState<string>(\"all\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  const form = useForm<MotionFormData>({\n    resolver: zodResolver(motionFormSchema),\n    defaultValues: {\n      priority: \"medium\",\n      tags: [],\n    },\n  });\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const handleExport = () => {\n    window.print();\n  };\n\n  const onSubmit = (data: MotionFormData) => {\n    const newMotion = {\n      id: Date.now().toString(),\n      ...data,\n      description: data.description || \"\",\n      court: data.court || \"\",\n      caseNumber: data.caseNumber || \"\",\n      assignedTo: data.assignedTo || \"\",\n      notes: data.notes || \"\",\n      status: \"draft\" as const,\n      dueDate: data.dueDate ? format(data.dueDate, \"yyyy-MM-dd\") : \"\",\n      createdAt: format(new Date(), \"yyyy-MM-dd\"),\n    };\n    \n    setMotions(prev => [newMotion, ...prev]);\n    setIsCreateDialogOpen(false);\n    form.reset();\n  };\n\n  // Filter motions\n  const filteredMotions = motions.filter(motion => {\n    const matchesSearch = searchQuery.trim() === \"\" || \n      motion.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      motion.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      motion.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    \n    const matchesStatus = statusFilter === \"all\" || motion.status === statusFilter;\n    const matchesPriority = priorityFilter === \"all\" || motion.priority === priorityFilter;\n    \n    return matchesSearch && matchesStatus && matchesPriority;\n  });\n\n  const motionStats = {\n    total: motions.length,\n    draft: motions.filter(m => m.status === \"draft\").length,\n    filed: motions.filter(m => m.status === \"filed\").length,\n    pending: motions.filter(m => m.status === \"pending\").length,\n  };\n\n  return (\n    <div className={cn(\"h-screen overflow-y-auto\", isMobile ? \"pt-16\" : \"\")}>\n      <div className=\"container mx-auto p-4 md:p-6 space-y-4 md:space-y-6\">\n        <Header\n          title=\"Motion Tracking\"\n          onSearch={handleSearch}\n          onExport={handleExport}\n          searchPlaceholder=\"Search motions...\"\n        />\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6\">\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Scale className=\"w-5 h-5 md:w-6 md:h-6 text-primary\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-primary\">{motionStats.total}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Total Motions</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <FileText className=\"w-5 h-5 md:w-6 md:h-6 text-gray-600 dark:text-gray-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-gray-600 dark:text-gray-400\">{motionStats.draft}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Drafts</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <Clock className=\"w-5 h-5 md:w-6 md:h-6 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-blue-600 dark:text-blue-400\">{motionStats.filed}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Filed</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-3 md:p-4 text-center\">\n              <div className=\"w-10 h-10 md:w-12 md:h-12 bg-yellow-100 dark:bg-yellow-900 rounded-lg flex items-center justify-center mx-auto mb-2 md:mb-3\">\n                <AlertCircle className=\"w-5 h-5 md:w-6 md:h-6 text-yellow-600 dark:text-yellow-400\" />\n              </div>\n              <div className=\"text-lg md:text-2xl font-bold text-yellow-600 dark:text-yellow-400\">{motionStats.pending}</div>\n              <div className=\"text-xs md:text-sm text-muted-foreground\">Pending</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Controls */}\n        <Card className=\"rounded-xl\">\n          <CardContent className=\"p-3 md:p-4\">\n            <div className=\"flex flex-col space-y-3 md:space-y-0 md:flex-row md:items-center md:justify-between md:gap-4\">\n              <div className=\"flex flex-col space-y-3 md:space-y-0 md:flex-row md:items-center md:gap-4\">\n                <div className=\"flex flex-col md:flex-row gap-2\">\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-full md:w-32\" data-testid=\"status-filter\">\n                      <SelectValue placeholder=\"Status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"draft\">Draft</SelectItem>\n                      <SelectItem value=\"filed\">Filed</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                      <SelectItem value=\"granted\">Granted</SelectItem>\n                      <SelectItem value=\"denied\">Denied</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                    <SelectTrigger className=\"w-full md:w-32\" data-testid=\"priority-filter\">\n                      <SelectValue placeholder=\"Priority\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Priority</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <Input\n                  placeholder=\"Search motions...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full md:w-64\"\n                  data-testid=\"motion-search-input\"\n                />\n              </div>\n\n              <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button className=\"w-full md:w-auto\" data-testid=\"create-motion-btn\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Motion\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className={cn(\"max-w-2xl max-h-[90vh] overflow-y-auto\", isMobile && \"w-[95vw]\")}>\n                  <DialogHeader>\n                    <DialogTitle>Create New Motion</DialogTitle>\n                  </DialogHeader>\n                  \n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"title\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Motion Title</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Enter motion title...\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"type\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Motion Type</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select motion type\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {MOTION_TYPES.map((type) => (\n                                    <SelectItem key={type.value} value={type.value}>\n                                      {type.label}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"priority\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Priority</FormLabel>\n                              <Select onValueChange={field.onChange} value={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select priority\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"low\">Low</SelectItem>\n                                  <SelectItem value=\"medium\">Medium</SelectItem>\n                                  <SelectItem value=\"high\">High</SelectItem>\n                                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Describe the motion and its legal basis...\"\n                                className=\"resize-none\"\n                                rows={3}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"court\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Court</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"US District Court...\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"caseNumber\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Case Number</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"2025-CV-8901\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"assignedTo\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Assigned To</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Attorney name...\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"dueDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Due Date</FormLabel>\n                              <Popover>\n                                <PopoverTrigger asChild>\n                                  <FormControl>\n                                    <Button\n                                      variant=\"outline\"\n                                      className={cn(\n                                        \"w-full pl-3 text-left font-normal\",\n                                        !field.value && \"text-muted-foreground\"\n                                      )}\n                                    >\n                                      {field.value ? (\n                                        format(field.value, \"PPP\")\n                                      ) : (\n                                        <span>Pick a date</span>\n                                      )}\n                                      <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                                    </Button>\n                                  </FormControl>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                  <Calendar\n                                    mode=\"single\"\n                                    selected={field.value}\n                                    onSelect={field.onChange}\n                                    disabled={(date) =>\n                                      date < new Date()\n                                    }\n                                    initialFocus\n                                  />\n                                </PopoverContent>\n                              </Popover>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"notes\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Notes</FormLabel>\n                            <FormControl>\n                              <Textarea \n                                placeholder=\"Additional notes and considerations...\"\n                                className=\"resize-none\"\n                                rows={2}\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex flex-col-reverse md:flex-row justify-end gap-3\">\n                        <Button \n                          type=\"button\" \n                          variant=\"outline\" \n                          onClick={() => setIsCreateDialogOpen(false)}\n                          className=\"w-full md:w-auto\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" className=\"w-full md:w-auto\">\n                          Create Motion\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Motions List */}\n        {filteredMotions.length > 0 ? (\n          <div className=\"space-y-3 md:space-y-4\">\n            {filteredMotions.map((motion) => (\n              <Card key={motion.id} className=\"rounded-xl hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-3 md:p-6\">\n                  <div className=\"flex flex-col md:flex-row md:items-start justify-between gap-3 md:gap-4\">\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex flex-col md:flex-row md:items-center gap-2 md:gap-3 mb-2\">\n                        <h3 className=\"font-semibold text-sm md:text-base line-clamp-2\">{motion.title}</h3>\n                        <div className=\"flex flex-wrap gap-2\">\n                          <Badge className={cn(\"text-xs\", STATUS_COLORS[motion.status as keyof typeof STATUS_COLORS])}>\n                            {motion.status.charAt(0).toUpperCase() + motion.status.slice(1)}\n                          </Badge>\n                          <Badge className={cn(\"text-xs\", PRIORITY_COLORS[motion.priority as keyof typeof PRIORITY_COLORS])}>\n                            {motion.priority.charAt(0).toUpperCase() + motion.priority.slice(1)}\n                          </Badge>\n                        </div>\n                      </div>\n                      \n                      <p className=\"text-xs md:text-sm text-muted-foreground mb-3 line-clamp-2\">\n                        {motion.description}\n                      </p>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 text-xs text-muted-foreground\">\n                        {motion.court && (\n                          <div><span className=\"font-medium\">Court:</span> {motion.court}</div>\n                        )}\n                        {motion.caseNumber && (\n                          <div><span className=\"font-medium\">Case:</span> {motion.caseNumber}</div>\n                        )}\n                        {motion.dueDate && (\n                          <div><span className=\"font-medium\">Due:</span> {format(new Date(motion.dueDate), \"MMM d, yyyy\")}</div>\n                        )}\n                      </div>\n\n                      {motion.tags.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1 mt-3\">\n                          {motion.tags.slice(0, isMobile ? 2 : 5).map((tag) => (\n                            <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                          {motion.tags.length > (isMobile ? 2 : 5) && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              +{motion.tags.length - (isMobile ? 2 : 5)}\n                            </Badge>\n                          )}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex flex-row md:flex-col gap-2\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"flex-1 md:flex-none\">\n                        Edit\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"flex-1 md:flex-none\">\n                        View\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"rounded-xl\">\n            <CardContent className=\"p-8 md:p-12 text-center\">\n              <Scale className=\"w-12 h-12 md:w-16 md:h-16 mx-auto mb-4 text-muted-foreground/50\" />\n              <h3 className=\"text-lg font-medium mb-2\">No motions found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {searchQuery \n                  ? `No motions match your search for \"${searchQuery}\"`\n                  : \"Create your first motion to get started\"\n                }\n              </p>\n              <Button onClick={() => setIsCreateDialogOpen(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Motion\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":26034},"client/src/pages/subscription.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CheckCircle, Crown, Clock, CreditCard, Shield, Zap, AlertTriangle } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth-context\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CouponInput } from \"@/components/coupon-input\";\n\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY!);\n\ninterface SubscriptionStatus {\n  status: string;\n  trialEndsAt?: string;\n  subscriptionEndsAt?: string;\n  isTrialActive: boolean;\n  isSubscriptionActive: boolean;\n}\n\nfunction SubscriptionForm({ clientSecret, onSuccess, appliedCoupon }: { \n  clientSecret: string; \n  onSuccess: () => void; \n  appliedCoupon?: CouponValidationResult | null;\n}) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: window.location.origin,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      // Apply coupon if valid\n      if (appliedCoupon?.valid && appliedCoupon.coupon) {\n        try {\n          await apiRequest('/api/coupons/apply', {\n            method: 'POST',\n            data: {\n              couponId: appliedCoupon.coupon.id,\n              originalAmount: 14.95,\n              discountApplied: appliedCoupon.discountAmount || 0,\n              subscriptionId: clientSecret, // Use client secret as temp ID\n            }\n          });\n        } catch (error) {\n          console.error('Failed to record coupon usage:', error);\n        }\n      }\n\n      toast({\n        title: \"Payment Successful\",\n        description: appliedCoupon?.valid ? \n          `Welcome to CaseBuddy Pro! Your coupon saved you $${appliedCoupon.discountAmount?.toFixed(2)}` :\n          \"Welcome to CaseBuddy Pro!\",\n      });\n      onSuccess();\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        disabled={!stripe || isLoading} \n        className=\"w-full\"\n        data-testid=\"button-confirm-payment\"\n      >\n        {isLoading ? \"Processing...\" : \"Confirm Payment\"}\n      </Button>\n    </form>\n  );\n}\n\ninterface CouponValidationResult {\n  valid: boolean;\n  coupon?: {\n    id: number;\n    code: string;\n    description: string | null;\n    discountType: 'percentage' | 'fixed';\n    discountValue: string;\n  };\n  error?: string;\n  discountAmount?: number;\n  finalAmount?: number;\n}\n\nexport default function SubscriptionPage() {\n  const [subscriptionStatus, setSubscriptionStatus] = useState<SubscriptionStatus | null>(null);\n  const [clientSecret, setClientSecret] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [appliedCoupon, setAppliedCoupon] = useState<CouponValidationResult | null>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const MONTHLY_PRICE = 14.95;\n  const finalPrice = appliedCoupon?.valid ? appliedCoupon.finalAmount || MONTHLY_PRICE : MONTHLY_PRICE;\n\n  useEffect(() => {\n    loadSubscriptionStatus();\n  }, []);\n\n  const loadSubscriptionStatus = async () => {\n    try {\n      const response = await apiRequest(\"/api/subscription/status\");\n      setSubscriptionStatus(response);\n    } catch (error) {\n      console.error(\"Failed to load subscription status:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleStartSubscription = async () => {\n    try {\n      setIsLoading(true);\n      const response = await apiRequest(\"/api/subscription/start\", {\n        method: \"POST\",\n        data: {\n          couponCode: appliedCoupon?.valid ? appliedCoupon.coupon?.code : undefined,\n          finalAmount: finalPrice,\n        }\n      });\n      \n      if (response.clientSecret) {\n        setClientSecret(response.clientSecret);\n      } else {\n        // Trial started successfully\n        toast({\n          title: \"Trial Started!\",\n          description: \"Your 2-week free trial has begun. Enjoy CaseBuddy Pro!\",\n        });\n        loadSubscriptionStatus();\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start subscription\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCancelSubscription = async () => {\n    if (!confirm(\"Are you sure you want to cancel your subscription? You'll lose access to pro features at the end of your billing period.\")) {\n      return;\n    }\n\n    try {\n      await apiRequest(\"/api/subscription/cancel\", {\n        method: \"POST\",\n      });\n      \n      toast({\n        title: \"Subscription Canceled\",\n        description: \"Your subscription has been canceled. You'll retain access until the end of your billing period.\",\n      });\n      \n      loadSubscriptionStatus();\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to cancel subscription\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleManageBilling = async () => {\n    try {\n      const response = await apiRequest(\"/api/subscription/portal\", {\n        method: \"POST\",\n      });\n      \n      window.open(response.url, \"_blank\");\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to open billing portal\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const getDaysRemaining = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = date.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return Math.max(0, diffDays);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading subscription details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      <div className=\"mb-8 text-center\">\n        <h1 className=\"text-3xl font-bold mb-2\">CaseBuddy Pro</h1>\n        <p className=\"text-muted-foreground\">Your Legal Case Assistant - Professional Plan</p>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* Current Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Crown className=\"w-5 h-5\" />\n              Current Plan\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {subscriptionStatus?.isTrialActive && (\n              <Alert className=\"border-blue-200 bg-blue-50\">\n                <Clock className=\"w-4 h-4\" />\n                <AlertDescription>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Free Trial Active</span>\n                    <Badge variant=\"outline\" className=\"bg-blue-100 text-blue-800\">\n                      {subscriptionStatus.trialEndsAt && \n                        `${getDaysRemaining(subscriptionStatus.trialEndsAt)} days left`\n                      }\n                    </Badge>\n                  </div>\n                  {subscriptionStatus.trialEndsAt && (\n                    <p className=\"text-sm mt-1\">\n                      Trial ends {formatDate(subscriptionStatus.trialEndsAt)}\n                    </p>\n                  )}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {subscriptionStatus?.status === \"active\" && (\n              <Alert className=\"border-green-200 bg-green-50\">\n                <CheckCircle className=\"w-4 h-4\" />\n                <AlertDescription>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Pro Plan Active</span>\n                    <Badge className=\"bg-green-100 text-green-800\">\n                      $14.95/month\n                    </Badge>\n                  </div>\n                  {subscriptionStatus.subscriptionEndsAt && (\n                    <p className=\"text-sm mt-1\">\n                      Next billing: {formatDate(subscriptionStatus.subscriptionEndsAt)}\n                    </p>\n                  )}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {subscriptionStatus?.status === \"canceled\" && (\n              <Alert className=\"border-yellow-200 bg-yellow-50\">\n                <AlertTriangle className=\"w-4 h-4\" />\n                <AlertDescription>\n                  <span>Subscription Canceled</span>\n                  {subscriptionStatus.subscriptionEndsAt && (\n                    <p className=\"text-sm mt-1\">\n                      Access until {formatDate(subscriptionStatus.subscriptionEndsAt)}\n                    </p>\n                  )}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">User</span>\n                <span className=\"font-medium\">{user?.email}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Status</span>\n                <Badge variant={subscriptionStatus?.isSubscriptionActive ? \"default\" : \"secondary\"}>\n                  {subscriptionStatus?.isSubscriptionActive ? \"Active\" : \"Inactive\"}\n                </Badge>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-2\">\n              {subscriptionStatus?.status === \"trial\" && (\n                <div className=\"space-y-4\">\n                  <CouponInput\n                    orderAmount={MONTHLY_PRICE}\n                    planType=\"pro\"\n                    onCouponApplied={(coupon) => setAppliedCoupon(coupon)}\n                    onCouponRemoved={() => setAppliedCoupon(null)}\n                  />\n                  <Button \n                    onClick={handleStartSubscription} \n                    className=\"w-full\"\n                    data-testid=\"button-start-subscription\"\n                  >\n                    Upgrade to Pro (${finalPrice.toFixed(2)}/month)\n                  </Button>\n                </div>\n              )}\n              \n              {subscriptionStatus?.status === \"active\" && (\n                <>\n                  <Button \n                    onClick={handleManageBilling} \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    data-testid=\"button-manage-billing\"\n                  >\n                    <CreditCard className=\"w-4 h-4 mr-2\" />\n                    Manage Billing\n                  </Button>\n                  <Button \n                    onClick={handleCancelSubscription} \n                    variant=\"outline\" \n                    className=\"w-full text-red-600 hover:text-red-700\"\n                    data-testid=\"button-cancel-subscription\"\n                  >\n                    Cancel Subscription\n                  </Button>\n                </>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Features */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Zap className=\"w-5 h-5\" />\n              Pro Features\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                <div>\n                  <p className=\"font-medium\">AI-Powered Legal Analytics</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Case outcome prediction and judge behavior analysis\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                <div>\n                  <p className=\"font-medium\">Automated Brief Generation</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Professional legal briefs with customizable templates\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                <div>\n                  <p className=\"font-medium\">Advanced Case Management</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Unlimited cases, documents, and timeline events\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                <div>\n                  <p className=\"font-medium\">Priority Support</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Get help when you need it most\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <Shield className=\"w-5 h-5 text-green-600 mt-0.5\" />\n                <div>\n                  <p className=\"font-medium\">Secure & Compliant</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Bank-level security for your sensitive legal data\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <Separator className=\"my-4\" />\n\n            <div className=\"text-center space-y-2\">\n              {appliedCoupon?.valid && appliedCoupon.discountAmount && (\n                <div className=\"space-y-1\">\n                  <p className=\"text-lg text-gray-500 line-through\">${MONTHLY_PRICE.toFixed(2)}</p>\n                  <p className=\"text-sm text-green-600\">Save ${appliedCoupon.discountAmount.toFixed(2)}</p>\n                </div>\n              )}\n              <p className=\"text-2xl font-bold\">\n                ${finalPrice.toFixed(2)}\n                <span className=\"text-sm font-normal text-muted-foreground\">/month</span>\n              </p>\n              <p className=\"text-sm text-muted-foreground\">14-day free trial â¢ Cancel anytime</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Payment Form */}\n      {clientSecret && (\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle>Complete Your Subscription</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Elements stripe={stripePromise} options={{ clientSecret }}>\n              <SubscriptionForm \n                clientSecret={clientSecret} \n                appliedCoupon={appliedCoupon}\n                onSuccess={() => {\n                  setClientSecret(null);\n                  setAppliedCoupon(null);\n                  loadSubscriptionStatus();\n                }} \n              />\n            </Elements>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":16382},"client/src/pages/video-evidence.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Play, Download, Upload, Grid, List, Camera, Video as VideoIcon } from \"lucide-react\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { CASE_DOCUMENTS, Doc } from \"@/lib/case-data\";\nimport type { UploadResult } from \"@uppy/core\";\n\nexport default function VideoEvidence() {\n  const [selectedVideo, setSelectedVideo] = useState<Doc | null>(null);\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [filterQuality, setFilterQuality] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const handleExport = () => {\n    window.print();\n  };\n\n  const handleUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    console.log(\"Video upload completed:\", result);\n    if (result.successful && result.successful.length > 0) {\n      console.log('Video files uploaded successfully:', result.successful.map(file => file.name));\n    }\n  };\n\n  const getUploadParameters = async () => {\n    try {\n      const response = await fetch('/api/objects/upload', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n      });\n      const data = await response.json();\n      return { method: 'PUT' as const, url: data.uploadURL };\n    } catch (error) {\n      console.error('Failed to get upload URL:', error);\n      throw error;\n    }\n  };\n\n  // Filter video evidence items\n  const videoItems = CASE_DOCUMENTS.filter(doc => doc.type === \"video\");\n\n  const filteredVideos = videoItems.filter(item => {\n    if (searchQuery.trim()) {\n      const searchLower = searchQuery.toLowerCase();\n      return (\n        item.title.toLowerCase().includes(searchLower) ||\n        item.summary?.toLowerCase().includes(searchLower) ||\n        item.tags?.some(tag => tag.toLowerCase().includes(searchLower))\n      );\n    }\n    return true;\n  });\n\n  const videoStats = {\n    total: videoItems.length,\n    hours: Math.floor(videoItems.length * 1.5), // Estimated total hours\n    evidence: videoItems.filter(item => item.tags?.includes(\"evidence\")).length,\n    surveillance: videoItems.filter(item => item.tags?.includes(\"surveillance\")).length,\n  };\n\n  const renderVideoPreview = (item: Doc) => (\n    <div className=\"w-full h-48 bg-gradient-to-br from-chart-4/20 to-chart-1/20 flex items-center justify-center rounded-lg border\">\n      <div className=\"text-center\">\n        <Play className=\"w-16 h-16 text-chart-4 mx-auto mb-3\" />\n        <span className=\"text-sm font-medium text-chart-4\">Video Evidence</span>\n        <p className=\"text-xs text-muted-foreground mt-1\">Click to play</p>\n      </div>\n    </div>\n  );\n\n  const renderListView = (item: Doc) => (\n    <Card key={item.id} className=\"rounded-xl mb-4\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start gap-4\">\n          <div className=\"w-24 h-16 bg-chart-4/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n            <Play className=\"w-6 h-6 text-chart-4\" />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-semibold text-sm mb-1 line-clamp-1\">{item.title}</h3>\n            <p className=\"text-xs text-muted-foreground mb-2 line-clamp-2\">{item.summary}</p>\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {item.type.toUpperCase()}\n              </Badge>\n              <span className=\"text-xs text-muted-foreground\">{item.date}</span>\n            </div>\n            {item.tags && (\n              <div className=\"flex flex-wrap gap-1\">\n                {item.tags.slice(0, 3).map((tag) => (\n                  <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                    {tag}\n                  </Badge>\n                ))}\n                {item.tags.length > 3 && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    +{item.tags.length - 3}\n                  </Badge>\n                )}\n              </div>\n            )}\n          </div>\n          <div className=\"flex flex-col gap-2\">\n            <Button\n              size=\"sm\"\n              onClick={() => setSelectedVideo(item)}\n              data-testid={`video-view-${item.id}`}\n            >\n              <Play className=\"w-4 h-4 mr-2\" />\n              Play\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <Header\n        title=\"Video Evidence\"\n        subtitle=\"Video documentation and evidence files\"\n        onSearch={handleSearch}\n        onExport={handleExport}\n        searchPlaceholder=\"Search video evidence...\"\n      />\n\n      {/* Video Stats */}\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"rounded-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"w-12 h-12 bg-chart-4/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n              <VideoIcon className=\"w-6 h-6 text-chart-4\" />\n            </div>\n            <div className=\"text-2xl font-bold text-chart-4\">{videoStats.total}</div>\n            <div className=\"text-sm text-muted-foreground\">Total Videos</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"rounded-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n              <Play className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div className=\"text-2xl font-bold text-primary\">{videoStats.hours}h</div>\n            <div className=\"text-sm text-muted-foreground\">Total Runtime</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"rounded-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n              <Camera className=\"w-6 h-6 text-chart-2\" />\n            </div>\n            <div className=\"text-2xl font-bold text-chart-2\">{videoStats.evidence}</div>\n            <div className=\"text-sm text-muted-foreground\">Evidence Videos</div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"rounded-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center mx-auto mb-3\">\n              <VideoIcon className=\"w-6 h-6 text-destructive\" />\n            </div>\n            <div className=\"text-2xl font-bold text-destructive\">{videoStats.surveillance}</div>\n            <div className=\"text-sm text-muted-foreground\">Surveillance</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Controls */}\n      <Card className=\"rounded-xl\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-wrap items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <label className=\"text-sm font-medium\">Quality:</label>\n                <Select value={filterQuality} onValueChange={setFilterQuality}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"video-quality-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Quality</SelectItem>\n                    <SelectItem value=\"4k\">4K</SelectItem>\n                    <SelectItem value=\"1080p\">1080p</SelectItem>\n                    <SelectItem value=\"720p\">720p</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Input\n                placeholder=\"Search video evidence...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-64\"\n                data-testid=\"video-search-input\"\n              />\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <ObjectUploader\n                maxNumberOfFiles={5}\n                maxFileSize={524288000} // 500MB for video files\n                allowedFileTypes={['.mp4', '.mov', '.avi', '.mkv', '.webm']}\n                onGetUploadParameters={getUploadParameters}\n                onComplete={handleUploadComplete}\n                buttonClassName=\"gap-2\"\n              >\n                <Upload className=\"w-4 h-4\" />\n                Upload Videos\n              </ObjectUploader>\n\n              <div className=\"flex items-center gap-1 border rounded-lg p-1\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"grid\")}\n                  data-testid=\"video-grid-view\"\n                >\n                  <Grid className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"list\")}\n                  data-testid=\"video-list-view\"\n                >\n                  <List className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Video Gallery */}\n      {filteredVideos.length > 0 ? (\n        <Card className=\"rounded-xl\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <VideoIcon className=\"w-5 h-5\" />\n              Video Evidence ({filteredVideos.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {viewMode === \"grid\" ? (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {filteredVideos.map((video) => (\n                  <Card\n                    key={video.id}\n                    className=\"rounded-xl cursor-pointer hover:shadow-lg transition-shadow\"\n                    onClick={() => setSelectedVideo(video)}\n                    data-testid={`video-card-${video.id}`}\n                  >\n                    <CardContent className=\"p-4\">\n                      {renderVideoPreview(video)}\n                      <div className=\"mt-3\">\n                        <h3 className=\"font-semibold text-sm mb-1 line-clamp-2\">{video.title}</h3>\n                        <p className=\"text-xs text-muted-foreground mb-2 line-clamp-2\">{video.summary}</p>\n                        <div className=\"flex items-center justify-between\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {video.type.toUpperCase()}\n                          </Badge>\n                          <span className=\"text-xs text-muted-foreground\">{video.date}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredVideos.map(renderListView)}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <Card className=\"rounded-xl\">\n          <CardContent className=\"p-12 text-center\">\n            <VideoIcon className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground/50\" />\n            <h3 className=\"text-lg font-medium mb-2\">No video evidence found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchQuery \n                ? `No videos match your search for \"${searchQuery}\"`\n                : \"Upload video evidence to get started\"\n              }\n            </p>\n            <ObjectUploader\n              maxNumberOfFiles={5}\n              maxFileSize={524288000} // 500MB\n              allowedFileTypes={['.mp4', '.mov', '.avi', '.mkv', '.webm']}\n              onGetUploadParameters={getUploadParameters}\n              onComplete={handleUploadComplete}\n              buttonClassName=\"gap-2\"\n            >\n              <Upload className=\"w-4 h-4\" />\n              Upload First Video\n            </ObjectUploader>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Video Detail Modal */}\n      {selectedVideo && (\n        <Dialog open={true} onOpenChange={() => setSelectedVideo(null)}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <Play className=\"w-5 h-5\" />\n                {selectedVideo.title}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"space-y-6\">\n              {/* Video Player Placeholder */}\n              <div className=\"w-full h-64 bg-gradient-to-br from-chart-4/20 to-chart-1/20 flex items-center justify-center rounded-lg border\">\n                <div className=\"text-center\">\n                  <Play className=\"w-20 h-20 text-chart-4 mx-auto mb-4\" />\n                  <p className=\"text-lg font-medium text-chart-4\">Video Player</p>\n                  <p className=\"text-sm text-muted-foreground\">Video playback would appear here</p>\n                </div>\n              </div>\n\n              {/* Video Details */}\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"font-semibold mb-2\">Details</h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <div><span className=\"font-medium\">Type:</span> {selectedVideo.type}</div>\n                    <div><span className=\"font-medium\">Date:</span> {selectedVideo.date}</div>\n                    <div><span className=\"font-medium\">Source:</span> {selectedVideo.sourceNote}</div>\n                  </div>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-semibold mb-2\">Tags</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedVideo.tags?.map((tag) => (\n                      <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold mb-2\">Summary</h3>\n                <p className=\"text-sm text-muted-foreground\">{selectedVideo.summary}</p>\n              </div>\n\n              <div className=\"flex gap-3\">\n                <Button>\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  Play Video\n                </Button>\n                <Button variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}","size_bytes":15662},"server/auth-routes.ts":{"content":"import { Router } from \"express\";\nimport { AuthService, type AuthRequest } from \"./auth\";\nimport { insertUserSchema, loginSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst router = Router();\n\n// Enhanced registration schema with validation\nconst registrationSchema = insertUserSchema.extend({\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters\")\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, \"Password must contain at least one lowercase letter, one uppercase letter, and one number\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// Register endpoint\nrouter.post(\"/register\", async (req, res) => {\n  try {\n    const validation = registrationSchema.safeParse(req.body);\n    \n    if (!validation.success) {\n      return res.status(400).json({\n        error: \"Validation failed\",\n        details: validation.error.format(),\n      });\n    }\n\n    const { confirmPassword, ...userData } = validation.data;\n    const result = await AuthService.register(userData);\n\n    if (\"error\" in result) {\n      return res.status(400).json({ error: result.error });\n    }\n\n    // Set session cookie\n    AuthService.setSessionCookie(res, result.sessionId);\n\n    // Don't send password back\n    const { password, ...userWithoutPassword } = result.user;\n    \n    res.status(201).json({\n      message: \"Registration successful\",\n      user: userWithoutPassword,\n    });\n  } catch (error) {\n    console.error(\"Registration endpoint error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Login endpoint\nrouter.post(\"/login\", async (req, res) => {\n  try {\n    const validation = loginSchema.safeParse(req.body);\n    \n    if (!validation.success) {\n      return res.status(400).json({\n        error: \"Validation failed\",\n        details: validation.error.format(),\n      });\n    }\n\n    const { usernameOrEmail, password } = validation.data;\n    const result = await AuthService.login(usernameOrEmail, password);\n\n    if (\"error\" in result) {\n      return res.status(401).json({ error: result.error });\n    }\n\n    // Set session cookie\n    AuthService.setSessionCookie(res, result.sessionId);\n\n    // Don't send password back\n    const { password: _, ...userWithoutPassword } = result.user;\n    \n    res.json({\n      message: \"Login successful\",\n      user: userWithoutPassword,\n    });\n  } catch (error) {\n    console.error(\"Login endpoint error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Logout endpoint\nrouter.post(\"/logout\", async (req: AuthRequest, res) => {\n  try {\n    const sessionId = req.cookies?.session_id;\n    \n    if (sessionId) {\n      await AuthService.deleteSession(sessionId);\n    }\n    \n    AuthService.clearSessionCookie(res);\n    \n    res.json({ message: \"Logout successful\" });\n  } catch (error) {\n    console.error(\"Logout endpoint error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Get current user endpoint\nrouter.get(\"/me\", async (req: AuthRequest, res) => {\n  try {\n    const sessionId = req.cookies?.session_id;\n    \n    if (!sessionId) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const user = await AuthService.getSessionUser(sessionId);\n    \n    if (!user) {\n      AuthService.clearSessionCookie(res);\n      return res.status(401).json({ error: \"Invalid or expired session\" });\n    }\n\n    // Don't send password back\n    const { password, ...userWithoutPassword } = user;\n    \n    res.json({ user: userWithoutPassword });\n  } catch (error) {\n    console.error(\"Get current user error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Check authentication status\nrouter.get(\"/status\", async (req: AuthRequest, res) => {\n  try {\n    const sessionId = req.cookies?.session_id;\n    \n    if (!sessionId) {\n      return res.json({ authenticated: false });\n    }\n\n    const user = await AuthService.getSessionUser(sessionId);\n    \n    res.json({ \n      authenticated: !!user,\n      user: user ? { id: user.id, username: user.username, email: user.email, role: user.role } : null\n    });\n  } catch (error) {\n    console.error(\"Auth status error:\", error);\n    res.json({ authenticated: false });\n  }\n});\n\nexport default router;","size_bytes":4367},"server/auth.ts":{"content":"import bcrypt from \"bcryptjs\";\nimport { eq, or, sql } from \"drizzle-orm\";\nimport { db } from \"./db\";\nimport { users, sessions, type User } from \"@shared/schema\";\nimport type { Request, Response, NextFunction } from \"express\";\nimport crypto from \"crypto\";\n\nexport interface AuthRequest extends Request {\n  user?: User;\n}\n\nexport class AuthService {\n  private static readonly SESSION_COOKIE_NAME = \"session_id\";\n  private static readonly SESSION_DURATION_DAYS = 30;\n\n  static async hashPassword(password: string): Promise<string> {\n    return bcrypt.hash(password, 12);\n  }\n\n  static async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(password, hashedPassword);\n  }\n\n  static generateSessionId(): string {\n    return crypto.randomBytes(32).toString(\"hex\");\n  }\n\n  static async createSession(userId: string): Promise<string> {\n    const sessionId = this.generateSessionId();\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + this.SESSION_DURATION_DAYS);\n\n    await db.insert(sessions).values({\n      id: sessionId,\n      userId,\n      expiresAt,\n    });\n\n    return sessionId;\n  }\n\n  static async getSessionUser(sessionId: string): Promise<User | null> {\n    const result = await db\n      .select()\n      .from(sessions)\n      .innerJoin(users, eq(sessions.userId, users.id))\n      .where(eq(sessions.id, sessionId))\n      .limit(1);\n\n    if (result.length === 0) {\n      return null;\n    }\n\n    const session = result[0].sessions;\n    const user = result[0].users;\n\n    // Check if session is expired\n    if (new Date() > session.expiresAt) {\n      await this.deleteSession(sessionId);\n      return null;\n    }\n\n    return user;\n  }\n\n  static async deleteSession(sessionId: string): Promise<void> {\n    await db.delete(sessions).where(eq(sessions.id, sessionId));\n  }\n\n  static async cleanupExpiredSessions(): Promise<void> {\n    await db.delete(sessions).where(sql`expires_at < NOW()`);\n  }\n\n  static async register(userData: {\n    username: string;\n    email: string;\n    password: string;\n    firstName?: string;\n    lastName?: string;\n  }): Promise<{ user: User; sessionId: string } | { error: string }> {\n    try {\n      // Check if username or email already exists\n      const existingUser = await db\n        .select()\n        .from(users)\n        .where(or(eq(users.username, userData.username), eq(users.email, userData.email)))\n        .limit(1);\n\n      if (existingUser.length > 0) {\n        if (existingUser[0].username === userData.username) {\n          return { error: \"Username already exists\" };\n        }\n        return { error: \"Email already exists\" };\n      }\n\n      // Hash password\n      const hashedPassword = await this.hashPassword(userData.password);\n\n      // Set trial end date (2 weeks from now)\n      const trialEndsAt = new Date();\n      trialEndsAt.setDate(trialEndsAt.getDate() + 14);\n\n      // Create user with trial\n      const newUser = await db\n        .insert(users)\n        .values({\n          ...userData,\n          password: hashedPassword,\n          subscriptionStatus: \"trial\",\n          trialEndsAt,\n        })\n        .returning();\n\n      const user = newUser[0];\n\n      // Create session\n      const sessionId = await this.createSession(user.id);\n\n      return { user, sessionId };\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      return { error: \"Registration failed\" };\n    }\n  }\n\n  static async login(usernameOrEmail: string, password: string): Promise<{ user: User; sessionId: string } | { error: string }> {\n    try {\n      // Find user by username or email\n      const userResult = await db\n        .select()\n        .from(users)\n        .where(or(eq(users.username, usernameOrEmail), eq(users.email, usernameOrEmail)))\n        .limit(1);\n\n      if (userResult.length === 0) {\n        return { error: \"Invalid credentials\" };\n      }\n\n      const user = userResult[0];\n\n      if (!user.isActive) {\n        return { error: \"Account is deactivated\" };\n      }\n\n      // Verify password\n      const isPasswordValid = await this.verifyPassword(password, user.password);\n      if (!isPasswordValid) {\n        return { error: \"Invalid credentials\" };\n      }\n\n      // Update last login\n      await db\n        .update(users)\n        .set({ lastLoginAt: new Date() })\n        .where(eq(users.id, user.id));\n\n      // Create session\n      const sessionId = await this.createSession(user.id);\n\n      return { user, sessionId };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { error: \"Login failed\" };\n    }\n  }\n\n  static setSessionCookie(res: Response, sessionId: string): void {\n    res.cookie(this.SESSION_COOKIE_NAME, sessionId, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\",\n      maxAge: this.SESSION_DURATION_DAYS * 24 * 60 * 60 * 1000, // 30 days in milliseconds\n    });\n  }\n\n  static clearSessionCookie(res: Response): void {\n    res.clearCookie(this.SESSION_COOKIE_NAME);\n  }\n}\n\n// Authentication middleware\nexport async function authenticateUser(req: AuthRequest, res: Response, next: NextFunction): Promise<void> {\n  try {\n    const sessionId = req.cookies?.session_id;\n    \n    if (!sessionId) {\n      res.status(401).json({ error: \"Authentication required\" });\n      return;\n    }\n\n    const user = await AuthService.getSessionUser(sessionId);\n    \n    if (!user) {\n      AuthService.clearSessionCookie(res);\n      res.status(401).json({ error: \"Invalid or expired session\" });\n      return;\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    console.error(\"Authentication middleware error:\", error);\n    res.status(500).json({ error: \"Authentication error\" });\n  }\n}\n\n// Optional authentication middleware (doesn't require auth)\nexport async function optionalAuth(req: AuthRequest, res: Response, next: NextFunction): Promise<void> {\n  try {\n    const sessionId = req.cookies?.session_id;\n    \n    if (sessionId) {\n      const user = await AuthService.getSessionUser(sessionId);\n      if (user) {\n        req.user = user;\n      }\n    }\n    \n    next();\n  } catch (error) {\n    console.error(\"Optional auth middleware error:\", error);\n    next(); // Continue even if auth fails\n  }\n}","size_bytes":6254},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/legal-analytics.ts":{"content":"// Legal Analytics AI Backend Service\n\nimport Anthropic from '@anthropic-ai/sdk';\nimport type { Request, Response } from 'express';\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n});\n\n// The newest Anthropic model\nconst DEFAULT_MODEL_STR = \"claude-sonnet-4-20250514\";\n\nexport class LegalAnalyticsService {\n  \n  static async predictCaseOutcome(req: Request, res: Response) {\n    try {\n      const { case: caseData, timeline, documents, legalIssues } = req.body;\n      \n      const prompt = `You are a legal AI analyst specializing in case outcome prediction. Analyze the following case data and provide a comprehensive prediction.\n\nCase Information:\n- Title: ${caseData.title}\n- Type: ${caseData.caseType}\n- Description: ${caseData.description}\n- Court: ${caseData.court}\n- Opposing Party: ${caseData.opposingParty}\n\nTimeline Events: ${JSON.stringify(timeline, null, 2)}\n\nDocuments: ${JSON.stringify(documents, null, 2)}\n\nLegal Issues: ${JSON.stringify(legalIssues, null, 2)}\n\nProvide a detailed analysis with:\n1. Success likelihood (0-100%)\n2. Confidence level in prediction (0-100%)\n3. Key factors supporting success\n4. Risk factors that could lead to unfavorable outcome\n5. Case strengths\n6. Strategic recommendations\n\nFormat your response as a JSON object with the structure:\n{\n  \"successLikelihood\": number,\n  \"confidence\": number,\n  \"keyFactors\": [\"factor1\", \"factor2\"],\n  \"riskFactors\": [\"risk1\", \"risk2\"],\n  \"strengths\": [\"strength1\", \"strength2\"],\n  \"recommendations\": [\"rec1\", \"rec2\"],\n  \"similarCases\": [\n    {\n      \"id\": \"case-id\",\n      \"title\": \"Case Title\",\n      \"jurisdiction\": \"Court Name\",\n      \"outcome\": \"won|lost|settled\",\n      \"similarity\": number,\n      \"keyFactors\": [\"factor1\"],\n      \"year\": number\n    }\n  ]\n}`;\n\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 2000,\n        system: \"You are a legal AI analyst with expertise in case outcome prediction and legal strategy. Provide accurate, detailed analysis based on the case information provided.\",\n        messages: [{ role: 'user', content: prompt }],\n      });\n\n      const analysisText = response.content[0].text;\n      const analysis = JSON.parse(analysisText);\n      \n      res.json(analysis);\n    } catch (error) {\n      console.error('Error predicting case outcome:', error);\n      res.status(500).json({ error: 'Failed to predict case outcome' });\n    }\n  }\n\n  static async analyzeJudge(req: Request, res: Response) {\n    try {\n      const { judgeName, court } = req.body;\n      \n      const prompt = `You are a legal AI analyst specializing in judicial analytics. Analyze the following judge and provide comprehensive insights.\n\nJudge: ${judgeName}\nCourt: ${court}\n\nProvide detailed analytics including:\n1. Ruling tendencies and patterns\n2. Average case duration\n3. Success rates for different case types\n4. Recent trends in rulings\n5. Strategic recommendations for appearing before this judge\n\nFormat your response as JSON:\n{\n  \"judgeName\": \"${judgeName}\",\n  \"court\": \"${court}\",\n  \"totalCases\": number,\n  \"rulingTendencies\": {\n    \"plaintiffFavorable\": number,\n    \"defendantFavorable\": number,\n    \"settlements\": number\n  },\n  \"averageCaseDuration\": number,\n  \"caseTypes\": [\n    {\n      \"type\": \"case type\",\n      \"count\": number,\n      \"successRate\": number\n    }\n  ],\n  \"recentTrends\": [\"trend1\", \"trend2\"],\n  \"recommendations\": [\"rec1\", \"rec2\"]\n}`;\n\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 1500,\n        system: \"You are a judicial analytics expert with access to comprehensive court data and judicial behavior patterns. Provide realistic and helpful insights.\",\n        messages: [{ role: 'user', content: prompt }],\n      });\n\n      const analysisText = response.content[0].text;\n      const analysis = JSON.parse(analysisText);\n      \n      res.json(analysis);\n    } catch (error) {\n      console.error('Error analyzing judge:', error);\n      res.status(500).json({ error: 'Failed to analyze judge' });\n    }\n  }\n\n  static async findRelevantPrecedents(req: Request, res: Response) {\n    try {\n      const { case: caseData, legalIssues } = req.body;\n      \n      const prompt = `You are a legal research AI specializing in finding relevant case precedents. Analyze the case and identify the most relevant precedential cases.\n\nCase Information:\n- Title: ${caseData.title}\n- Type: ${caseData.caseType}\n- Description: ${caseData.description}\n- Legal Issues: ${JSON.stringify(legalIssues, null, 2)}\n\nFind and analyze relevant precedents, focusing on:\n1. Cases with similar legal issues\n2. Cases in the same jurisdiction or circuit\n3. Landmark cases that established relevant principles\n4. Recent cases that may have changed the legal landscape\n\nFormat response as JSON array:\n[\n  {\n    \"id\": \"unique-id\",\n    \"caseName\": \"Case Name\",\n    \"citation\": \"Citation\",\n    \"year\": number,\n    \"court\": \"Court Name\",\n    \"relevanceScore\": number,\n    \"keyHolding\": \"Key legal holding\",\n    \"factualSimilarity\": number,\n    \"legalPrinciples\": [\"principle1\", \"principle2\"],\n    \"applicationSuggestions\": [\"suggestion1\", \"suggestion2\"]\n  }\n]`;\n\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 2000,\n        system: \"You are a legal research expert with comprehensive knowledge of case law, precedents, and legal principles. Provide accurate citations and relevant legal analysis.\",\n        messages: [{ role: 'user', content: prompt }],\n      });\n\n      const analysisText = response.content[0].text;\n      const precedents = JSON.parse(analysisText);\n      \n      res.json(precedents);\n    } catch (error) {\n      console.error('Error finding precedents:', error);\n      res.status(500).json({ error: 'Failed to find precedents' });\n    }\n  }\n\n  static async generateStrategyRecommendations(req: Request, res: Response) {\n    try {\n      const { case: caseData, timeline, documents, legalIssues } = req.body;\n      \n      const prompt = `You are a legal strategy AI advisor. Analyze the case and provide comprehensive strategic recommendations.\n\nCase Information:\n- Title: ${caseData.title}\n- Type: ${caseData.caseType}\n- Description: ${caseData.description}\n- Timeline: ${JSON.stringify(timeline, null, 2)}\n- Documents: ${JSON.stringify(documents, null, 2)}\n- Legal Issues: ${JSON.stringify(legalIssues, null, 2)}\n\nProvide strategic recommendations covering:\n1. Motions to file\n2. Discovery strategies\n3. Settlement considerations\n4. Trial preparation\n5. Appeal possibilities\n\nFormat as JSON array:\n[\n  {\n    \"priority\": \"high|medium|low\",\n    \"category\": \"motion|discovery|settlement|trial|appeal\",\n    \"title\": \"Strategy Title\",\n    \"description\": \"Detailed description\",\n    \"reasoning\": \"Why this strategy is recommended\",\n    \"expectedOutcome\": \"Expected result\",\n    \"timeframe\": \"When to implement\",\n    \"risks\": [\"risk1\", \"risk2\"],\n    \"benefits\": [\"benefit1\", \"benefit2\"],\n    \"nextSteps\": [\"step1\", \"step2\"]\n  }\n]`;\n\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 2500,\n        system: \"You are a senior legal strategist with expertise in case management, litigation strategy, and legal tactics. Provide practical, actionable recommendations.\",\n        messages: [{ role: 'user', content: prompt }],\n      });\n\n      const analysisText = response.content[0].text;\n      const strategies = JSON.parse(analysisText);\n      \n      res.json(strategies);\n    } catch (error) {\n      console.error('Error generating strategy recommendations:', error);\n      res.status(500).json({ error: 'Failed to generate strategy recommendations' });\n    }\n  }\n\n  static async analyzeEvidence(req: Request, res: Response) {\n    try {\n      const { evidence } = req.body;\n      \n      const prompt = `You are a legal evidence analyst. Analyze the provided evidence and assess its strength and weaknesses.\n\nEvidence Items: ${JSON.stringify(evidence, null, 2)}\n\nProvide analysis including:\n1. Overall strength score (0-100)\n2. Weaknesses in the evidence\n3. Recommendations for strengthening the case\n\nFormat as JSON:\n{\n  \"strengthScore\": number,\n  \"weaknesses\": [\"weakness1\", \"weakness2\"],\n  \"recommendations\": [\"rec1\", \"rec2\"]\n}`;\n\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 1000,\n        system: \"You are an evidence analysis expert with deep knowledge of legal standards, admissibility rules, and evidence evaluation.\",\n        messages: [{ role: 'user', content: prompt }],\n      });\n\n      const analysisText = response.content[0].text;\n      const analysis = JSON.parse(analysisText);\n      \n      res.json(analysis);\n    } catch (error) {\n      console.error('Error analyzing evidence:', error);\n      res.status(500).json({ error: 'Failed to analyze evidence' });\n    }\n  }\n\n  static async findSimilarCases(req: Request, res: Response) {\n    try {\n      const { case: caseData, legalIssues } = req.body;\n      \n      const prompt = `You are a legal case comparison AI. Find and analyze cases similar to the provided case.\n\nCase Information:\n- Title: ${caseData.title}\n- Type: ${caseData.caseType}\n- Description: ${caseData.description}\n- Legal Issues: ${JSON.stringify(legalIssues, null, 2)}\n\nFind similar cases and rate their similarity. Focus on:\n1. Factual similarity\n2. Legal issues overlap\n3. Jurisdictional relevance\n4. Outcomes and their relevance\n\nFormat as JSON array:\n[\n  {\n    \"id\": \"case-id\",\n    \"title\": \"Case Title\",\n    \"jurisdiction\": \"Court/Jurisdiction\",\n    \"outcome\": \"won|lost|settled\",\n    \"similarity\": number,\n    \"keyFactors\": [\"factor1\", \"factor2\"],\n    \"year\": number\n  }\n]`;\n\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 1500,\n        system: \"You are a case comparison expert with access to comprehensive legal databases. Provide accurate case comparisons and similarity assessments.\",\n        messages: [{ role: 'user', content: prompt }],\n      });\n\n      const analysisText = response.content[0].text;\n      const similarCases = JSON.parse(analysisText);\n      \n      res.json(similarCases);\n    } catch (error) {\n      console.error('Error finding similar cases:', error);\n      res.status(500).json({ error: 'Failed to find similar cases' });\n    }\n  }\n}","size_bytes":10396},"server/subscription-middleware.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { SubscriptionService } from \"./subscription\";\nimport { AuthRequest } from \"./auth\";\n\nexport interface SubscriptionRequest extends AuthRequest {\n  hasActiveSubscription?: boolean;\n  subscriptionStatus?: {\n    status: string;\n    isTrialActive: boolean;\n    isSubscriptionActive: boolean;\n  };\n}\n\nexport const checkSubscription = async (\n  req: SubscriptionRequest, \n  res: Response, \n  next: NextFunction\n) => {\n  try {\n    if (!req.user?.id) {\n      req.hasActiveSubscription = false;\n      return next();\n    }\n\n    const status = await SubscriptionService.getUserSubscriptionStatus(req.user.id);\n    req.hasActiveSubscription = status.isSubscriptionActive;\n    req.subscriptionStatus = status;\n    \n    next();\n  } catch (error) {\n    console.error(\"Error checking subscription:\", error);\n    req.hasActiveSubscription = false;\n    next();\n  }\n};\n\nexport const requireActiveSubscription = (\n  req: SubscriptionRequest, \n  res: Response, \n  next: NextFunction\n) => {\n  // Allow in development mode for testing\n  if (process.env.NODE_ENV === 'development') {\n    return next();\n  }\n  \n  if (!req.hasActiveSubscription) {\n    return res.status(403).json({ \n      error: \"Active subscription required\",\n      trialEnded: req.subscriptionStatus?.status === \"trial\" && !req.subscriptionStatus?.isTrialActive\n    });\n  }\n  next();\n};","size_bytes":1395},"server/subscription-routes.ts":{"content":"import { Router } from \"express\";\nimport { SubscriptionService } from \"./subscription\";\nimport { authenticateUser, type AuthRequest } from \"./auth\";\nimport Stripe from \"stripe\";\n\nconst router = Router();\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error(\"STRIPE_SECRET_KEY environment variable is required\");\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2023-10-16\",\n});\n\n// Get user's subscription status\nrouter.get(\"/status\", authenticateUser, async (req: AuthRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ error: \"User not authenticated\" });\n    }\n\n    const status = await SubscriptionService.getUserSubscriptionStatus(req.user.id);\n    res.json(status);\n  } catch (error) {\n    console.error(\"Error getting subscription status:\", error);\n    res.status(500).json({ error: \"Failed to get subscription status\" });\n  }\n});\n\n// Start subscription (for trial or paid)\nrouter.post(\"/start\", authenticateUser, async (req: AuthRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ error: \"User not authenticated\" });\n    }\n\n    const { subscription, clientSecret } = await SubscriptionService.getOrCreateSubscription(req.user.id);\n    \n    res.json({\n      subscriptionId: subscription.id,\n      status: subscription.status,\n      clientSecret,\n      trialEnd: subscription.trial_end ? new Date(subscription.trial_end * 1000) : null,\n    });\n  } catch (error) {\n    console.error(\"Error starting subscription:\", error);\n    res.status(500).json({ error: \"Failed to start subscription\" });\n  }\n});\n\n// Cancel subscription\nrouter.post(\"/cancel\", authenticateUser, async (req: AuthRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ error: \"User not authenticated\" });\n    }\n\n    await SubscriptionService.cancelSubscription(req.user.id);\n    res.json({ message: \"Subscription canceled successfully\" });\n  } catch (error) {\n    console.error(\"Error canceling subscription:\", error);\n    res.status(500).json({ error: \"Failed to cancel subscription\" });\n  }\n});\n\n// Get customer portal link\nrouter.post(\"/portal\", authenticateUser, async (req: AuthRequest, res) => {\n  try {\n    if (!req.user?.stripeCustomerId) {\n      return res.status(400).json({ error: \"No Stripe customer found\" });\n    }\n\n    const session = await stripe.billingPortal.sessions.create({\n      customer: req.user.stripeCustomerId,\n      return_url: `${req.protocol}://${req.get(\"host\")}/`,\n    });\n\n    res.json({ url: session.url });\n  } catch (error) {\n    console.error(\"Error creating portal session:\", error);\n    res.status(500).json({ error: \"Failed to create portal session\" });\n  }\n});\n\n// Webhook endpoint for Stripe events\nrouter.post(\"/webhook\", async (req, res) => {\n  const sig = req.headers[\"stripe-signature\"];\n  \n  if (!sig) {\n    return res.status(400).send(\"No signature provided\");\n  }\n\n  try {\n    const event = stripe.webhooks.constructEvent(\n      req.body,\n      sig,\n      process.env.STRIPE_WEBHOOK_SECRET || \"\"\n    );\n\n    await SubscriptionService.processWebhook(event);\n    res.json({ received: true });\n  } catch (err) {\n    console.error(\"Webhook signature verification failed:\", err);\n    return res.status(400).send(`Webhook Error: ${err}`);\n  }\n});\n\nexport default router;","size_bytes":3309},"server/subscription.ts":{"content":"import Stripe from \"stripe\";\nimport { eq } from \"drizzle-orm\";\nimport { db } from \"./db\";\nimport { users, type User } from \"@shared/schema\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error(\"STRIPE_SECRET_KEY environment variable is required\");\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2023-10-16\",\n});\n\nexport class SubscriptionService {\n  private static readonly PRICE_ID = \"price_casebuddy_monthly\"; // This will be created in Stripe dashboard\n  private static readonly TRIAL_DAYS = 14;\n\n  static async createCustomer(user: User): Promise<string> {\n    const customer = await stripe.customers.create({\n      email: user.email,\n      name: user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.username,\n      metadata: {\n        userId: user.id,\n      },\n    });\n\n    // Update user with Stripe customer ID\n    await db\n      .update(users)\n      .set({ stripeCustomerId: customer.id })\n      .where(eq(users.id, user.id));\n\n    return customer.id;\n  }\n\n  static async createTrialSubscription(customerId: string, userId: string): Promise<Stripe.Subscription> {\n    // For now, we'll create a trial period by setting trial_end timestamp\n    const trialEnd = Math.floor((Date.now() + (this.TRIAL_DAYS * 24 * 60 * 60 * 1000)) / 1000);\n\n    const subscription = await stripe.subscriptions.create({\n      customer: customerId,\n      items: [\n        {\n          price_data: {\n            currency: \"usd\",\n            product_data: {\n              name: \"CaseBuddy Pro\",\n              description: \"Your Legal Case Assistant - Professional Plan\",\n            },\n            recurring: {\n              interval: \"month\",\n            },\n            unit_amount: 1495, // $14.95 in cents\n          },\n        },\n      ],\n      trial_end: trialEnd,\n      payment_behavior: \"default_incomplete\",\n      expand: [\"latest_invoice.payment_intent\"],\n    });\n\n    // Update user with subscription details\n    const trialEndsAt = new Date(trialEnd * 1000);\n    await db\n      .update(users)\n      .set({\n        stripeSubscriptionId: subscription.id,\n        subscriptionStatus: \"trial\",\n        trialEndsAt,\n      })\n      .where(eq(users.id, userId));\n\n    return subscription;\n  }\n\n  static async getOrCreateSubscription(userId: string): Promise<{\n    subscription: Stripe.Subscription;\n    clientSecret?: string;\n  }> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n\n    // If user already has a subscription, return it\n    if (user.stripeSubscriptionId) {\n      const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId);\n      let clientSecret: string | undefined;\n\n      // If subscription needs payment, get client secret\n      if (subscription.status === \"incomplete\" && subscription.latest_invoice) {\n        const invoice = await stripe.invoices.retrieve(subscription.latest_invoice as string, {\n          expand: [\"payment_intent\"],\n        });\n        if (invoice.payment_intent && typeof invoice.payment_intent === \"object\") {\n          clientSecret = invoice.payment_intent.client_secret || undefined;\n        }\n      }\n\n      return { subscription, clientSecret };\n    }\n\n    // Create customer if doesn't exist\n    let customerId = user.stripeCustomerId;\n    if (!customerId) {\n      customerId = await this.createCustomer(user);\n    }\n\n    // Create trial subscription\n    const subscription = await this.createTrialSubscription(customerId, userId);\n    let clientSecret: string | undefined;\n\n    if (subscription.latest_invoice && typeof subscription.latest_invoice === \"object\") {\n      const paymentIntent = subscription.latest_invoice.payment_intent;\n      if (paymentIntent && typeof paymentIntent === \"object\") {\n        clientSecret = paymentIntent.client_secret || undefined;\n      }\n    }\n\n    return { subscription, clientSecret };\n  }\n\n  static async updateSubscriptionStatus(subscriptionId: string, status: string): Promise<void> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.stripeSubscriptionId, subscriptionId));\n\n    if (user) {\n      const updates: any = { subscriptionStatus: status };\n      \n      if (status === \"active\") {\n        // Calculate subscription end date (1 month from now)\n        const subscriptionEndsAt = new Date();\n        subscriptionEndsAt.setMonth(subscriptionEndsAt.getMonth() + 1);\n        updates.subscriptionEndsAt = subscriptionEndsAt;\n      }\n\n      await db\n        .update(users)\n        .set(updates)\n        .where(eq(users.id, user.id));\n    }\n  }\n\n  static async cancelSubscription(userId: string): Promise<void> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    if (!user?.stripeSubscriptionId) {\n      throw new Error(\"No active subscription found\");\n    }\n\n    await stripe.subscriptions.update(user.stripeSubscriptionId, {\n      cancel_at_period_end: true,\n    });\n\n    await db\n      .update(users)\n      .set({ subscriptionStatus: \"canceled\" })\n      .where(eq(users.id, userId));\n  }\n\n  static async getUserSubscriptionStatus(userId: string): Promise<{\n    status: string;\n    trialEndsAt?: Date;\n    subscriptionEndsAt?: Date;\n    isTrialActive: boolean;\n    isSubscriptionActive: boolean;\n  }> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    if (!user) {\n      throw new Error(\"User not found\");\n    }\n\n    const now = new Date();\n    const isTrialActive = user.trialEndsAt ? now < user.trialEndsAt : false;\n    const isSubscriptionActive = \n      user.subscriptionStatus === \"active\" || \n      (user.subscriptionStatus === \"trial\" && isTrialActive);\n\n    return {\n      status: user.subscriptionStatus || \"trial\",\n      trialEndsAt: user.trialEndsAt || undefined,\n      subscriptionEndsAt: user.subscriptionEndsAt || undefined,\n      isTrialActive,\n      isSubscriptionActive,\n    };\n  }\n\n  static async processWebhook(event: Stripe.Event): Promise<void> {\n    switch (event.type) {\n      case \"customer.subscription.updated\":\n      case \"customer.subscription.deleted\":\n        const subscription = event.data.object as Stripe.Subscription;\n        await this.updateSubscriptionStatus(subscription.id, subscription.status);\n        break;\n      \n      case \"invoice.payment_succeeded\":\n        const invoice = event.data.object as Stripe.Invoice;\n        if (invoice.subscription && typeof invoice.subscription === \"string\") {\n          await this.updateSubscriptionStatus(invoice.subscription, \"active\");\n        }\n        break;\n        \n      case \"invoice.payment_failed\":\n        const failedInvoice = event.data.object as Stripe.Invoice;\n        if (failedInvoice.subscription && typeof failedInvoice.subscription === \"string\") {\n          await this.updateSubscriptionStatus(failedInvoice.subscription, \"past_due\");\n        }\n        break;\n    }\n  }\n}","size_bytes":6926},"client/src/components/coupon-input.tsx":{"content":"import { useState } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { apiRequest } from '@/lib/queryClient';\nimport { CheckCircle, XCircle, Loader2, Percent, DollarSign } from 'lucide-react';\n\ninterface CouponValidationResult {\n  valid: boolean;\n  coupon?: {\n    id: number;\n    code: string;\n    description: string | null;\n    discountType: 'percentage' | 'fixed';\n    discountValue: string;\n  };\n  error?: string;\n  discountAmount?: number;\n  finalAmount?: number;\n}\n\ninterface CouponInputProps {\n  orderAmount: number;\n  planType?: string;\n  onCouponApplied: (coupon: CouponValidationResult) => void;\n  onCouponRemoved: () => void;\n}\n\nexport function CouponInput({ orderAmount, planType, onCouponApplied, onCouponRemoved }: CouponInputProps) {\n  const [couponCode, setCouponCode] = useState('');\n  const [isValidating, setIsValidating] = useState(false);\n  const [validationResult, setValidationResult] = useState<CouponValidationResult | null>(null);\n\n  const validateCoupon = async () => {\n    if (!couponCode.trim()) return;\n\n    setIsValidating(true);\n    try {\n      const response = await apiRequest('/api/coupons/validate', {\n        method: 'POST',\n        data: {\n          code: couponCode.trim().toUpperCase(),\n          orderAmount,\n          planType,\n        }\n      });\n\n      const result = response as CouponValidationResult;\n      setValidationResult(result);\n\n      if (result.valid) {\n        onCouponApplied(result);\n      }\n    } catch (error: any) {\n      setValidationResult({\n        valid: false,\n        error: error.message || 'Failed to validate coupon'\n      });\n    } finally {\n      setIsValidating(false);\n    }\n  };\n\n  const removeCoupon = () => {\n    setCouponCode('');\n    setValidationResult(null);\n    onCouponRemoved();\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      validateCoupon();\n    }\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex gap-2\">\n        <div className=\"flex-1\">\n          <Label htmlFor=\"couponCode\">Coupon Code (Optional)</Label>\n          <Input\n            id=\"couponCode\"\n            value={couponCode}\n            onChange={(e) => setCouponCode(e.target.value.toUpperCase())}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Enter coupon code\"\n            disabled={validationResult?.valid || isValidating}\n            data-testid=\"input-coupon-code\"\n          />\n        </div>\n        <div className=\"flex flex-col justify-end\">\n          {!validationResult?.valid ? (\n            <Button\n              type=\"button\"\n              onClick={validateCoupon}\n              disabled={!couponCode.trim() || isValidating}\n              variant=\"outline\"\n              data-testid=\"button-apply-coupon\"\n            >\n              {isValidating ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Checking...\n                </>\n              ) : (\n                'Apply'\n              )}\n            </Button>\n          ) : (\n            <Button\n              type=\"button\"\n              onClick={removeCoupon}\n              variant=\"outline\"\n              data-testid=\"button-remove-coupon\"\n            >\n              Remove\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Validation Result */}\n      {validationResult && (\n        <Card className={`border-2 ${validationResult.valid ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}`}>\n          <CardContent className=\"pt-4\">\n            <div className=\"flex items-start gap-3\">\n              {validationResult.valid ? (\n                <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5 flex-shrink-0\" />\n              ) : (\n                <XCircle className=\"w-5 h-5 text-red-600 mt-0.5 flex-shrink-0\" />\n              )}\n              \n              <div className=\"flex-1\">\n                {validationResult.valid && validationResult.coupon ? (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <code className=\"font-mono text-sm bg-white px-2 py-1 rounded border\">\n                        {validationResult.coupon.code}\n                      </code>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {validationResult.coupon.discountType === 'percentage' ? (\n                          <><Percent className=\"w-3 h-3 mr-1\" />{validationResult.coupon.discountValue}%</>\n                        ) : (\n                          <><DollarSign className=\"w-3 h-3 mr-1\" />${validationResult.coupon.discountValue}</>\n                        )}\n                      </Badge>\n                    </div>\n                    \n                    {validationResult.coupon.description && (\n                      <p className=\"text-sm text-gray-700\">\n                        {validationResult.coupon.description}\n                      </p>\n                    )}\n                    \n                    <div className=\"text-sm space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Original Amount:</span>\n                        <span className=\"font-medium\">${orderAmount.toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between text-green-700\">\n                        <span>Discount:</span>\n                        <span className=\"font-medium\">-${validationResult.discountAmount?.toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between border-t pt-1 font-bold text-lg\">\n                        <span>Final Amount:</span>\n                        <span>${validationResult.finalAmount?.toFixed(2)}</span>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-red-700\">\n                    <p className=\"font-medium\">Invalid coupon code</p>\n                    <p className=\"text-sm\">{validationResult.error}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":6472},"client/src/pages/admin-coupons.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Badge } from '@/components/ui/badge';\nimport { Eye, Plus, Edit, Trash2, TrendingUp, Copy } from 'lucide-react';\nimport { Switch } from '@/components/ui/switch';\n\ninterface CouponCode {\n  id: number;\n  code: string;\n  description: string | null;\n  discountType: 'percentage' | 'fixed';\n  discountValue: string;\n  maxUses: number | null;\n  currentUses: number;\n  validFrom: string;\n  validUntil: string | null;\n  isActive: boolean;\n  createdBy: string | null;\n  createdAt: string;\n  minOrderValue: string | null;\n  applicablePlans: string[] | null;\n}\n\ninterface CouponFormData {\n  code?: string;\n  description: string;\n  discountType: 'percentage' | 'fixed';\n  discountValue: string;\n  maxUses: string;\n  validFrom: string;\n  validUntil: string;\n  minOrderValue: string;\n  applicablePlans: string[];\n}\n\nexport default function AdminCoupons() {\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editingCoupon, setEditingCoupon] = useState<CouponCode | null>(null);\n  const [bulkDialogOpen, setBulkDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch coupons\n  const { data: couponsData, isLoading } = useQuery({\n    queryKey: ['/api/admin/coupons'],\n    retry: false,\n  });\n\n  const coupons: CouponCode[] = (couponsData as any)?.coupons || [];\n\n  // Fetch analytics\n  const { data: analyticsData } = useQuery({\n    queryKey: ['/api/admin/coupons/analytics'],\n    retry: false,\n  });\n\n  // Create coupon mutation\n  const createCouponMutation = useMutation({\n    mutationFn: (data: CouponFormData) => apiRequest('/api/admin/coupons', {\n      method: 'POST',\n      data: {\n        ...data,\n        maxUses: data.maxUses ? parseInt(data.maxUses) : null,\n        discountValue: parseFloat(data.discountValue),\n        minOrderValue: data.minOrderValue ? parseFloat(data.minOrderValue) : null,\n        validUntil: data.validUntil || null,\n      }\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/coupons'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/coupons/analytics'] });\n      setCreateDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Coupon created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create coupon\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update coupon mutation\n  const updateCouponMutation = useMutation({\n    mutationFn: ({ id, ...data }: CouponFormData & { id: number }) => \n      apiRequest(`/api/admin/coupons/${id}`, {\n        method: 'PUT',\n        data: {\n          ...data,\n          maxUses: data.maxUses ? parseInt(data.maxUses) : null,\n          discountValue: parseFloat(data.discountValue),\n          minOrderValue: data.minOrderValue ? parseFloat(data.minOrderValue) : null,\n          validUntil: data.validUntil || null,\n        }\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/coupons'] });\n      setEditingCoupon(null);\n      toast({\n        title: \"Success\",\n        description: \"Coupon updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update coupon\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Deactivate coupon mutation\n  const deactivateCouponMutation = useMutation({\n    mutationFn: (id: number) => apiRequest(`/api/admin/coupons/${id}`, {\n      method: 'DELETE'\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/coupons'] });\n      toast({\n        title: \"Success\",\n        description: \"Coupon deactivated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to deactivate coupon\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk create mutation\n  const bulkCreateMutation = useMutation({\n    mutationFn: (data: { template: CouponFormData, count: number, prefix: string }) => \n      apiRequest('/api/admin/coupons/bulk', {\n        method: 'POST',\n        data: {\n          template: {\n            ...data.template,\n            maxUses: data.template.maxUses ? parseInt(data.template.maxUses) : null,\n            discountValue: parseFloat(data.template.discountValue),\n            minOrderValue: data.template.minOrderValue ? parseFloat(data.template.minOrderValue) : null,\n            validUntil: data.template.validUntil || null,\n          },\n          count: data.count,\n          prefix: data.prefix,\n        }\n      }),\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/coupons'] });\n      setBulkDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: `${data.coupons?.length || 0} coupons created successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create coupons\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatCurrency = (amount: string | null) => {\n    if (!amount) return 'N/A';\n    return `$${parseFloat(amount).toFixed(2)}`;\n  };\n\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return 'No expiry';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: `Coupon code \"${text}\" copied to clipboard`,\n    });\n  };\n\n  const CouponForm = ({ \n    initialData, \n    onSubmit, \n    isLoading: submitting \n  }: { \n    initialData?: Partial<CouponCode>, \n    onSubmit: (data: CouponFormData) => void,\n    isLoading: boolean\n  }) => {\n    const [formData, setFormData] = useState<CouponFormData>({\n      code: initialData?.code || '',\n      description: initialData?.description || '',\n      discountType: (initialData?.discountType as 'percentage' | 'fixed') || 'percentage',\n      discountValue: initialData?.discountValue || '',\n      maxUses: initialData?.maxUses?.toString() || '1',\n      validFrom: initialData?.validFrom ? new Date(initialData.validFrom).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],\n      validUntil: initialData?.validUntil ? new Date(initialData.validUntil).toISOString().split('T')[0] : '',\n      minOrderValue: initialData?.minOrderValue || '',\n      applicablePlans: initialData?.applicablePlans || [],\n    });\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      onSubmit(formData);\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"form-coupon\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"code\">Coupon Code (optional)</Label>\n            <Input\n              id=\"code\"\n              value={formData.code}\n              onChange={(e) => setFormData({ ...formData, code: e.target.value })}\n              placeholder=\"Leave blank to auto-generate\"\n              data-testid=\"input-coupon-code\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"discountType\">Discount Type</Label>\n            <Select value={formData.discountType} onValueChange={(value: 'percentage' | 'fixed') => setFormData({ ...formData, discountType: value })}>\n              <SelectTrigger data-testid=\"select-discount-type\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"percentage\">Percentage</SelectItem>\n                <SelectItem value=\"fixed\">Fixed Amount</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"discountValue\">\n              {formData.discountType === 'percentage' ? 'Discount %' : 'Discount Amount ($)'}\n            </Label>\n            <Input\n              id=\"discountValue\"\n              type=\"number\"\n              step={formData.discountType === 'percentage' ? '1' : '0.01'}\n              max={formData.discountType === 'percentage' ? '100' : undefined}\n              value={formData.discountValue}\n              onChange={(e) => setFormData({ ...formData, discountValue: e.target.value })}\n              required\n              data-testid=\"input-discount-value\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"maxUses\">Max Uses (blank = unlimited)</Label>\n            <Input\n              id=\"maxUses\"\n              type=\"number\"\n              min=\"1\"\n              value={formData.maxUses}\n              onChange={(e) => setFormData({ ...formData, maxUses: e.target.value })}\n              placeholder=\"1\"\n              data-testid=\"input-max-uses\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"description\">Description</Label>\n          <Textarea\n            id=\"description\"\n            value={formData.description}\n            onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n            placeholder=\"Describe this coupon...\"\n            data-testid=\"input-description\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"validFrom\">Valid From</Label>\n            <Input\n              id=\"validFrom\"\n              type=\"date\"\n              value={formData.validFrom}\n              onChange={(e) => setFormData({ ...formData, validFrom: e.target.value })}\n              required\n              data-testid=\"input-valid-from\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"validUntil\">Valid Until (optional)</Label>\n            <Input\n              id=\"validUntil\"\n              type=\"date\"\n              value={formData.validUntil}\n              onChange={(e) => setFormData({ ...formData, validUntil: e.target.value })}\n              data-testid=\"input-valid-until\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"minOrderValue\">Minimum Order Value (optional)</Label>\n          <Input\n            id=\"minOrderValue\"\n            type=\"number\"\n            step=\"0.01\"\n            min=\"0\"\n            value={formData.minOrderValue}\n            onChange={(e) => setFormData({ ...formData, minOrderValue: e.target.value })}\n            placeholder=\"0.00\"\n            data-testid=\"input-min-order-value\"\n          />\n        </div>\n\n        <Button type=\"submit\" disabled={submitting} data-testid=\"button-submit-coupon\">\n          {submitting ? 'Saving...' : (initialData ? 'Update Coupon' : 'Create Coupon')}\n        </Button>\n      </form>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">Coupon Management</h1>\n          <p className=\"text-gray-600\">Create and manage promotional coupon codes</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={bulkDialogOpen} onOpenChange={setBulkDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" data-testid=\"button-bulk-create\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Bulk Create\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Bulk Create Coupons</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"bulkCount\">Number of Coupons (max 100)</Label>\n                  <Input\n                    id=\"bulkCount\"\n                    type=\"number\"\n                    min=\"1\"\n                    max=\"100\"\n                    defaultValue=\"10\"\n                    data-testid=\"input-bulk-count\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"bulkPrefix\">Code Prefix (optional)</Label>\n                  <Input\n                    id=\"bulkPrefix\"\n                    placeholder=\"SALE\"\n                    data-testid=\"input-bulk-prefix\"\n                  />\n                </div>\n                <Button \n                  onClick={() => {\n                    const countInput = document.getElementById('bulkCount') as HTMLInputElement;\n                    const prefixInput = document.getElementById('bulkPrefix') as HTMLInputElement;\n                    \n                    const template: CouponFormData = {\n                      description: 'Bulk generated coupon',\n                      discountType: 'percentage',\n                      discountValue: '10',\n                      maxUses: '1',\n                      validFrom: new Date().toISOString().split('T')[0],\n                      validUntil: '',\n                      minOrderValue: '',\n                      applicablePlans: [],\n                    };\n                    \n                    bulkCreateMutation.mutate({\n                      template,\n                      count: parseInt(countInput.value) || 10,\n                      prefix: prefixInput.value || '',\n                    });\n                  }}\n                  disabled={bulkCreateMutation.isPending}\n                  data-testid=\"button-create-bulk\"\n                >\n                  {bulkCreateMutation.isPending ? 'Creating...' : 'Create Coupons'}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          \n          <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-coupon\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Coupon\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Coupon</DialogTitle>\n              </DialogHeader>\n              <CouponForm \n                onSubmit={createCouponMutation.mutate} \n                isLoading={createCouponMutation.isPending}\n              />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Analytics Cards */}\n      {(analyticsData as any)?.analytics && (\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Total Coupons</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-coupons\">{coupons.length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Total Usage</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-usage\">{(analyticsData as any).analytics.totalUsage}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Total Discount Given</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-total-discount\">\n                ${(analyticsData as any).analytics.totalDiscountGiven.toFixed(2)}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">Avg Discount</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-avg-discount\">\n                ${(analyticsData as any).analytics.averageDiscountPerUse.toFixed(2)}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Coupons Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Active Coupons</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {coupons.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\" data-testid=\"text-no-coupons\">\n              No coupons created yet. Create your first coupon to get started.\n            </div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Code</TableHead>\n                  <TableHead>Type</TableHead>\n                  <TableHead>Discount</TableHead>\n                  <TableHead>Usage</TableHead>\n                  <TableHead>Valid Until</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {coupons.map((coupon) => (\n                  <TableRow key={coupon.id} data-testid={`row-coupon-${coupon.id}`}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <code className=\"font-mono text-sm bg-gray-100 px-2 py-1 rounded\">\n                          {coupon.code}\n                        </code>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard(coupon.code)}\n                          data-testid={`button-copy-${coupon.id}`}\n                        >\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                      {coupon.description && (\n                        <div className=\"text-sm text-gray-600 mt-1\">{coupon.description}</div>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">\n                        {coupon.discountType}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {coupon.discountType === 'percentage' \n                        ? `${coupon.discountValue}%` \n                        : formatCurrency(coupon.discountValue)\n                      }\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        {coupon.currentUses} / {coupon.maxUses || 'â'}\n                      </div>\n                      {coupon.maxUses && (\n                        <div className=\"w-full bg-gray-200 rounded-full h-2 mt-1\">\n                          <div \n                            className=\"bg-blue-600 h-2 rounded-full\" \n                            style={{ width: `${Math.min((coupon.currentUses / coupon.maxUses) * 100, 100)}%` }}\n                          />\n                        </div>\n                      )}\n                    </TableCell>\n                    <TableCell data-testid={`text-valid-until-${coupon.id}`}>\n                      {formatDate(coupon.validUntil)}\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={coupon.isActive ? \"default\" : \"secondary\"}>\n                        {coupon.isActive ? 'Active' : 'Inactive'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-1\">\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\" onClick={() => setEditingCoupon(coupon)} data-testid={`button-edit-${coupon.id}`}>\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-2xl\">\n                            <DialogHeader>\n                              <DialogTitle>Edit Coupon</DialogTitle>\n                            </DialogHeader>\n                            {editingCoupon && (\n                              <CouponForm \n                                initialData={editingCoupon}\n                                onSubmit={(data) => updateCouponMutation.mutate({ id: editingCoupon.id, ...data })}\n                                isLoading={updateCouponMutation.isPending}\n                              />\n                            )}\n                          </DialogContent>\n                        </Dialog>\n                        \n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deactivateCouponMutation.mutate(coupon.id)}\n                          disabled={!coupon.isActive}\n                          data-testid={`button-deactivate-${coupon.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":22536},"client/src/pages/advanced-search.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Search,\n  FileText,\n  Scale,\n  Brain,\n  BookOpen,\n  Gavel,\n  ArrowRight,\n  Clock,\n  Users,\n  Building,\n  MapPin,\n  Calendar,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Loader2,\n  Download,\n  Eye\n} from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { cn } from '@/lib/utils';\nimport { useIsMobile } from '@/hooks/use-mobile';\nimport { useCurrentCase } from '@/lib/case-context';\n\n// Form schemas\nconst semanticSearchSchema = z.object({\n  query: z.string().min(1, 'Search query is required'),\n  searchType: z.enum(['general', 'legal_research', 'fact_finding', 'precedent_search', 'evidence_analysis']),\n  documentTypes: z.array(z.string()).optional(),\n  dateRange: z.object({\n    startDate: z.string().optional(),\n    endDate: z.string().optional()\n  }).optional(),\n  legalContext: z.string().optional(),\n  maxResults: z.number().min(1).max(100).default(20)\n});\n\nconst precedentResearchSchema = z.object({\n  legalIssue: z.string().min(1, 'Legal issue is required'),\n  jurisdiction: z.string().optional(),\n  caseType: z.string().min(1, 'Case type is required'),\n  factualContext: z.string().min(1, 'Factual context is required'),\n  dateRange: z.object({\n    startYear: z.number().min(1800).max(new Date().getFullYear()),\n    endYear: z.number().min(1800).max(new Date().getFullYear())\n  }).optional(),\n  courtLevel: z.enum(['supreme', 'appellate', 'district', 'all']).optional(),\n  includeStatutes: z.boolean().default(true),\n  maxResults: z.number().min(1).max(50).default(10)\n});\n\nconst ocrProcessingSchema = z.object({\n  filePath: z.string().min(1, 'File path is required'),\n  fileName: z.string().min(1, 'File name is required')\n});\n\ntype SemanticSearchForm = z.infer<typeof semanticSearchSchema>;\ntype PrecedentResearchForm = z.infer<typeof precedentResearchSchema>;\ntype OCRProcessingForm = z.infer<typeof ocrProcessingSchema>;\n\ninterface SearchResult {\n  documentId: string;\n  title: string;\n  documentType: string;\n  relevanceScore: number;\n  matchedContent: string[];\n  keyTermsFound: string[];\n  contextualSummary: string;\n  legalSignificance?: string;\n  relatedEntities: {\n    people: string[];\n    organizations: string[];\n    dates: string[];\n    locations: string[];\n  };\n  citationsFound: string[];\n  actionableInsights: string[];\n  extractedFacts: string[];\n  filePath?: string;\n  pageReferences?: number[];\n}\n\ninterface PrecedentResult {\n  caseName: string;\n  citation: string;\n  court: string;\n  year: number;\n  keyHolding: string;\n  relevanceScore: number;\n  keyQuotes: string[];\n}\n\ninterface OCRResult {\n  extractedText: string;\n  confidence: number;\n  metadata: {\n    pageCount?: number;\n    documentType: string;\n    language: string;\n    processingTime: number;\n  };\n  entities: {\n    dates: string[];\n    names: string[];\n    organizations: string[];\n    legalCitations: string[];\n    caseNumbers: string[];\n  };\n  summary: string;\n  keyPoints: string[];\n}\n\nexport default function AdvancedSearchPage() {\n  const [activeTab, setActiveTab] = useState('semantic');\n  const [isSearching, setIsSearching] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);\n  const [precedentResults, setPrecedentResults] = useState<PrecedentResult[]>([]);\n  const [ocrResult, setOcrResult] = useState<OCRResult | null>(null);\n  const [processingProgress, setProcessingProgress] = useState(0);\n  \n  const { toast } = useToast();\n  const isMobile = useIsMobile();\n  const { currentCase } = useCurrentCase();\n\n  const semanticForm = useForm<SemanticSearchForm>({\n    resolver: zodResolver(semanticSearchSchema),\n    defaultValues: {\n      searchType: 'legal_research',\n      maxResults: 20\n    }\n  });\n\n  const precedentForm = useForm<PrecedentResearchForm>({\n    resolver: zodResolver(precedentResearchSchema),\n    defaultValues: {\n      includeStatutes: true,\n      maxResults: 10,\n      courtLevel: 'all'\n    }\n  });\n\n  const ocrForm = useForm<OCRProcessingForm>({\n    resolver: zodResolver(ocrProcessingSchema)\n  });\n\n  const onSemanticSearch = async (data: SemanticSearchForm) => {\n    setIsSearching(true);\n    try {\n      const response = await apiRequest('/api/documents/semantic-search', {\n        method: 'POST',\n        data: {\n          ...data,\n          caseId: currentCase?.id\n        }\n      });\n\n      if (response.success) {\n        setSearchResults(response.results.results || []);\n        toast({\n          title: 'Search Complete',\n          description: `Found ${response.results.results?.length || 0} relevant documents`\n        });\n      } else {\n        throw new Error(response.error);\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Search Failed',\n        description: error.message || 'Failed to perform semantic search',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const onPrecedentResearch = async (data: PrecedentResearchForm) => {\n    setIsSearching(true);\n    try {\n      const response = await apiRequest('/api/legal-research/precedents', {\n        method: 'POST',\n        data: data\n      });\n\n      if (response.success) {\n        setPrecedentResults(response.research.precedents || []);\n        toast({\n          title: 'Research Complete',\n          description: `Found ${response.research.precedents?.length || 0} relevant precedents`\n        });\n      } else {\n        throw new Error(response.error);\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Research Failed',\n        description: error.message || 'Failed to conduct legal research',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const onOCRProcessing = async (data: OCRProcessingForm) => {\n    setIsProcessing(true);\n    setProcessingProgress(0);\n    \n    // Simulate progress updates\n    const progressInterval = setInterval(() => {\n      setProcessingProgress(prev => Math.min(prev + 10, 90));\n    }, 500);\n\n    try {\n      const response = await apiRequest('/api/documents/ocr', {\n        method: 'POST',\n        data: data\n      });\n\n      clearInterval(progressInterval);\n      setProcessingProgress(100);\n\n      if (response.success) {\n        setOcrResult(response.ocr);\n        toast({\n          title: 'OCR Processing Complete',\n          description: 'Document text extracted and analyzed successfully'\n        });\n      } else {\n        throw new Error(response.error);\n      }\n    } catch (error: any) {\n      clearInterval(progressInterval);\n      toast({\n        title: 'OCR Processing Failed',\n        description: error.message || 'Failed to process document',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsProcessing(false);\n      setTimeout(() => setProcessingProgress(0), 2000);\n    }\n  };\n\n  const renderSearchResults = () => (\n    <div className=\"space-y-4\">\n      {searchResults.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-8\">\n            <Search className=\"w-12 h-12 text-gray-400 mb-4\" />\n            <p className=\"text-gray-500\">No search results yet. Try performing a semantic search above.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        searchResults.map((result, index) => (\n          <Card key={result.documentId} className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <FileText className=\"w-5 h-5\" />\n                    {result.title}\n                  </CardTitle>\n                  <CardDescription className=\"flex items-center gap-4 mt-2\">\n                    <Badge variant=\"secondary\">{result.documentType}</Badge>\n                    <div className=\"flex items-center gap-1\">\n                      <div className={cn(\n                        'w-2 h-2 rounded-full',\n                        result.relevanceScore >= 0.8 ? 'bg-green-500' :\n                        result.relevanceScore >= 0.6 ? 'bg-yellow-500' : 'bg-red-500'\n                      )} />\n                      <span className=\"text-sm\">\n                        {(result.relevanceScore * 100).toFixed(0)}% relevant\n                      </span>\n                    </div>\n                  </CardDescription>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                {result.contextualSummary}\n              </p>\n              \n              {result.legalSignificance && (\n                <div className=\"p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-900 dark:text-blue-100 mb-1\">Legal Significance</h4>\n                  <p className=\"text-sm text-blue-800 dark:text-blue-200\">{result.legalSignificance}</p>\n                </div>\n              )}\n              \n              {result.matchedContent.length > 0 && (\n                <div>\n                  <h4 className=\"font-medium mb-2\">Key Excerpts</h4>\n                  <div className=\"space-y-2\">\n                    {result.matchedContent.slice(0, 2).map((excerpt, i) => (\n                      <div key={i} className=\"p-2 bg-gray-50 dark:bg-gray-800 rounded text-sm\">\n                        \"{excerpt}...\"\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"flex flex-wrap gap-2\">\n                {result.keyTermsFound.slice(0, 5).map((term, i) => (\n                  <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                    {term}\n                  </Badge>\n                ))}\n              </div>\n              \n              {result.relatedEntities && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  {result.relatedEntities.people.length > 0 && (\n                    <div>\n                      <h5 className=\"font-medium flex items-center gap-1 mb-1\">\n                        <Users className=\"w-4 h-4\" />\n                        People\n                      </h5>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {result.relatedEntities.people.slice(0, 3).map((person, i) => (\n                          <Badge key={i} variant=\"secondary\" className=\"text-xs\">{person}</Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                  \n                  {result.relatedEntities.organizations.length > 0 && (\n                    <div>\n                      <h5 className=\"font-medium flex items-center gap-1 mb-1\">\n                        <Building className=\"w-4 h-4\" />\n                        Organizations\n                      </h5>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {result.relatedEntities.organizations.slice(0, 3).map((org, i) => (\n                          <Badge key={i} variant=\"secondary\" className=\"text-xs\">{org}</Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))\n      )}\n    </div>\n  );\n\n  const renderPrecedentResults = () => (\n    <div className=\"space-y-4\">\n      {precedentResults.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-8\">\n            <Scale className=\"w-12 h-12 text-gray-400 mb-4\" />\n            <p className=\"text-gray-500\">No precedent research results yet. Try conducting legal research above.</p>\n          </CardContent>\n        </Card>\n      ) : (\n        precedentResults.map((precedent, index) => (\n          <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Gavel className=\"w-5 h-5\" />\n                {precedent.caseName}\n              </CardTitle>\n              <CardDescription className=\"flex items-center gap-4\">\n                <span>{precedent.citation}</span>\n                <span>{precedent.court} ({precedent.year})</span>\n                <div className=\"flex items-center gap-1\">\n                  <div className={cn(\n                    'w-2 h-2 rounded-full',\n                    precedent.relevanceScore >= 0.8 ? 'bg-green-500' :\n                    precedent.relevanceScore >= 0.6 ? 'bg-yellow-500' : 'bg-red-500'\n                  )} />\n                  <span className=\"text-sm\">\n                    {(precedent.relevanceScore * 100).toFixed(0)}% relevant\n                  </span>\n                </div>\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-medium mb-2\">Key Holding</h4>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">{precedent.keyHolding}</p>\n              </div>\n              \n              {precedent.keyQuotes.length > 0 && (\n                <div>\n                  <h4 className=\"font-medium mb-2\">Key Quotes</h4>\n                  <div className=\"space-y-2\">\n                    {precedent.keyQuotes.map((quote, i) => (\n                      <div key={i} className=\"p-2 bg-gray-50 dark:bg-gray-800 rounded text-sm italic\">\n                        \"{quote}\"\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))\n      )}\n    </div>\n  );\n\n  return (\n    <div className={cn('h-screen overflow-y-auto', isMobile ? 'pt-16' : '')}>\n      <div className=\"container mx-auto p-4 md:p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center gap-3\">\n              <Brain className=\"w-8 h-8 text-blue-600\" />\n              Advanced Legal Research\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n              AI-powered document processing, semantic search, and precedent research\n            </p>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"semantic\" className=\"flex items-center gap-2\">\n              <Search className=\"w-4 h-4\" />\n              Semantic Search\n            </TabsTrigger>\n            <TabsTrigger value=\"precedent\" className=\"flex items-center gap-2\">\n              <Scale className=\"w-4 h-4\" />\n              Precedent Research\n            </TabsTrigger>\n            <TabsTrigger value=\"ocr\" className=\"flex items-center gap-2\">\n              <FileText className=\"w-4 h-4\" />\n              Document OCR\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Semantic Search Tab */}\n          <TabsContent value=\"semantic\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Semantic Document Search</CardTitle>\n                <CardDescription>\n                  Search through documents using AI to understand context and legal concepts\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...semanticForm}>\n                  <form onSubmit={semanticForm.handleSubmit(onSemanticSearch)} className=\"space-y-4\">\n                    <FormField\n                      control={semanticForm.control}\n                      name=\"query\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Search Query</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Enter your search query (e.g., 'Fourth Amendment violations in traffic stops')\"\n                              {...field}\n                              data-testid=\"input-search-query\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={semanticForm.control}\n                        name=\"searchType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Search Type</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-search-type\">\n                                  <SelectValue placeholder=\"Select search type\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"general\">General Search</SelectItem>\n                                <SelectItem value=\"legal_research\">Legal Research</SelectItem>\n                                <SelectItem value=\"fact_finding\">Fact Finding</SelectItem>\n                                <SelectItem value=\"precedent_search\">Precedent Search</SelectItem>\n                                <SelectItem value=\"evidence_analysis\">Evidence Analysis</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={semanticForm.control}\n                        name=\"maxResults\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Max Results</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"number\"\n                                min=\"1\"\n                                max=\"100\"\n                                {...field}\n                                onChange={e => field.onChange(parseInt(e.target.value))}\n                                data-testid=\"input-max-results\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <Button type=\"submit\" disabled={isSearching} className=\"w-full\" data-testid=\"button-semantic-search\">\n                      {isSearching ? (\n                        <>\n                          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Searching...\n                        </>\n                      ) : (\n                        <>\n                          <Search className=\"w-4 h-4 mr-2\" />\n                          Search Documents\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n\n            {renderSearchResults()}\n          </TabsContent>\n\n          {/* Precedent Research Tab */}\n          <TabsContent value=\"precedent\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Legal Precedent Research</CardTitle>\n                <CardDescription>\n                  Find relevant case law and legal precedents using AI analysis\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...precedentForm}>\n                  <form onSubmit={precedentForm.handleSubmit(onPrecedentResearch)} className=\"space-y-4\">\n                    <FormField\n                      control={precedentForm.control}\n                      name=\"legalIssue\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Legal Issue</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Describe the legal issue (e.g., 'Qualified immunity for police officers in excessive force cases')\"\n                              {...field}\n                              data-testid=\"input-legal-issue\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={precedentForm.control}\n                      name=\"factualContext\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Factual Context</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Provide relevant facts and context for the case\"\n                              {...field}\n                              data-testid=\"input-factual-context\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <FormField\n                        control={precedentForm.control}\n                        name=\"caseType\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Case Type</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Civil Rights\" {...field} data-testid=\"input-case-type\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={precedentForm.control}\n                        name=\"jurisdiction\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Jurisdiction</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Federal, State\" {...field} data-testid=\"input-jurisdiction\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={precedentForm.control}\n                        name=\"courtLevel\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Court Level</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-court-level\">\n                                  <SelectValue placeholder=\"All Courts\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"all\">All Courts</SelectItem>\n                                <SelectItem value=\"supreme\">Supreme Court</SelectItem>\n                                <SelectItem value=\"appellate\">Appellate</SelectItem>\n                                <SelectItem value=\"district\">District</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <Button type=\"submit\" disabled={isSearching} className=\"w-full\" data-testid=\"button-precedent-research\">\n                      {isSearching ? (\n                        <>\n                          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Researching...\n                        </>\n                      ) : (\n                        <>\n                          <Scale className=\"w-4 h-4 mr-2\" />\n                          Research Precedents\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n\n            {renderPrecedentResults()}\n          </TabsContent>\n\n          {/* OCR Processing Tab */}\n          <TabsContent value=\"ocr\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Document OCR & Analysis</CardTitle>\n                <CardDescription>\n                  Extract text from documents and perform AI-powered legal analysis\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...ocrForm}>\n                  <form onSubmit={ocrForm.handleSubmit(onOCRProcessing)} className=\"space-y-4\">\n                    <FormField\n                      control={ocrForm.control}\n                      name=\"filePath\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>File Path</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"/path/to/document.pdf\" {...field} data-testid=\"input-file-path\" />\n                          </FormControl>\n                          <FormDescription>\n                            Enter the path to the document you want to process\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={ocrForm.control}\n                      name=\"fileName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>File Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"document.pdf\" {...field} data-testid=\"input-file-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    {isProcessing && (\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium\">Processing Document</span>\n                          <span className=\"text-sm text-gray-500\">{processingProgress}%</span>\n                        </div>\n                        <Progress value={processingProgress} className=\"w-full\" />\n                      </div>\n                    )}\n                    \n                    <Button type=\"submit\" disabled={isProcessing} className=\"w-full\" data-testid=\"button-process-ocr\">\n                      {isProcessing ? (\n                        <>\n                          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                          Processing...\n                        </>\n                      ) : (\n                        <>\n                          <FileText className=\"w-4 h-4 mr-2\" />\n                          Process Document\n                        </>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n\n            {/* OCR Results */}\n            {ocrResult && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    Document Processing Results\n                  </CardTitle>\n                  <CardDescription>\n                    Confidence: {(ocrResult.confidence * 100).toFixed(1)}% â¢ \n                    Processing Time: {ocrResult.metadata.processingTime}ms â¢\n                    Document Type: {ocrResult.metadata.documentType}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Summary</h4>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-300\">{ocrResult.summary}</p>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium mb-2\">Key Points</h4>\n                    <ul className=\"list-disc list-inside space-y-1\">\n                      {ocrResult.keyPoints.map((point, i) => (\n                        <li key={i} className=\"text-sm text-gray-600 dark:text-gray-300\">{point}</li>\n                      ))}\n                    </ul>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {ocrResult.entities.names.length > 0 && (\n                      <div>\n                        <h5 className=\"font-medium mb-2\">Names Found</h5>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {ocrResult.entities.names.map((name, i) => (\n                            <Badge key={i} variant=\"secondary\">{name}</Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    \n                    {ocrResult.entities.legalCitations.length > 0 && (\n                      <div>\n                        <h5 className=\"font-medium mb-2\">Legal Citations</h5>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {ocrResult.entities.legalCitations.map((citation, i) => (\n                            <Badge key={i} variant=\"secondary\">{citation}</Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"pt-4 border-t\">\n                    <h4 className=\"font-medium mb-2\">Extracted Text (Preview)</h4>\n                    <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded text-sm max-h-40 overflow-y-auto\">\n                      {ocrResult.extractedText.substring(0, 1000)}\n                      {ocrResult.extractedText.length > 1000 && '...'}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":32420},"client/src/utils/briefExport.ts":{"content":"import { GeneratedBrief } from '@shared/types';\n\nexport interface ExportOptions {\n  includeHeader?: boolean;\n  includeFooter?: boolean;\n  pageNumbers?: boolean;\n  fontFamily?: string;\n  fontSize?: string;\n}\n\nexport function getFormattedFilename(briefTitle: string, caseNumber?: string): string {\n  const sanitizedTitle = briefTitle.replace(/[^a-z0-9]/gi, '_');\n  const timestamp = new Date().toISOString().split('T')[0];\n  const casePrefix = caseNumber ? `${caseNumber}_` : '';\n  return `${casePrefix}${sanitizedTitle}_${timestamp}`;\n}\n\nexport function exportBriefAsText(brief: GeneratedBrief, filename: string): void {\n  let content = `${brief.title}\\n`;\n  content += '='.repeat(brief.title.length) + '\\n\\n';\n  \n  // Table of Contents\n  content += 'TABLE OF CONTENTS\\n\\n';\n  brief.tableOfContents.forEach(item => {\n    content += `${item.section} ........................ ${item.page}\\n`;\n  });\n  content += '\\n';\n  \n  // Sections\n  brief.sections.forEach((section, index) => {\n    content += `${index + 1}. ${section.heading}\\n`;\n    content += '-'.repeat(section.heading.length + 3) + '\\n';\n    content += section.content + '\\n\\n';\n    \n    if (section.citations && section.citations.length > 0) {\n      content += 'Citations:\\n';\n      section.citations.forEach(citation => {\n        content += `- ${citation}\\n`;\n      });\n      content += '\\n';\n    }\n  });\n  \n  // Footer\n  content += `\\nGenerated on: ${brief.generatedAt.toLocaleDateString()}\\n`;\n  content += `Word Count: ${brief.wordCount}\\n`;\n  \n  downloadFile(content, filename + '.txt', 'text/plain');\n}\n\nexport function exportBriefAsHTML(brief: GeneratedBrief, filename: string, options: ExportOptions = {}): void {\n  const {\n    includeHeader = true,\n    includeFooter = true,\n    pageNumbers = true,\n    fontFamily = 'Times New Roman, serif',\n    fontSize = '12pt'\n  } = options;\n  \n  let html = `<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>${brief.title}</title>\n    <style>\n        body {\n            font-family: ${fontFamily};\n            font-size: ${fontSize};\n            line-height: 1.6;\n            margin: 1in;\n            color: #000;\n        }\n        .header {\n            text-align: center;\n            margin-bottom: 2em;\n            border-bottom: 2px solid #000;\n            padding-bottom: 1em;\n        }\n        .title {\n            font-size: 18pt;\n            font-weight: bold;\n            text-transform: uppercase;\n            margin-bottom: 0.5em;\n        }\n        .toc {\n            margin: 2em 0;\n            page-break-after: always;\n        }\n        .toc-title {\n            font-weight: bold;\n            text-align: center;\n            margin-bottom: 1em;\n            text-transform: uppercase;\n        }\n        .toc-item {\n            display: flex;\n            justify-content: space-between;\n            margin: 0.5em 0;\n            padding: 0 1em;\n        }\n        .section {\n            margin: 2em 0;\n            page-break-inside: avoid;\n        }\n        .section-heading {\n            font-weight: bold;\n            font-size: 14pt;\n            margin-bottom: 1em;\n            text-transform: uppercase;\n            border-bottom: 1px solid #ccc;\n            padding-bottom: 0.5em;\n        }\n        .section-content {\n            text-align: justify;\n            margin-bottom: 1.5em;\n        }\n        .citations {\n            margin-top: 1em;\n            padding: 1em;\n            background-color: #f9f9f9;\n            border-left: 3px solid #ccc;\n        }\n        .citations-title {\n            font-weight: bold;\n            margin-bottom: 0.5em;\n        }\n        .citation {\n            margin: 0.25em 0;\n            font-style: italic;\n        }\n        .footer {\n            margin-top: 3em;\n            padding-top: 1em;\n            border-top: 1px solid #ccc;\n            font-size: 10pt;\n            color: #666;\n        }\n        @media print {\n            body { margin: 0.75in; }\n            .page-break { page-break-before: always; }\n        }\n        ${pageNumbers ? `\n        @page {\n            @bottom-center {\n                content: \"Page \" counter(page);\n            }\n        }\n        ` : ''}\n    </style>\n</head>\n<body>`;\n\n  if (includeHeader) {\n    html += `\n    <div class=\"header\">\n        <div class=\"title\">${brief.title}</div>\n        <div>Generated on ${brief.generatedAt.toLocaleDateString()}</div>\n    </div>`;\n  }\n\n  // Table of Contents\n  html += `\n    <div class=\"toc\">\n        <div class=\"toc-title\">Table of Contents</div>`;\n  \n  brief.tableOfContents.forEach(item => {\n    html += `\n        <div class=\"toc-item\">\n            <span>${item.section}</span>\n            <span>${item.page}</span>\n        </div>`;\n  });\n  \n  html += `</div>`;\n\n  // Sections\n  brief.sections.forEach((section, index) => {\n    html += `\n    <div class=\"section${index > 0 ? ' page-break' : ''}\">\n        <div class=\"section-heading\">${section.heading}</div>\n        <div class=\"section-content\">${section.content.replace(/\\n/g, '<br>')}</div>`;\n    \n    if (section.citations && section.citations.length > 0) {\n      html += `\n        <div class=\"citations\">\n            <div class=\"citations-title\">Citations:</div>`;\n      \n      section.citations.forEach(citation => {\n        html += `<div class=\"citation\">${citation}</div>`;\n      });\n      \n      html += `</div>`;\n    }\n    \n    html += `</div>`;\n  });\n\n  if (includeFooter) {\n    html += `\n    <div class=\"footer\">\n        <div>Word Count: ${brief.wordCount}</div>\n        <div>Generated by CaseBuddy Legal AI on ${brief.generatedAt.toLocaleString()}</div>\n    </div>`;\n  }\n\n  html += `\n</body>\n</html>`;\n  \n  downloadFile(html, filename + '.html', 'text/html');\n}\n\nexport function exportBriefAsWord(brief: GeneratedBrief, filename: string): void {\n  // Create a Word-compatible HTML document\n  let content = `<!DOCTYPE html>\n<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:w=\"urn:schemas-microsoft-com:office:word\" xmlns:m=\"http://schemas.microsoft.com/office/2004/12/omml\" xmlns=\"http://www.w3.org/TR/REC-html40\">\n<head>\n<meta http-equiv=Content-Type content=\"text/html; charset=utf-8\">\n<meta name=ProgId content=Word.Document>\n<meta name=Generator content=\"Microsoft Word 15\">\n<meta name=Originator content=\"Microsoft Word 15\">\n<!--[if !mso]>\n<style>\nv\\\\:* {behavior:url(#default#VML);}\no\\\\:* {behavior:url(#default#VML);}\nw\\\\:* {behavior:url(#default#VML);}\n.shape {behavior:url(#default#VML);}\n</style>\n<![endif]-->\n<style>\n@page {\n  margin: 1in;\n}\nbody {\n  font-family: 'Times New Roman', serif;\n  font-size: 12pt;\n  line-height: 1.5;\n}\n.title {\n  text-align: center;\n  font-weight: bold;\n  font-size: 18pt;\n  text-transform: uppercase;\n  margin-bottom: 24pt;\n}\n.section-heading {\n  font-weight: bold;\n  font-size: 14pt;\n  margin-top: 18pt;\n  margin-bottom: 12pt;\n  text-transform: uppercase;\n}\n.toc {\n  margin: 24pt 0;\n}\n.toc-title {\n  font-weight: bold;\n  text-align: center;\n  font-size: 14pt;\n  text-transform: uppercase;\n  margin-bottom: 12pt;\n}\n.toc-item {\n  margin: 6pt 0;\n}\n</style>\n</head>\n<body>`;\n\n  content += `<div class=\"title\">${brief.title}</div>`;\n  \n  // Table of Contents\n  content += `<div class=\"toc\">\n    <div class=\"toc-title\">Table of Contents</div>`;\n  \n  brief.tableOfContents.forEach(item => {\n    content += `<div class=\"toc-item\">${item.section} ..................................... ${item.page}</div>`;\n  });\n  \n  content += `</div>`;\n\n  // Sections\n  brief.sections.forEach(section => {\n    content += `\n    <div class=\"section-heading\">${section.heading}</div>\n    <p>${section.content.replace(/\\n/g, '</p><p>')}</p>`;\n    \n    if (section.citations && section.citations.length > 0) {\n      content += `<p><strong>Citations:</strong></p><ul>`;\n      section.citations.forEach(citation => {\n        content += `<li><em>${citation}</em></li>`;\n      });\n      content += `</ul>`;\n    }\n  });\n\n  content += `\n<hr>\n<p><small>Generated on ${brief.generatedAt.toLocaleDateString()} | Word Count: ${brief.wordCount} | CaseBuddy Legal AI</small></p>\n</body>\n</html>`;\n  \n  downloadFile(content, filename + '.doc', 'application/msword');\n}\n\nexport function exportBriefForPrint(brief: GeneratedBrief): void {\n  const printWindow = window.open('', '_blank');\n  if (!printWindow) {\n    alert('Please allow pop-ups for this site to enable printing');\n    return;\n  }\n  \n  const content = `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Print - ${brief.title}</title>\n    <style>\n        @media print {\n            @page {\n                margin: 0.75in;\n                @bottom-center {\n                    content: \"Page \" counter(page);\n                }\n            }\n            body {\n                font-family: 'Times New Roman', serif;\n                font-size: 12pt;\n                line-height: 1.6;\n                color: black;\n            }\n            .no-print {\n                display: none;\n            }\n        }\n        body {\n            font-family: 'Times New Roman', serif;\n            font-size: 12pt;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .title {\n            text-align: center;\n            font-weight: bold;\n            font-size: 18pt;\n            text-transform: uppercase;\n            margin-bottom: 24pt;\n            border-bottom: 2px solid black;\n            padding-bottom: 12pt;\n        }\n        .section-heading {\n            font-weight: bold;\n            font-size: 14pt;\n            margin-top: 18pt;\n            margin-bottom: 12pt;\n            text-transform: uppercase;\n            page-break-after: avoid;\n        }\n        .section-content {\n            text-align: justify;\n            margin-bottom: 18pt;\n            page-break-inside: avoid;\n        }\n        .toc {\n            margin: 24pt 0;\n            page-break-after: always;\n        }\n        .toc-title {\n            font-weight: bold;\n            text-align: center;\n            font-size: 14pt;\n            text-transform: uppercase;\n            margin-bottom: 12pt;\n        }\n        .toc-item {\n            display: flex;\n            justify-content: space-between;\n            margin: 6pt 0;\n        }\n        .print-controls {\n            margin: 20px 0;\n            padding: 10px;\n            background: #f0f0f0;\n            border-radius: 5px;\n        }\n        .print-button {\n            background: #007cba;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 4px;\n            cursor: pointer;\n            margin-right: 10px;\n        }\n        .print-button:hover {\n            background: #005a8b;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"print-controls no-print\">\n        <button class=\"print-button\" onclick=\"window.print()\">Print Brief</button>\n        <button class=\"print-button\" onclick=\"window.close()\">Close</button>\n    </div>\n    \n    <div class=\"title\">${brief.title}</div>\n    \n    <div class=\"toc\">\n        <div class=\"toc-title\">Table of Contents</div>\n        ${brief.tableOfContents.map(item => \n          `<div class=\"toc-item\">\n             <span>${item.section}</span>\n             <span>${item.page}</span>\n           </div>`\n        ).join('')}\n    </div>\n    \n    ${brief.sections.map(section => \n      `<div class=\"section-heading\">${section.heading}</div>\n       <div class=\"section-content\">${section.content.replace(/\\n/g, '<br>')}</div>`\n    ).join('')}\n    \n    <div style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #ccc; font-size: 10pt; color: #666;\">\n        <p>Generated on ${brief.generatedAt.toLocaleDateString()} | Word Count: ${brief.wordCount}</p>\n        <p>Generated by CaseBuddy Legal AI</p>\n    </div>\n</body>\n</html>`;\n  \n  printWindow.document.write(content);\n  printWindow.document.close();\n}\n\nexport async function copyBriefToClipboard(brief: GeneratedBrief): Promise<void> {\n  let content = `${brief.title}\\n`;\n  content += '='.repeat(brief.title.length) + '\\n\\n';\n  \n  brief.sections.forEach((section, index) => {\n    content += `${index + 1}. ${section.heading}\\n`;\n    content += section.content + '\\n\\n';\n  });\n  \n  content += `Generated on: ${brief.generatedAt.toLocaleDateString()}\\n`;\n  content += `Word Count: ${brief.wordCount}`;\n  \n  await navigator.clipboard.writeText(content);\n}\n\nfunction downloadFile(content: string, filename: string, mimeType: string): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  \n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  link.style.display = 'none';\n  \n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  \n  URL.revokeObjectURL(url);\n}","size_bytes":12707},"server/services/briefGeneration.ts":{"content":"import Anthropic from '@anthropic-ai/sdk';\n\n/*\nThe newest Anthropic model is \"claude-sonnet-4-20250514\", not \"claude-3-7-sonnet-20250219\", \"claude-3-5-sonnet-20241022\" nor \"claude-3-sonnet-20240229\". \nIf the user doesn't specify a model, always prefer using \"claude-sonnet-4-20250514\" as it is the latest model. However, if the user has already selected \"claude-3-7-sonnet-20250219\", keep that selection unless they explicitly request a change.\n*/\n\n// <important_do_not_delete>\nconst DEFAULT_MODEL_STR = \"claude-sonnet-4-20250514\";\n// </important_do_not_delete>\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n});\n\nexport interface BriefGenerationRequest {\n  caseTitle: string;\n  caseNumber?: string;\n  jurisdiction: string;\n  clientName: string;\n  attorneyName: string;\n  attorneyBar?: string;\n  courtName: string;\n  briefType: 'motion' | 'complaint' | 'response' | 'appeal' | 'summary_judgment' | 'injunction';\n  legalIssues: string[];\n  factualBackground: string;\n  timeline?: Array<{\n    date: string;\n    event: string;\n    significance: string;\n  }>;\n  documents?: Array<{\n    title: string;\n    type: string;\n    summary: string;\n  }>;\n  evidence?: Array<{\n    title: string;\n    type: string;\n    summary: string;\n  }>;\n  customSections?: Array<{\n    title: string;\n    content: string;\n  }>;\n  includePrecedents?: boolean;\n  includeStatutes?: boolean;\n}\n\nexport interface GeneratedBrief {\n  title: string;\n  sections: Array<{\n    heading: string;\n    content: string;\n    citations?: string[];\n  }>;\n  tableOfContents: Array<{\n    section: string;\n    page: number;\n  }>;\n  wordCount: number;\n  generatedAt: Date;\n}\n\nclass BriefGenerationService {\n  \n  async generateLegalBrief(request: BriefGenerationRequest): Promise<GeneratedBrief> {\n    const systemPrompt = this.createSystemPrompt(request.briefType, request.jurisdiction);\n    const userPrompt = this.createUserPrompt(request);\n    \n    try {\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        system: systemPrompt,\n        max_tokens: 4000,\n        messages: [\n          {\n            role: 'user',\n            content: userPrompt\n          }\n        ]\n      });\n\n      const briefContent = response.content[0].text;\n      return this.parseBriefResponse(briefContent, request);\n      \n    } catch (error) {\n      console.error('Error generating legal brief:', error);\n      throw new Error('Failed to generate legal brief. Please try again.');\n    }\n  }\n\n  private createSystemPrompt(briefType: string, jurisdiction: string): string {\n    return `You are an expert legal brief writer with extensive experience in ${jurisdiction} law. You specialize in drafting ${briefType}s that are:\n\n1. Legally sound and well-researched\n2. Professionally formatted according to court rules\n3. Persuasive and compelling in argument structure\n4. Properly cited with relevant legal authorities\n5. Clear and concise in language\n\nYour task is to generate a comprehensive legal brief that follows proper legal writing conventions, includes appropriate headings and subheadings, and presents arguments in a logical, persuasive manner.\n\nFormat your response as a structured legal document with:\n- Clear section headings (marked with ##)\n- Proper legal citations where applicable\n- Professional legal language and terminology\n- Logical argument flow\n- Supporting facts and evidence integration\n\nDo not include placeholder text or incomplete sections. Generate a complete, professional brief ready for court filing.`;\n  }\n\n  private createUserPrompt(request: BriefGenerationRequest): string {\n    let prompt = `Generate a ${request.briefType} for the following case:\n\n**CASE INFORMATION:**\n- Case Title: ${request.caseTitle}\n${request.caseNumber ? `- Case Number: ${request.caseNumber}` : ''}\n- Jurisdiction: ${request.jurisdiction}\n- Court: ${request.courtName}\n- Client: ${request.clientName}\n- Attorney: ${request.attorneyName}${request.attorneyBar ? ` (${request.attorneyBar})` : ''}\n\n**LEGAL ISSUES:**\n${request.legalIssues.map(issue => `- ${issue}`).join('\\n')}\n\n**FACTUAL BACKGROUND:**\n${request.factualBackground}`;\n\n    if (request.timeline && request.timeline.length > 0) {\n      prompt += `\\n\\n**TIMELINE OF EVENTS:**\\n${request.timeline.map(event => \n        `- ${event.date}: ${event.event} (${event.significance})`\n      ).join('\\n')}`;\n    }\n\n    if (request.documents && request.documents.length > 0) {\n      prompt += `\\n\\n**RELEVANT DOCUMENTS:**\\n${request.documents.map(doc => \n        `- ${doc.title} (${doc.type}): ${doc.summary}`\n      ).join('\\n')}`;\n    }\n\n    if (request.evidence && request.evidence.length > 0) {\n      prompt += `\\n\\n**EVIDENCE:**\\n${request.evidence.map(evidence => \n        `- ${evidence.title} (${evidence.type}): ${evidence.summary}`\n      ).join('\\n')}`;\n    }\n\n    if (request.customSections && request.customSections.length > 0) {\n      prompt += `\\n\\n**CUSTOM SECTIONS TO INCLUDE:**\\n${request.customSections.map(section => \n        `- ${section.title}: ${section.content}`\n      ).join('\\n')}`;\n    }\n\n    prompt += `\\n\\nGenerate a complete, professional ${request.briefType} that includes:\n1. Caption and case header\n2. Table of contents\n3. Statement of facts\n4. Legal argument with proper headings\n5. Conclusion and prayer for relief\n6. Certificate of service (if applicable)\n\n${request.includePrecedents ? 'Include relevant case law and precedents.' : ''}\n${request.includeStatutes ? 'Include applicable statutes and regulations.' : ''}\n\nEnsure the brief is persuasive, well-structured, and ready for court filing.`;\n\n    return prompt;\n  }\n\n  private parseBriefResponse(briefContent: string, request: BriefGenerationRequest): GeneratedBrief {\n    // Parse the AI response into structured sections\n    const sections: Array<{heading: string; content: string; citations?: string[]}> = [];\n    const lines = briefContent.split('\\n');\n    \n    let currentSection: {heading: string; content: string; citations?: string[]} | null = null;\n    let tableOfContents: Array<{section: string; page: number}> = [];\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      \n      // Check for section headings (## format)\n      if (line.startsWith('##')) {\n        // Save previous section if exists\n        if (currentSection) {\n          sections.push(currentSection);\n        }\n        \n        // Start new section\n        currentSection = {\n          heading: line.replace(/^#+\\s*/, ''),\n          content: '',\n          citations: []\n        };\n        \n        tableOfContents.push({\n          section: currentSection.heading,\n          page: Math.ceil(sections.length / 2) + 1 // Estimate page numbers\n        });\n      } else if (currentSection && line) {\n        // Add content to current section\n        currentSection.content += (currentSection.content ? '\\n' : '') + line;\n        \n        // Extract citations (simple pattern matching)\n        const citations = line.match(/\\b\\d+\\s+[A-Z][a-z]+\\s+\\d+/g);\n        if (citations) {\n          currentSection.citations = currentSection.citations || [];\n          currentSection.citations.push(...citations);\n        }\n      }\n    }\n    \n    // Add final section\n    if (currentSection) {\n      sections.push(currentSection);\n    }\n\n    // Generate title\n    const title = `${request.briefType.toUpperCase()} - ${request.caseTitle}`;\n    \n    // Count words\n    const wordCount = briefContent.split(/\\s+/).length;\n\n    return {\n      title,\n      sections,\n      tableOfContents,\n      wordCount,\n      generatedAt: new Date()\n    };\n  }\n\n  async generateBriefSummary(brief: GeneratedBrief): Promise<string> {\n    try {\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 500,\n        messages: [\n          {\n            role: 'user',\n            content: `Provide a concise executive summary of this legal brief:\\n\\nTitle: ${brief.title}\\n\\nSections:\\n${brief.sections.map(s => `${s.heading}: ${s.content.substring(0, 200)}...`).join('\\n\\n')}\\n\\nGenerate a 2-3 paragraph summary highlighting the key legal arguments and requested relief.`\n          }\n        ]\n      });\n\n      return response.content[0].text;\n    } catch (error) {\n      console.error('Error generating brief summary:', error);\n      return 'Summary generation failed. Please review the full brief content.';\n    }\n  }\n\n  getBriefTemplates() {\n    return [\n      {\n        id: 'motion-dismiss',\n        name: 'Motion to Dismiss',\n        type: 'motion' as const,\n        description: 'Standard motion to dismiss for failure to state a claim',\n        defaultSections: [\n          'Statement of Facts',\n          'Legal Argument',\n          'Standard of Review',\n          'Conclusion'\n        ]\n      },\n      {\n        id: 'summary-judgment',\n        name: 'Motion for Summary Judgment',\n        type: 'summary_judgment' as const,\n        description: 'Motion for summary judgment with supporting facts',\n        defaultSections: [\n          'Statement of Undisputed Facts',\n          'Legal Standard',\n          'Argument',\n          'Conclusion'\n        ]\n      },\n      {\n        id: 'complaint',\n        name: 'Civil Rights Complaint',\n        type: 'complaint' as const,\n        description: 'Federal civil rights complaint under Section 1983',\n        defaultSections: [\n          'Jurisdiction and Venue',\n          'Parties',\n          'Factual Allegations',\n          'Claims for Relief',\n          'Prayer for Relief'\n        ]\n      },\n      {\n        id: 'injunction',\n        name: 'Motion for Injunctive Relief',\n        type: 'injunction' as const,\n        description: 'Motion for temporary or preliminary injunction',\n        defaultSections: [\n          'Background',\n          'Legal Standard',\n          'Likelihood of Success',\n          'Irreparable Harm',\n          'Balance of Hardships',\n          'Public Interest'\n        ]\n      },\n      {\n        id: 'response',\n        name: 'Response Brief',\n        type: 'response' as const,\n        description: 'Response to opposing motion or brief',\n        defaultSections: [\n          'Introduction',\n          'Counter-Statement of Facts',\n          'Legal Argument',\n          'Conclusion'\n        ]\n      }\n    ];\n  }\n}\n\nexport const briefGenerationService = new BriefGenerationService();","size_bytes":10342},"server/services/couponService.ts":{"content":"import { eq, and, gte, lte, isNull, or, sql } from 'drizzle-orm';\nimport { db } from '../db';\nimport { couponCodes, couponUsage, type CouponCode, type InsertCouponCode, type InsertCouponUsage } from '@shared/schema';\n\nexport interface CouponValidationResult {\n  valid: boolean;\n  coupon?: CouponCode;\n  error?: string;\n  discountAmount?: number;\n  finalAmount?: number;\n}\n\nexport interface CreateCouponRequest extends Omit<InsertCouponCode, 'code'> {\n  code?: string; // Optional - will generate if not provided\n}\n\nexport class CouponService {\n  \n  /**\n   * Generate a unique coupon code\n   */\n  generateCouponCode(prefix: string = '', length: number = 8): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = prefix.toUpperCase();\n    \n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    \n    return result;\n  }\n\n  /**\n   * Create a new coupon code\n   */\n  async createCoupon(data: CreateCouponRequest): Promise<CouponCode> {\n    // Generate code if not provided\n    let couponCode = data.code;\n    if (!couponCode) {\n      // Generate unique code\n      let attempts = 0;\n      do {\n        couponCode = this.generateCouponCode('', 8);\n        attempts++;\n        \n        // Check if code already exists\n        const existing = await db.select()\n          .from(couponCodes)\n          .where(eq(couponCodes.code, couponCode))\n          .limit(1);\n          \n        if (existing.length === 0) break;\n        \n        if (attempts > 10) {\n          throw new Error('Failed to generate unique coupon code');\n        }\n      } while (true);\n    }\n\n    const [coupon] = await db.insert(couponCodes)\n      .values({\n        ...data,\n        code: couponCode,\n        updatedAt: new Date(),\n      })\n      .returning();\n\n    return coupon;\n  }\n\n  /**\n   * Get coupon by code\n   */\n  async getCouponByCode(code: string): Promise<CouponCode | null> {\n    const [coupon] = await db.select()\n      .from(couponCodes)\n      .where(eq(couponCodes.code, code.toUpperCase()))\n      .limit(1);\n\n    return coupon || null;\n  }\n\n  /**\n   * Validate coupon for use\n   */\n  async validateCoupon(\n    code: string,\n    userId?: string,\n    orderAmount?: number,\n    planType?: string\n  ): Promise<CouponValidationResult> {\n    const coupon = await this.getCouponByCode(code);\n\n    if (!coupon) {\n      return { valid: false, error: 'Coupon code not found' };\n    }\n\n    // Check if coupon is active\n    if (!coupon.isActive) {\n      return { valid: false, error: 'Coupon code is no longer active' };\n    }\n\n    // Check validity dates\n    const now = new Date();\n    if (coupon.validFrom && new Date(coupon.validFrom) > now) {\n      return { valid: false, error: 'Coupon code is not yet valid' };\n    }\n\n    if (coupon.validUntil && new Date(coupon.validUntil) < now) {\n      return { valid: false, error: 'Coupon code has expired' };\n    }\n\n    // Check usage limits\n    if (coupon.maxUses !== null && coupon.currentUses >= coupon.maxUses) {\n      return { valid: false, error: 'Coupon code has reached its usage limit' };\n    }\n\n    // Check if user has already used this coupon (for single-use coupons)\n    if (userId && coupon.maxUses === 1) {\n      const existingUsage = await db.select()\n        .from(couponUsage)\n        .where(and(\n          eq(couponUsage.couponId, coupon.id),\n          eq(couponUsage.userId, userId)\n        ))\n        .limit(1);\n\n      if (existingUsage.length > 0) {\n        return { valid: false, error: 'You have already used this coupon code' };\n      }\n    }\n\n    // Check minimum order value\n    if (coupon.minOrderValue && orderAmount && orderAmount < parseFloat(coupon.minOrderValue)) {\n      return { \n        valid: false, \n        error: `Minimum order value of $${coupon.minOrderValue} required` \n      };\n    }\n\n    // Check applicable plans\n    if (coupon.applicablePlans && coupon.applicablePlans.length > 0 && planType) {\n      if (!coupon.applicablePlans.includes(planType)) {\n        return { valid: false, error: 'Coupon code is not applicable to this plan' };\n      }\n    }\n\n    // Calculate discount\n    let discountAmount = 0;\n    let finalAmount = orderAmount || 0;\n\n    if (coupon.discountType === 'percentage') {\n      discountAmount = (finalAmount * parseFloat(coupon.discountValue)) / 100;\n    } else if (coupon.discountType === 'fixed') {\n      discountAmount = Math.min(parseFloat(coupon.discountValue), finalAmount);\n    }\n\n    finalAmount = Math.max(0, finalAmount - discountAmount);\n\n    return {\n      valid: true,\n      coupon,\n      discountAmount,\n      finalAmount,\n    };\n  }\n\n  /**\n   * Apply coupon and record usage\n   */\n  async applyCoupon(\n    couponId: number,\n    userId: string,\n    originalAmount: number,\n    discountApplied: number,\n    subscriptionId?: string,\n    metadata?: any\n  ): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Record usage\n      await tx.insert(couponUsage).values({\n        couponId,\n        userId,\n        discountApplied: discountApplied.toString(),\n        originalAmount: originalAmount.toString(),\n        finalAmount: (originalAmount - discountApplied).toString(),\n        subscriptionId,\n        metadata,\n      });\n\n      // Increment usage count\n      await tx.update(couponCodes)\n        .set({\n          currentUses: sql`${couponCodes.currentUses} + 1`,\n          updatedAt: new Date(),\n        })\n        .where(eq(couponCodes.id, couponId));\n    });\n  }\n\n  /**\n   * Get all coupons (admin function)\n   */\n  async getAllCoupons(): Promise<CouponCode[]> {\n    return await db.select().from(couponCodes).orderBy(couponCodes.createdAt);\n  }\n\n  /**\n   * Update coupon\n   */\n  async updateCoupon(id: number, data: Partial<InsertCouponCode>): Promise<CouponCode> {\n    const [coupon] = await db.update(couponCodes)\n      .set({\n        ...data,\n        updatedAt: new Date(),\n      })\n      .where(eq(couponCodes.id, id))\n      .returning();\n\n    if (!coupon) {\n      throw new Error('Coupon not found');\n    }\n\n    return coupon;\n  }\n\n  /**\n   * Deactivate coupon\n   */\n  async deactivateCoupon(id: number): Promise<CouponCode> {\n    return this.updateCoupon(id, { isActive: false });\n  }\n\n  /**\n   * Get coupon usage analytics\n   */\n  async getCouponAnalytics(couponId?: number) {\n    const query = db.select()\n      .from(couponUsage)\n      .leftJoin(couponCodes, eq(couponUsage.couponId, couponCodes.id));\n\n    if (couponId) {\n      query.where(eq(couponUsage.couponId, couponId));\n    }\n\n    const usage = await query;\n\n    // Calculate analytics\n    const totalUsage = usage.length;\n    const totalDiscountGiven = usage.reduce((sum, u) => sum + parseFloat(u.coupon_usage.discountApplied), 0);\n    const totalOriginalValue = usage.reduce((sum, u) => sum + parseFloat(u.coupon_usage.originalAmount), 0);\n\n    return {\n      totalUsage,\n      totalDiscountGiven,\n      totalOriginalValue,\n      averageDiscountPerUse: totalUsage > 0 ? totalDiscountGiven / totalUsage : 0,\n      usage,\n    };\n  }\n\n  /**\n   * Bulk create coupons\n   */\n  async bulkCreateCoupons(\n    template: CreateCouponRequest,\n    count: number,\n    prefix: string = ''\n  ): Promise<CouponCode[]> {\n    const coupons: CouponCode[] = [];\n    \n    for (let i = 0; i < count; i++) {\n      const couponCode = this.generateCouponCode(prefix, 8);\n      const coupon = await this.createCoupon({\n        ...template,\n        code: couponCode,\n      });\n      coupons.push(coupon);\n    }\n\n    return coupons;\n  }\n}\n\nexport const couponService = new CouponService();","size_bytes":7540},"server/services/ocrService.ts":{"content":"import Anthropic from '@anthropic-ai/sdk';\nimport { createReadStream } from 'fs';\nimport { promisify } from 'util';\nimport { exec } from 'child_process';\nimport path from 'path';\nimport fs from 'fs/promises';\n\nconst execAsync = promisify(exec);\n\n/*\nThe newest Anthropic model is \"claude-sonnet-4-20250514\", not \"claude-3-7-sonnet-20250219\", \"claude-3-5-sonnet-20241022\" nor \"claude-3-sonnet-20240229\". \n*/\nconst DEFAULT_MODEL_STR = \"claude-sonnet-4-20250514\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n});\n\nexport interface OCRResult {\n  extractedText: string;\n  confidence: number;\n  metadata: {\n    pageCount?: number;\n    documentType: string;\n    language: string;\n    processingTime: number;\n    fileSize: number;\n  };\n  entities: {\n    dates: string[];\n    names: string[];\n    organizations: string[];\n    locations: string[];\n    legalCitations: string[];\n    caseNumbers: string[];\n    statutes: string[];\n  };\n  summary: string;\n  keyPoints: string[];\n}\n\nexport interface DocumentAnalysis {\n  documentType: 'complaint' | 'motion' | 'order' | 'brief' | 'contract' | 'correspondence' | 'evidence' | 'other';\n  legalIssues: string[];\n  parties: string[];\n  importantDates: Array<{\n    date: string;\n    event: string;\n    significance: string;\n  }>;\n  legalCitations: Array<{\n    citation: string;\n    type: 'case' | 'statute' | 'regulation' | 'rule';\n    relevance: number;\n  }>;\n  keyTerms: string[];\n  actionItems: string[];\n  relevanceScore: number;\n}\n\nclass OCRService {\n  \n  async extractTextFromDocument(filePath: string, fileName: string): Promise<OCRResult> {\n    const startTime = Date.now();\n    const stats = await fs.stat(filePath);\n    const fileSize = stats.size;\n    \n    try {\n      let extractedText = '';\n      let pageCount: number | undefined;\n      \n      // Determine file type and extract text accordingly\n      const extension = path.extname(fileName).toLowerCase();\n      \n      if (extension === '.pdf') {\n        const result = await this.extractFromPDF(filePath);\n        extractedText = result.text;\n        pageCount = result.pageCount;\n      } else if (['.jpg', '.jpeg', '.png', '.tiff', '.bmp'].includes(extension)) {\n        extractedText = await this.extractFromImage(filePath);\n      } else if (['.doc', '.docx'].includes(extension)) {\n        extractedText = await this.extractFromWord(filePath);\n      } else if (extension === '.txt') {\n        extractedText = await fs.readFile(filePath, 'utf-8');\n      } else {\n        throw new Error(`Unsupported file type: ${extension}`);\n      }\n      \n      // Use AI to analyze and extract structured information\n      const analysis = await this.analyzeDocumentWithAI(extractedText, fileName);\n      \n      const processingTime = Date.now() - startTime;\n      \n      return {\n        extractedText,\n        confidence: 0.95, // High confidence for text-based extraction\n        metadata: {\n          pageCount,\n          documentType: analysis.documentType,\n          language: 'en', // Default to English, could be enhanced with language detection\n          processingTime,\n          fileSize\n        },\n        entities: analysis.entities,\n        summary: analysis.summary,\n        keyPoints: analysis.keyPoints\n      };\n      \n    } catch (error) {\n      console.error('OCR extraction error:', error);\n      throw new Error(`Failed to extract text from document: ${error.message}`);\n    }\n  }\n  \n  private async extractFromPDF(filePath: string): Promise<{text: string; pageCount: number}> {\n    try {\n      // Using pdftotext (part of poppler-utils) for PDF text extraction\n      const { stdout } = await execAsync(`pdftotext -layout \"${filePath}\" -`);\n      \n      // Get page count\n      const { stdout: pageInfo } = await execAsync(`pdfinfo \"${filePath}\" | grep Pages`);\n      const pageCount = parseInt(pageInfo.match(/Pages:\\s+(\\d+)/)?.[1] || '1');\n      \n      return {\n        text: stdout,\n        pageCount\n      };\n    } catch (error) {\n      // Fallback: try simple text extraction without layout\n      try {\n        const { stdout } = await execAsync(`pdftotext \"${filePath}\" -`);\n        return {\n          text: stdout,\n          pageCount: 1\n        };\n      } catch (fallbackError) {\n        throw new Error('PDF text extraction failed. Please ensure the PDF is not password-protected or corrupted.');\n      }\n    }\n  }\n  \n  private async extractFromImage(filePath: string): Promise<string> {\n    try {\n      // Using tesseract for OCR on images\n      const { stdout } = await execAsync(`tesseract \"${filePath}\" stdout -l eng`);\n      return stdout;\n    } catch (error) {\n      throw new Error('Image OCR failed. Please ensure the image is clear and contains readable text.');\n    }\n  }\n  \n  private async extractFromWord(filePath: string): Promise<string> {\n    try {\n      // Using antiword for .doc files or python-docx2txt for .docx files\n      const extension = path.extname(filePath).toLowerCase();\n      \n      if (extension === '.doc') {\n        const { stdout } = await execAsync(`antiword \"${filePath}\"`);\n        return stdout;\n      } else {\n        // For .docx files, we can use python-docx2txt if available\n        const { stdout } = await execAsync(`python3 -c \"import docx2txt; print(docx2txt.process('${filePath}'))\"`);\n        return stdout;\n      }\n    } catch (error) {\n      throw new Error('Word document text extraction failed. Please ensure the document is not corrupted.');\n    }\n  }\n  \n  private async analyzeDocumentWithAI(text: string, fileName: string): Promise<{\n    documentType: string;\n    entities: OCRResult['entities'];\n    summary: string;\n    keyPoints: string[];\n  }> {\n    try {\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 2000,\n        messages: [{\n          role: 'user',\n          content: `Analyze this legal document and extract structured information:\n\n**Document Name:** ${fileName}\n\n**Document Text:**\n${text.substring(0, 8000)} ${text.length > 8000 ? '...[truncated]' : ''}\n\nPlease analyze and return a JSON response with the following structure:\n{\n  \"documentType\": \"complaint|motion|order|brief|contract|correspondence|evidence|other\",\n  \"entities\": {\n    \"dates\": [\"array of important dates found\"],\n    \"names\": [\"array of person/entity names\"],\n    \"organizations\": [\"array of organizations/companies\"],\n    \"locations\": [\"array of locations mentioned\"],\n    \"legalCitations\": [\"array of case citations, statutes, etc.\"],\n    \"caseNumbers\": [\"array of case numbers found\"],\n    \"statutes\": [\"array of statute references\"]\n  },\n  \"summary\": \"2-3 sentence summary of the document\",\n  \"keyPoints\": [\"array of 3-5 key points or findings\"]\n}\n\nFocus on legal accuracy and extract only information that is clearly stated in the document.`\n        }]\n      });\n      \n      const analysisText = response.content[0].text;\n      \n      // Extract JSON from the response\n      const jsonMatch = analysisText.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n      \n      // Fallback if JSON parsing fails\n      return {\n        documentType: 'other',\n        entities: {\n          dates: [],\n          names: [],\n          organizations: [],\n          locations: [],\n          legalCitations: [],\n          caseNumbers: [],\n          statutes: []\n        },\n        summary: 'Document analysis failed - manual review required.',\n        keyPoints: ['Unable to extract key points automatically']\n      };\n      \n    } catch (error) {\n      console.error('AI document analysis error:', error);\n      \n      // Return basic analysis if AI fails\n      return {\n        documentType: 'other',\n        entities: {\n          dates: this.extractDatesFromText(text),\n          names: [],\n          organizations: [],\n          locations: [],\n          legalCitations: this.extractLegalCitations(text),\n          caseNumbers: this.extractCaseNumbers(text),\n          statutes: []\n        },\n        summary: 'Basic text extraction completed. Full analysis unavailable.',\n        keyPoints: ['Text extracted successfully', 'Manual review recommended']\n      };\n    }\n  }\n  \n  private extractDatesFromText(text: string): string[] {\n    const dateRegex = /\\b(?:\\d{1,2}\\/\\d{1,2}\\/\\d{2,4}|\\d{1,2}-\\d{1,2}-\\d{2,4}|(?:January|February|March|April|May|June|July|August|September|October|November|December)\\s+\\d{1,2},?\\s+\\d{4})\\b/gi;\n    const matches = text.match(dateRegex);\n    return matches ? [...new Set(matches)] : [];\n  }\n  \n  private extractLegalCitations(text: string): string[] {\n    // Basic legal citation patterns\n    const citationRegex = /\\b\\d+\\s+[A-Z][a-z]+\\.?\\s+\\d+|\\b\\d+\\s+U\\.?S\\.?\\s+\\d+|\\b\\d+\\s+F\\.?\\d*d?\\s+\\d+/g;\n    const matches = text.match(citationRegex);\n    return matches ? [...new Set(matches)] : [];\n  }\n  \n  private extractCaseNumbers(text: string): string[] {\n    // Common case number patterns\n    const caseNumberRegex = /\\b(?:Case\\s+No\\.?|Civil\\s+Action\\s+No\\.?|Docket\\s+No\\.?)\\s*:?\\s*([A-Z0-9-:]+)/gi;\n    const matches = text.match(caseNumberRegex);\n    return matches ? [...new Set(matches)] : [];\n  }\n  \n  async performDetailedDocumentAnalysis(ocrResult: OCRResult): Promise<DocumentAnalysis> {\n    try {\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 1500,\n        messages: [{\n          role: 'user',\n          content: `Perform a detailed legal analysis of this document:\n\n**Extracted Text:**\n${ocrResult.extractedText.substring(0, 6000)}\n\n**Previously Identified Entities:**\n- Legal Citations: ${ocrResult.entities.legalCitations.join(', ')}\n- Case Numbers: ${ocrResult.entities.caseNumbers.join(', ')}\n- Key Names: ${ocrResult.entities.names.join(', ')}\n\nPlease provide a detailed legal analysis in JSON format:\n{\n  \"documentType\": \"specific document type\",\n  \"legalIssues\": [\"array of legal issues identified\"],\n  \"parties\": [\"array of parties involved\"],\n  \"importantDates\": [\n    {\n      \"date\": \"date string\",\n      \"event\": \"what happened\",\n      \"significance\": \"why it matters\"\n    }\n  ],\n  \"legalCitations\": [\n    {\n      \"citation\": \"full citation\",\n      \"type\": \"case|statute|regulation|rule\",\n      \"relevance\": 0.1-1.0\n    }\n  ],\n  \"keyTerms\": [\"important legal terms\"],\n  \"actionItems\": [\"things that need to be done\"],\n  \"relevanceScore\": 0.1-1.0\n}`\n        }]\n      });\n      \n      const analysisText = response.content[0].text;\n      const jsonMatch = analysisText.match(/\\{[\\s\\S]*\\}/);\n      \n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n      \n      // Fallback analysis\n      return {\n        documentType: ocrResult.metadata.documentType as any,\n        legalIssues: ['Analysis pending'],\n        parties: ocrResult.entities.names.slice(0, 5),\n        importantDates: [],\n        legalCitations: ocrResult.entities.legalCitations.map(citation => ({\n          citation,\n          type: 'case' as const,\n          relevance: 0.5\n        })),\n        keyTerms: [],\n        actionItems: [],\n        relevanceScore: 0.5\n      };\n      \n    } catch (error) {\n      console.error('Detailed document analysis error:', error);\n      throw new Error('Failed to perform detailed document analysis');\n    }\n  }\n}\n\nexport const ocrService = new OCRService();","size_bytes":11280},"server/services/precedentResearch.ts":{"content":"import Anthropic from '@anthropic-ai/sdk';\n\n/*\nThe newest Anthropic model is \"claude-sonnet-4-20250514\", not \"claude-3-7-sonnet-20250219\", \"claude-3-5-sonnet-20241022\" nor \"claude-3-sonnet-20240229\". \n*/\nconst DEFAULT_MODEL_STR = \"claude-sonnet-4-20250514\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n});\n\nexport interface LegalPrecedent {\n  caseName: string;\n  citation: string;\n  court: string;\n  year: number;\n  jurisdiction: string;\n  keyHolding: string;\n  relevantFacts: string;\n  legalPrinciples: string[];\n  relevanceScore: number;\n  procedurralPosture: string;\n  outcome: string;\n  keyQuotes: string[];\n}\n\nexport interface StatuteReference {\n  title: string;\n  section: string;\n  jurisdiction: string;\n  text: string;\n  applicability: string;\n  relevanceScore: number;\n  relatedCases: string[];\n}\n\nexport interface ResearchQuery {\n  legalIssue: string;\n  jurisdiction?: string;\n  caseType: string;\n  factualContext: string;\n  dateRange?: {\n    startYear: number;\n    endYear: number;\n  };\n  courtLevel?: 'supreme' | 'appellate' | 'district' | 'all';\n  includeStatutes?: boolean;\n  maxResults?: number;\n}\n\nexport interface ResearchResults {\n  query: ResearchQuery;\n  precedents: LegalPrecedent[];\n  statutes: StatuteReference[];\n  searchSummary: string;\n  legalTheories: string[];\n  strengthAssessment: {\n    strongPrecedents: number;\n    moderatePrecedents: number;\n    weakPrecedents: number;\n    overallStrength: 'strong' | 'moderate' | 'weak';\n    keyRisks: string[];\n  };\n  recommendedStrategy: string;\n  additionalResearchSuggestions: string[];\n}\n\nclass PrecedentResearchService {\n  \n  async conductResearch(query: ResearchQuery): Promise<ResearchResults> {\n    try {\n      // Primary research using AI knowledge of case law\n      const precedents = await this.findRelevantPrecedents(query);\n      const statutes = query.includeStatutes ? await this.findRelevantStatutes(query) : [];\n      \n      // Analyze the strength of the legal position\n      const strengthAssessment = await this.assessLegalStrength(precedents, query);\n      \n      // Generate strategic recommendations\n      const strategy = await this.generateResearchStrategy(precedents, statutes, query);\n      \n      return {\n        query,\n        precedents,\n        statutes,\n        searchSummary: strategy.summary,\n        legalTheories: strategy.theories,\n        strengthAssessment,\n        recommendedStrategy: strategy.recommendation,\n        additionalResearchSuggestions: strategy.additionalResearch\n      };\n      \n    } catch (error) {\n      console.error('Legal research error:', error);\n      throw new Error(`Research failed: ${error.message}`);\n    }\n  }\n  \n  private async findRelevantPrecedents(query: ResearchQuery): Promise<LegalPrecedent[]> {\n    try {\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 4000,\n        messages: [{\n          role: 'user',\n          content: `As a legal research expert, find relevant case precedents for this legal issue:\n\n**Legal Issue:** ${query.legalIssue}\n**Case Type:** ${query.caseType}\n**Jurisdiction:** ${query.jurisdiction || 'Federal and State'}\n**Factual Context:** ${query.factualContext}\n${query.dateRange ? `**Date Range:** ${query.dateRange.startYear} - ${query.dateRange.endYear}` : ''}\n${query.courtLevel ? `**Court Level:** ${query.courtLevel}` : ''}\n\nPlease provide a detailed analysis with relevant case precedents. For each case, include:\n\n1. **Case Name and Citation**\n2. **Court and Year**\n3. **Key Holding**\n4. **Relevant Facts**\n5. **Legal Principles**\n6. **Relevance Score** (0.1-1.0)\n7. **Key Quotes** from the opinion\n\nFocus on:\n- Landmark cases that established legal principles\n- Recent decisions that may have changed the law\n- Circuit splits or conflicting authorities\n- Cases with similar factual patterns\n\nFormat your response as detailed case analyses, prioritizing the most relevant and authoritative precedents.\n\nLimit to the top ${query.maxResults || 10} most relevant cases.`\n        }]\n      });\n      \n      const analysisText = response.content[0].text;\n      \n      // Parse the AI response to extract case information\n      return this.parseAIPrecedentResponse(analysisText);\n      \n    } catch (error) {\n      console.error('Precedent research error:', error);\n      throw new Error('Failed to find relevant precedents');\n    }\n  }\n  \n  private parseAIPrecedentResponse(text: string): LegalPrecedent[] {\n    const precedents: LegalPrecedent[] = [];\n    \n    // Split by case markers and process each case\n    const caseBlocks = text.split(/(?:Case \\d+:|^\\d+\\.|(?:^|\\n)(?=[A-Z][^.]*v\\.|\\b[A-Z][^.]*\\d{4}\\b))/m)\n      .filter(block => block.trim().length > 50);\n    \n    for (const block of caseBlocks.slice(0, 10)) {\n      try {\n        const precedent = this.extractCaseFromBlock(block);\n        if (precedent) {\n          precedents.push(precedent);\n        }\n      } catch (error) {\n        console.warn('Failed to parse case block:', error);\n        continue;\n      }\n    }\n    \n    return precedents;\n  }\n  \n  private extractCaseFromBlock(text: string): LegalPrecedent | null {\n    // Extract case name (pattern: Name v. Name)\n    const caseNameMatch = text.match(/([A-Z][^v\\n]*v\\.?\\s+[A-Z][^,\\n(]*)/);\n    if (!caseNameMatch) return null;\n    \n    // Extract citation\n    const citationMatch = text.match(/\\d+\\s+[A-Z][a-z]*\\.?\\s*\\d+|\\d+\\s+U\\.?S\\.?\\s+\\d+|\\d+\\s+F\\.?\\d*d?\\s+\\d+/);\n    \n    // Extract year\n    const yearMatch = text.match(/\\((\\d{4})\\)/);\n    \n    // Extract court\n    const courtMatch = text.match(/(?:U\\.S\\.|Supreme Court|Circuit|District|Court of Appeals|[A-Z][a-z]*\\s+(?:Circuit|District|Court))/);\n    \n    // Extract relevance score\n    const scoreMatch = text.match(/(?:relevance|score):\\s*(\\d*\\.?\\d+)/i);\n    \n    return {\n      caseName: caseNameMatch[1].trim(),\n      citation: citationMatch?.[0] || 'Citation not found',\n      court: courtMatch?.[0] || 'Court not specified',\n      year: yearMatch ? parseInt(yearMatch[1]) : 2000,\n      jurisdiction: this.inferJurisdiction(courtMatch?.[0] || ''),\n      keyHolding: this.extractSection(text, 'holding|held|rule'),\n      relevantFacts: this.extractSection(text, 'facts|background'),\n      legalPrinciples: this.extractPrinciples(text),\n      relevanceScore: scoreMatch ? parseFloat(scoreMatch[1]) : 0.7,\n      procedurralPosture: this.extractSection(text, 'posture|procedural'),\n      outcome: this.extractSection(text, 'outcome|result|decision'),\n      keyQuotes: this.extractQuotes(text)\n    };\n  }\n  \n  private extractSection(text: string, keywords: string): string {\n    const regex = new RegExp(`(?:${keywords})[^.]*[^.]*\\\\.(?:[^.]*\\\\.){0,2}`, 'i');\n    const match = text.match(regex);\n    return match ? match[0].trim() : 'Not specified';\n  }\n  \n  private extractPrinciples(text: string): string[] {\n    const principles: string[] = [];\n    const lines = text.split('\\n');\n    \n    for (const line of lines) {\n      if (line.includes('principle') || line.includes('establishes') || line.includes('holds that')) {\n        principles.push(line.trim());\n      }\n    }\n    \n    return principles.slice(0, 3);\n  }\n  \n  private extractQuotes(text: string): string[] {\n    const quotes = text.match(/\"([^\"]*)\"/g);\n    return quotes ? quotes.slice(0, 2).map(q => q.slice(1, -1)) : [];\n  }\n  \n  private inferJurisdiction(court: string): string {\n    if (court.includes('U.S.') || court.includes('Supreme')) return 'Federal';\n    if (court.includes('Circuit')) return 'Federal Circuit';\n    if (court.includes('District')) return 'Federal District';\n    return 'State';\n  }\n  \n  private async findRelevantStatutes(query: ResearchQuery): Promise<StatuteReference[]> {\n    try {\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 2000,\n        messages: [{\n          role: 'user',\n          content: `Find relevant statutes and regulations for this legal issue:\n\n**Legal Issue:** ${query.legalIssue}\n**Case Type:** ${query.caseType}\n**Jurisdiction:** ${query.jurisdiction || 'Federal'}\n**Factual Context:** ${query.factualContext}\n\nIdentify applicable statutes including:\n- Federal statutes (USC)\n- State statutes (if jurisdiction specified)\n- Relevant regulations (CFR)\n- Court rules\n\nFor each statute, provide:\n1. **Title and Section**\n2. **Jurisdiction**\n3. **Key Applicable Text**\n4. **How it applies to this case**\n5. **Relevance Score** (0.1-1.0)\n6. **Related case law**\n\nFocus on statutes that directly apply to the legal issue and factual scenario.`\n        }]\n      });\n      \n      return this.parseStatuteResponse(response.content[0].text);\n      \n    } catch (error) {\n      console.error('Statute research error:', error);\n      return [];\n    }\n  }\n  \n  private parseStatuteResponse(text: string): StatuteReference[] {\n    const statutes: StatuteReference[] = [];\n    const sections = text.split(/\\d+\\.\\s+|\\n\\s*-\\s+/).filter(s => s.trim().length > 20);\n    \n    for (const section of sections.slice(0, 5)) {\n      const titleMatch = section.match(/(?:USC|CFR|\\d+\\s+U\\.S\\.C\\.|\\d+\\s+C\\.F\\.R\\.)[^,\\n]*/);\n      if (titleMatch) {\n        statutes.push({\n          title: titleMatch[0].trim(),\n          section: this.extractSection(section, 'section|Â§') || 'Not specified',\n          jurisdiction: section.includes('USC') || section.includes('U.S.C') ? 'Federal' : 'State',\n          text: section.substring(0, 300) + '...',\n          applicability: this.extractSection(section, 'applies|applicable|relevant'),\n          relevanceScore: 0.8,\n          relatedCases: []\n        });\n      }\n    }\n    \n    return statutes;\n  }\n  \n  private async assessLegalStrength(precedents: LegalPrecedent[], query: ResearchQuery): Promise<ResearchResults['strengthAssessment']> {\n    const strongPrecedents = precedents.filter(p => p.relevanceScore >= 0.8).length;\n    const moderatePrecedents = precedents.filter(p => p.relevanceScore >= 0.5 && p.relevanceScore < 0.8).length;\n    const weakPrecedents = precedents.filter(p => p.relevanceScore < 0.5).length;\n    \n    let overallStrength: 'strong' | 'moderate' | 'weak' = 'weak';\n    if (strongPrecedents >= 3) overallStrength = 'strong';\n    else if (strongPrecedents >= 1 || moderatePrecedents >= 3) overallStrength = 'moderate';\n    \n    const keyRisks = await this.identifyLegalRisks(precedents, query);\n    \n    return {\n      strongPrecedents,\n      moderatePrecedents,\n      weakPrecedents,\n      overallStrength,\n      keyRisks\n    };\n  }\n  \n  private async identifyLegalRisks(precedents: LegalPrecedent[], query: ResearchQuery): Promise<string[]> {\n    try {\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 800,\n        messages: [{\n          role: 'user',\n          content: `Based on these legal precedents and the case context, identify the key legal risks and potential weaknesses in the legal position:\n\n**Case Context:** ${query.legalIssue}\n**Key Precedents:** ${precedents.slice(0, 3).map(p => `${p.caseName}: ${p.keyHolding}`).join('; ')}\n\nIdentify 3-5 key risks or weaknesses, such as:\n- Adverse precedents or circuit splits\n- Factual distinctions that might weaken the case\n- Procedural hurdles or statute of limitations issues\n- Recent legal developments that might affect the outcome\n- Counter-arguments the opposition might raise\n\nBe specific and practical in your risk assessment.`\n        }]\n      });\n      \n      const risks = response.content[0].text\n        .split('\\n')\n        .filter(line => line.trim().match(/^\\d+\\.|\\-|\\â¢/))\n        .map(line => line.replace(/^\\d+\\.\\s*|\\-\\s*|\\â¢\\s*/, '').trim())\n        .filter(risk => risk.length > 10)\n        .slice(0, 5);\n        \n      return risks;\n      \n    } catch (error) {\n      console.error('Risk assessment error:', error);\n      return ['Risk assessment unavailable - manual review recommended'];\n    }\n  }\n  \n  private async generateResearchStrategy(\n    precedents: LegalPrecedent[], \n    statutes: StatuteReference[], \n    query: ResearchQuery\n  ): Promise<{\n    summary: string;\n    theories: string[];\n    recommendation: string;\n    additionalResearch: string[];\n  }> {\n    try {\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 1200,\n        messages: [{\n          role: 'user',\n          content: `Based on the legal research conducted, provide strategic recommendations:\n\n**Legal Issue:** ${query.legalIssue}\n**Strong Precedents Found:** ${precedents.filter(p => p.relevanceScore >= 0.8).length}\n**Total Legal Authorities:** ${precedents.length + statutes.length}\n\n**Key Cases:** ${precedents.slice(0, 3).map(p => p.caseName).join(', ')}\n\nProvide:\n1. **Research Summary** (2-3 sentences)\n2. **Legal Theories** to pursue (3-4 theories)\n3. **Strategic Recommendation** (paragraph)\n4. **Additional Research Needed** (3-5 specific areas)\n\nFocus on actionable insights for legal strategy and case development.`\n        }]\n      });\n      \n      const strategText = response.content[0].text;\n      \n      return {\n        summary: this.extractSection(strategText, 'summary|research shows') || 'Research completed successfully',\n        theories: this.extractListItems(strategText, 'theories|theory') || ['Primary liability theory', 'Alternative damages theory'],\n        recommendation: this.extractSection(strategText, 'recommend|strategy|strategic') || 'Proceed with comprehensive case development',\n        additionalResearch: this.extractListItems(strategText, 'additional|research|needed') || ['Expert witness research', 'Jurisdictional analysis']\n      };\n      \n    } catch (error) {\n      console.error('Strategy generation error:', error);\n      return {\n        summary: 'Legal research completed with relevant authorities identified.',\n        theories: ['Primary legal theory based on precedents'],\n        recommendation: 'Proceed with case development based on research findings.',\n        additionalResearch: ['Additional case law research', 'Expert consultation recommended']\n      };\n    }\n  }\n  \n  private extractListItems(text: string, keywords: string): string[] {\n    const regex = new RegExp(`(?:${keywords})[^:]*:?([^.]*(?:[^.]*\\\\.){1,3})`, 'i');\n    const match = text.match(regex);\n    \n    if (match) {\n      return match[1]\n        .split(/\\d+\\.|\\n\\s*-\\s*|\\n\\s*\\â¢\\s*/)\n        .map(item => item.trim())\n        .filter(item => item.length > 5)\n        .slice(0, 5);\n    }\n    \n    return [];\n  }\n}\n\nexport const precedentResearchService = new PrecedentResearchService();","size_bytes":14564},"server/services/semanticSearch.ts":{"content":"import Anthropic from '@anthropic-ai/sdk';\nimport { ocrService, type OCRResult } from './ocrService';\n\n/*\nThe newest Anthropic model is \"claude-sonnet-4-20250514\", not \"claude-3-7-sonnet-20250219\", \"claude-3-5-sonnet-20241022\" nor \"claude-3-sonnet-20240229\". \n*/\nconst DEFAULT_MODEL_STR = \"claude-sonnet-4-20250514\";\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n});\n\nexport interface SemanticSearchQuery {\n  query: string;\n  caseId?: string;\n  documentTypes?: string[];\n  dateRange?: {\n    startDate: string;\n    endDate: string;\n  };\n  legalContext?: string;\n  searchType: 'general' | 'legal_research' | 'fact_finding' | 'precedent_search' | 'evidence_analysis';\n  maxResults?: number;\n  includeRelevanceScoring?: boolean;\n}\n\nexport interface SearchResult {\n  documentId: string;\n  title: string;\n  documentType: string;\n  relevanceScore: number;\n  matchedContent: string[];\n  keyTermsFound: string[];\n  contextualSummary: string;\n  legalSignificance?: string;\n  relatedEntities: {\n    people: string[];\n    organizations: string[];\n    dates: string[];\n    locations: string[];\n  };\n  citationsFound: string[];\n  actionableInsights: string[];\n  extractedFacts: string[];\n  filePath?: string;\n  pageReferences?: number[];\n}\n\nexport interface SemanticAnalysis {\n  conceptualSimilarity: number;\n  legalRelevance: number;\n  factualAlignment: number;\n  evidentiaryValue: number;\n  strategicImportance: number;\n  overallRelevance: number;\n}\n\nexport interface SearchResults {\n  query: SemanticSearchQuery;\n  results: SearchResult[];\n  totalResults: number;\n  searchAnalysis: {\n    conceptsCovered: string[];\n    legalIssuesIdentified: string[];\n    evidenceTypes: string[];\n    researchGaps: string[];\n  };\n  relatedQueries: string[];\n  searchSuggestions: string[];\n}\n\n// Mock document storage - in a real application, this would connect to your document database\ninterface DocumentIndex {\n  id: string;\n  title: string;\n  type: string;\n  content: string;\n  ocrResult?: OCRResult;\n  caseId?: string;\n  uploadDate: string;\n  filePath?: string;\n  metadata: Record<string, any>;\n}\n\nclass SemanticSearchService {\n  private documentIndex: DocumentIndex[] = [];\n  \n  // Initialize with sample legal documents for demonstration\n  constructor() {\n    this.initializeSampleDocuments();\n  }\n  \n  async addDocumentToIndex(document: {\n    id: string;\n    title: string;\n    type: string;\n    content?: string;\n    filePath?: string;\n    caseId?: string;\n    metadata?: Record<string, any>;\n  }): Promise<void> {\n    try {\n      let content = document.content || '';\n      let ocrResult: OCRResult | undefined;\n      \n      // If file path provided, extract text using OCR\n      if (document.filePath && !content) {\n        ocrResult = await ocrService.extractTextFromDocument(document.filePath, document.title);\n        content = ocrResult.extractedText;\n      }\n      \n      const indexEntry: DocumentIndex = {\n        id: document.id,\n        title: document.title,\n        type: document.type,\n        content,\n        ocrResult,\n        caseId: document.caseId,\n        uploadDate: new Date().toISOString(),\n        filePath: document.filePath,\n        metadata: document.metadata || {}\n      };\n      \n      // Remove existing entry if updating\n      this.documentIndex = this.documentIndex.filter(doc => doc.id !== document.id);\n      this.documentIndex.push(indexEntry);\n      \n    } catch (error: any) {\n      console.error('Error adding document to index:', error);\n      throw new Error(`Failed to index document: ${error.message}`);\n    }\n  }\n  \n  async performSemanticSearch(query: SemanticSearchQuery): Promise<SearchResults> {\n    try {\n      // Filter documents based on query parameters\n      let candidateDocuments = this.documentIndex;\n      \n      if (query.caseId) {\n        candidateDocuments = candidateDocuments.filter(doc => doc.caseId === query.caseId);\n      }\n      \n      if (query.documentTypes && query.documentTypes.length > 0) {\n        candidateDocuments = candidateDocuments.filter(doc => \n          query.documentTypes!.includes(doc.type)\n        );\n      }\n      \n      if (query.dateRange) {\n        candidateDocuments = candidateDocuments.filter(doc => {\n          const docDate = new Date(doc.uploadDate);\n          const startDate = new Date(query.dateRange!.startDate);\n          const endDate = new Date(query.dateRange!.endDate);\n          return docDate >= startDate && docDate <= endDate;\n        });\n      }\n      \n      // Perform semantic analysis on each candidate document\n      const searchResults: SearchResult[] = [];\n      \n      for (const doc of candidateDocuments) {\n        const result = await this.analyzeDocumentRelevance(doc, query);\n        if (result && result.relevanceScore > 0.2) { // Minimum relevance threshold\n          searchResults.push(result);\n        }\n      }\n      \n      // Sort by relevance score\n      searchResults.sort((a, b) => b.relevanceScore - a.relevanceScore);\n      \n      // Limit results\n      const maxResults = query.maxResults || 20;\n      const limitedResults = searchResults.slice(0, maxResults);\n      \n      // Generate search analysis\n      const searchAnalysis = await this.generateSearchAnalysis(query, limitedResults);\n      \n      return {\n        query,\n        results: limitedResults,\n        totalResults: searchResults.length,\n        searchAnalysis,\n        relatedQueries: await this.generateRelatedQueries(query, limitedResults),\n        searchSuggestions: await this.generateSearchSuggestions(query, limitedResults)\n      };\n      \n    } catch (error: any) {\n      console.error('Semantic search error:', error);\n      throw new Error(`Search failed: ${error.message}`);\n    }\n  }\n  \n  private async analyzeDocumentRelevance(document: DocumentIndex, query: SemanticSearchQuery): Promise<SearchResult | null> {\n    try {\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 1500,\n        messages: [{\n          role: 'user',\n          content: `Analyze the relevance of this legal document to the search query:\n\n**Search Query:** ${query.query}\n**Search Type:** ${query.searchType}\n**Legal Context:** ${query.legalContext || 'General legal research'}\n\n**Document Title:** ${document.title}\n**Document Type:** ${document.type}\n**Document Content:** ${document.content.substring(0, 3000)}${document.content.length > 3000 ? '...' : ''}\n\nPlease analyze and provide a JSON response:\n{\n  \"relevanceScore\": 0.0-1.0,\n  \"matchedContent\": [\"array of relevant text snippets\"],\n  \"keyTermsFound\": [\"important terms that match the query\"],\n  \"contextualSummary\": \"brief summary of how this document relates to the query\",\n  \"legalSignificance\": \"why this document matters legally\",\n  \"relatedEntities\": {\n    \"people\": [\"names found\"],\n    \"organizations\": [\"organizations mentioned\"],\n    \"dates\": [\"important dates\"],\n    \"locations\": [\"locations mentioned\"]\n  },\n  \"citationsFound\": [\"legal citations in the document\"],\n  \"actionableInsights\": [\"insights that could inform legal strategy\"],\n  \"extractedFacts\": [\"key facts from the document\"]\n}\n\nFocus on legal relevance, factual alignment, and strategic value for the query.`\n        }]\n      });\n      \n      const analysisText = (response.content[0] as any).text;\n      console.log('Raw Claude response:', analysisText);\n      \n      // Clean up the response text to extract valid JSON (handle markdown code blocks)\n      let cleanedText = analysisText.replace(/```json\\s*|\\s*```/g, '').trim();\n      const jsonMatch = cleanedText.match(/\\{[\\s\\S]*?\\}/);\n      \n      if (jsonMatch) {\n        try {\n          // Clean up common JSON parsing issues\n          let cleanJson = jsonMatch[0]\n            .replace(/,\\s*}/g, '}') // Remove trailing commas before }\n            .replace(/,\\s*]/g, ']') // Remove trailing commas before ]\n            .replace(/\\n/g, ' ') // Replace newlines with spaces\n            .replace(/\\s+/g, ' '); // Normalize whitespace\n          \n          console.log('Attempting to parse JSON...');\n          const analysis = JSON.parse(cleanJson);\n          \n          return {\n            documentId: document.id,\n            title: document.title,\n            documentType: document.type,\n            relevanceScore: analysis.relevanceScore || 0.5,\n            matchedContent: analysis.matchedContent || [],\n            keyTermsFound: analysis.keyTermsFound || [],\n            contextualSummary: analysis.contextualSummary || '',\n            legalSignificance: analysis.legalSignificance,\n            relatedEntities: analysis.relatedEntities || { people: [], organizations: [], dates: [], locations: [] },\n            citationsFound: analysis.citationsFound || [],\n            actionableInsights: analysis.actionableInsights || [],\n            extractedFacts: analysis.extractedFacts || [],\n            filePath: document.filePath,\n            pageReferences: [] // Could be enhanced with page-level analysis\n          };\n        } catch (parseError) {\n          console.error('Failed to parse JSON, using fallback:', parseError);\n          // Return a simple fallback result when AI analysis fails\n          return {\n            documentId: document.id,\n            title: document.title,\n            documentType: document.type,\n            relevanceScore: 0.5,\n            matchedContent: [document.content.substring(0, 200) + '...'],\n            keyTermsFound: [query.query],\n            contextualSummary: `Document matches search query: ${query.query}`,\n            legalSignificance: 'Document may be relevant to the legal matter.',\n            relatedEntities: { people: [], organizations: [], dates: [], locations: [] },\n            citationsFound: [],\n            actionableInsights: ['Review document for relevant information'],\n            extractedFacts: ['Document content available for analysis'],\n            filePath: document.filePath,\n            pageReferences: []\n          };\n        }\n      }\n      \n      return null;\n      \n    } catch (error) {\n      console.error('Document relevance analysis error:', error);\n      return null;\n    }\n  }\n  \n  private async generateSearchAnalysis(query: SemanticSearchQuery, results: SearchResult[]): Promise<SearchResults['searchAnalysis']> {\n    try {\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 800,\n        messages: [{\n          role: 'user',\n          content: `Analyze these search results to identify patterns and gaps:\n\n**Search Query:** ${query.query}\n**Results Found:** ${results.length}\n**Top Results:** ${results.slice(0, 3).map(r => r.title).join(', ')}\n\n**Key Insights from Results:** ${results.slice(0, 5).map(r => r.contextualSummary).join('; ')}\n\nProvide analysis in JSON format:\n{\n  \"conceptsCovered\": [\"main legal concepts found in results\"],\n  \"legalIssuesIdentified\": [\"legal issues surfaced by the search\"],\n  \"evidenceTypes\": [\"types of evidence found\"],\n  \"researchGaps\": [\"areas that need more research\"]\n}`\n        }]\n      });\n      \n      const analysisText = (response.content[0] as any).text;\n      const jsonMatch = analysisText.match(/\\{[\\s\\S]*\\}/);\n      \n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n      \n    } catch (error) {\n      console.error('Search analysis error:', error);\n    }\n    \n    return {\n      conceptsCovered: ['Legal research completed'],\n      legalIssuesIdentified: ['Primary legal issues'],\n      evidenceTypes: ['Documentary evidence'],\n      researchGaps: ['Additional research recommended']\n    };\n  }\n  \n  private async generateRelatedQueries(query: SemanticSearchQuery, results: SearchResult[]): Promise<string[]> {\n    try {\n      const response = await anthropic.messages.create({\n        model: DEFAULT_MODEL_STR,\n        max_tokens: 400,\n        messages: [{\n          role: 'user',\n          content: `Based on the search query \"${query.query}\" and the results found, suggest 5 related search queries that would help with comprehensive legal research:\n\nConsider:\n- Related legal concepts\n- Different perspectives on the same issue\n- Broader or narrower search terms\n- Procedural or substantive law variations\n\nProvide just the query strings, one per line.`\n        }]\n      });\n      \n      return ((response.content[0] as any).text as string)\n        .split('\\n')\n        .map((line: string) => line.trim())\n        .filter((line: string) => line.length > 5 && !line.match(/^\\d+\\./))\n        .slice(0, 5);\n        \n    } catch (error) {\n      console.error('Related queries generation error:', error);\n      return [];\n    }\n  }\n  \n  private async generateSearchSuggestions(query: SemanticSearchQuery, results: SearchResult[]): Promise<string[]> {\n    const suggestions = [\n      'Try searching for related legal precedents',\n      'Search for expert witness materials on this topic',\n      'Look for procedural requirements and deadlines',\n      'Research opposing arguments and counter-authorities',\n      'Find similar cases in your jurisdiction'\n    ];\n    \n    return suggestions.slice(0, 3);\n  }\n  \n  async findSimilarDocuments(documentId: string, maxResults: number = 10): Promise<SearchResult[]> {\n    const sourceDocument = this.documentIndex.find(doc => doc.id === documentId);\n    if (!sourceDocument) {\n      throw new Error('Source document not found');\n    }\n    \n    // Use the document content as a query to find similar documents\n    const query: SemanticSearchQuery = {\n      query: sourceDocument.content.substring(0, 500) + '...',\n      searchType: 'general',\n      maxResults\n    };\n    \n    const results = await this.performSemanticSearch(query);\n    return results.results.filter(result => result.documentId !== documentId);\n  }\n  \n  private initializeSampleDocuments(): void {\n    // Add some sample documents for demonstration\n    const sampleDocs = [\n      {\n        id: 'sample-1',\n        title: 'Civil Rights Complaint Template',\n        type: 'complaint',\n        content: 'This is a sample civil rights complaint under 42 U.S.C. Â§ 1983 alleging constitutional violations by government officials...',\n        metadata: { isTemplate: true }\n      },\n      {\n        id: 'sample-2',\n        title: 'Motion to Dismiss Example',\n        type: 'motion',\n        content: 'Pursuant to Federal Rule of Civil Procedure 12(b)(6), defendant respectfully moves to dismiss plaintiff\\'s complaint for failure to state a claim upon which relief can be granted...',\n        metadata: { isTemplate: true }\n      }\n    ];\n    \n    sampleDocs.forEach(doc => {\n      this.documentIndex.push({\n        ...doc,\n        uploadDate: new Date().toISOString()\n      } as DocumentIndex);\n    });\n  }\n  \n  // Advanced search methods\n  async searchByLegalConcept(concept: string, caseId?: string): Promise<SearchResult[]> {\n    const query: SemanticSearchQuery = {\n      query: concept,\n      searchType: 'legal_research',\n      caseId,\n      legalContext: `Legal concept analysis for: ${concept}`,\n      maxResults: 15\n    };\n    \n    const results = await this.performSemanticSearch(query);\n    return results.results;\n  }\n  \n  async findEvidence(factPattern: string, caseId?: string): Promise<SearchResult[]> {\n    const query: SemanticSearchQuery = {\n      query: factPattern,\n      searchType: 'evidence_analysis',\n      caseId,\n      legalContext: `Evidence search for fact pattern: ${factPattern}`,\n      maxResults: 20\n    };\n    \n    const results = await this.performSemanticSearch(query);\n    return results.results;\n  }\n  \n  async researchPrecedents(legalIssue: string): Promise<SearchResult[]> {\n    const query: SemanticSearchQuery = {\n      query: legalIssue,\n      searchType: 'precedent_search',\n      legalContext: `Precedent research for: ${legalIssue}`,\n      maxResults: 25\n    };\n    \n    const results = await this.performSemanticSearch(query);\n    return results.results;\n  }\n}\n\nexport const semanticSearchService = new SemanticSearchService();","size_bytes":15945},"shared/types.ts":{"content":"// Case Management Types\nexport interface Case {\n  id: string;\n  title: string;\n  description: string;\n  caseNumber?: string;\n  jurisdiction: string;\n  clientName: string;\n  status: 'active' | 'pending' | 'closed' | 'appealed';\n  dateOpened: string;\n  lastUpdated: string;\n  tags?: string[];\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  assignedAttorney?: string;\n  courtName?: string;\n  judge?: string;\n  nextHearing?: string;\n  statute?: string;\n  damages?: string;\n  summary?: string;\n}\n\nexport interface TimelineEvent {\n  id: string;\n  caseId: string;\n  date: string;\n  title: string;\n  description: string;\n  type: 'filing' | 'hearing' | 'motion' | 'discovery' | 'settlement' | 'ruling' | 'appeal' | 'other';\n  significance: 'low' | 'medium' | 'high' | 'critical';\n  documents?: string[];\n  notes?: string;\n  outcome?: string;\n}\n\nexport type DocType = \"pdf\" | \"letter\" | \"transcript\" | \"image\" | \"audio\" | \"video\" | \"evidence\";\n\nexport interface Doc {\n  id: string;\n  caseId: string;\n  title: string;\n  description?: string;\n  type: DocType;\n  filePath?: string;\n  url?: string;\n  size?: number;\n  uploadDate: string;\n  date?: string;\n  tags?: string[];\n  category?: string;\n  confidential?: boolean;\n  summary?: string;\n}\n\nexport interface Evidence {\n  id: string;\n  caseId: string;\n  title: string;\n  type: 'photo' | 'video' | 'audio' | 'document' | 'physical' | 'digital';\n  description: string;\n  location?: string;\n  dateCollected: string;\n  collectedBy: string;\n  filePath?: string;\n  url?: string;\n  tags?: string[];\n  significance: 'low' | 'medium' | 'high' | 'critical';\n  summary: string;\n  chain_of_custody?: Array<{\n    date: string;\n    handler: string;\n    action: string;\n  }>;\n}\n\nexport interface CaseNote {\n  id: string;\n  caseId: string;\n  title: string;\n  content: string;\n  date: string;\n  author: string;\n  category: 'general' | 'strategy' | 'research' | 'client' | 'court' | 'discovery';\n  priority: 'low' | 'medium' | 'high';\n  tags?: string[];\n  confidential?: boolean;\n}\n\nexport interface FOIARequest {\n  id: string;\n  caseId: string;\n  agency: string;\n  requestDate: string;\n  description: string;\n  status: 'submitted' | 'acknowledged' | 'processing' | 'partial' | 'completed' | 'denied' | 'appealed';\n  responseDate?: string;\n  documentsReceived?: number;\n  estimatedCost?: number;\n  actualCost?: number;\n  notes?: string;\n  trackingNumber?: string;\n}\n\nexport interface SearchResult {\n  id: string;\n  title: string;\n  type: 'case' | 'document' | 'timeline' | 'evidence' | 'note' | 'foia';\n  relevance: number;\n  snippet: string;\n  caseId?: string;\n  date?: string;\n  category?: string;\n}\n\nexport interface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  subscriptionStatus?: 'free' | 'trial' | 'active' | 'cancelled' | 'expired';\n  subscriptionStartDate?: string;\n  subscriptionEndDate?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface CaseAnalytics {\n  id: string;\n  caseId: string;\n  outcomeConfidence: number;\n  riskFactors: string[];\n  strengths: string[];\n  recommendations: string[];\n  similarCases: Array<{\n    name: string;\n    outcome: string;\n    similarity: number;\n    keyFactors: string[];\n  }>;\n  precedents: Array<{\n    caseName: string;\n    citation: string;\n    relevance: number;\n    keyHolding: string;\n  }>;\n  strategicInsights: string[];\n  timeline: Array<{\n    phase: string;\n    estimatedDuration: string;\n    keyActions: string[];\n  }>;\n}\n\nexport interface GeneratedBrief {\n  title: string;\n  sections: Array<{\n    heading: string;\n    content: string;\n    citations?: string[];\n  }>;\n  tableOfContents: Array<{\n    section: string;\n    page: number;\n  }>;\n  wordCount: number;\n  generatedAt: Date;\n}\n\nexport interface BriefTemplate {\n  id: string;\n  name: string;\n  type: 'motion' | 'complaint' | 'response' | 'appeal' | 'summary_judgment' | 'injunction';\n  description: string;\n  defaultSections: string[];\n  sections: Array<{\n    title: string;\n    content: string;\n    isRequired: boolean;\n  }>;\n  metadata: {\n    jurisdiction?: string;\n    courtLevel?: string;\n    estimatedLength: number;\n  };\n}\n\n// OCR and Document Processing Types\nexport interface OCRResult {\n  extractedText: string;\n  confidence: number;\n  metadata: {\n    pageCount?: number;\n    documentType: string;\n    language: string;\n    processingTime: number;\n    fileSize: number;\n  };\n  entities: {\n    dates: string[];\n    names: string[];\n    organizations: string[];\n    locations: string[];\n    legalCitations: string[];\n    caseNumbers: string[];\n    statutes: string[];\n  };\n  summary: string;\n  keyPoints: string[];\n}\n\nexport interface DocumentAnalysis {\n  documentType: 'complaint' | 'motion' | 'order' | 'brief' | 'contract' | 'correspondence' | 'evidence' | 'other';\n  legalIssues: string[];\n  parties: string[];\n  importantDates: Array<{\n    date: string;\n    event: string;\n    significance: string;\n  }>;\n  legalCitations: Array<{\n    citation: string;\n    type: 'case' | 'statute' | 'regulation' | 'rule';\n    relevance: number;\n  }>;\n  keyTerms: string[];\n  actionItems: string[];\n  relevanceScore: number;\n}\n\n// Legal Research Types\nexport interface LegalPrecedent {\n  caseName: string;\n  citation: string;\n  court: string;\n  year: number;\n  jurisdiction: string;\n  keyHolding: string;\n  relevantFacts: string;\n  legalPrinciples: string[];\n  relevanceScore: number;\n  procedurralPosture: string;\n  outcome: string;\n  keyQuotes: string[];\n}\n\nexport interface StatuteReference {\n  title: string;\n  section: string;\n  jurisdiction: string;\n  text: string;\n  applicability: string;\n  relevanceScore: number;\n  relatedCases: string[];\n}\n\nexport interface ResearchQuery {\n  legalIssue: string;\n  jurisdiction?: string;\n  caseType: string;\n  factualContext: string;\n  dateRange?: {\n    startYear: number;\n    endYear: number;\n  };\n  courtLevel?: 'supreme' | 'appellate' | 'district' | 'all';\n  includeStatutes?: boolean;\n  maxResults?: number;\n}\n\nexport interface ResearchResults {\n  query: ResearchQuery;\n  precedents: LegalPrecedent[];\n  statutes: StatuteReference[];\n  searchSummary: string;\n  legalTheories: string[];\n  strengthAssessment: {\n    strongPrecedents: number;\n    moderatePrecedents: number;\n    weakPrecedents: number;\n    overallStrength: 'strong' | 'moderate' | 'weak';\n    keyRisks: string[];\n  };\n  recommendedStrategy: string;\n  additionalResearchSuggestions: string[];\n}\n\n// Semantic Search Types\nexport interface SemanticSearchQuery {\n  query: string;\n  caseId?: string;\n  documentTypes?: string[];\n  dateRange?: {\n    startDate: string;\n    endDate: string;\n  };\n  legalContext?: string;\n  searchType: 'general' | 'legal_research' | 'fact_finding' | 'precedent_search' | 'evidence_analysis';\n  maxResults?: number;\n  includeRelevanceScoring?: boolean;\n}\n\nexport interface SemanticSearchResult {\n  documentId: string;\n  title: string;\n  documentType: string;\n  relevanceScore: number;\n  matchedContent: string[];\n  keyTermsFound: string[];\n  contextualSummary: string;\n  legalSignificance?: string;\n  relatedEntities: {\n    people: string[];\n    organizations: string[];\n    dates: string[];\n    locations: string[];\n  };\n  citationsFound: string[];\n  actionableInsights: string[];\n  extractedFacts: string[];\n  filePath?: string;\n  pageReferences?: number[];\n}\n\nexport interface SemanticSearchResults {\n  query: SemanticSearchQuery;\n  results: SemanticSearchResult[];\n  totalResults: number;\n  searchAnalysis: {\n    conceptsCovered: string[];\n    legalIssuesIdentified: string[];\n    evidenceTypes: string[];\n    researchGaps: string[];\n  };\n  relatedQueries: string[];\n  searchSuggestions: string[];\n}","size_bytes":7657}},"version":1}