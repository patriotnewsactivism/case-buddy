import React, { useState } from 'react';

const InterviewSimulator = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [userResponse, setUserResponse] = useState('');
  const [feedback, setFeedback] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [progress, setProgress] = useState(35);
  
  // Sample interview questions - in a real app this would be generated by AI
  const questions = [
    {
      id: 1,
      type: "Market Sizing",
      question: "How would you estimate the market size for electric bicycles in the United States?",
      tips: "Structure your approach clearly. Consider different user segments and use reasonable assumptions."
    },
    {
      id: 2,
      type: "Profitability",
      question: "A client's profits have decreased by 20% over the past year. How would you investigate the cause?",
      tips: "Examine both revenue and cost sides. Consider market factors, competition, and internal operations."
    },
    {
      id: 3,
      type: "Market Entry",
      question: "Your client wants to enter the Southeast Asian market. What factors would you consider?",
      tips: "Analyze market attractiveness, entry barriers, competition, and regulatory environment."
    }
  ];
  
  const startRecording = () => {
    setIsRecording(true);
    setFeedback('Recording started. Please verbalize your response...');
  };
  
  const stopRecording = () => {
    setIsRecording(false);
    setFeedback('Analyzing your response with AI...');
    setTimeout(() => {
      setFeedback('Great structure! Consider adding more specific market data for Southeast Asia in your analysis. Your framework explanation was clear but could be more detailed.');
      setProgress(progress + 15);
    }, 2000);
  };
  
  const nextQuestion = () => {
    setCurrentQuestion((prev) => (prev + 1) % questions.length);
    setUserResponse('');
    setFeedback('');
  };
  
  const submitResponse = () => {
    setFeedback('Analyzing your written response with AI...');
    setTimeout(() => {
      setFeedback('Good approach to the problem. Consider segmenting the market further and providing more quantitative estimates. Your written response shows strong analytical thinking.');
      setProgress(progress + 10);
    }, 2000);
  };

  return (
    <div className="border border-gray-200 rounded-lg p-6 bg-white">
      <h3 className="font-semibold text-lg mb-4">Case Interview Simulator</h3>
      
      <div className="mb-6">
        <div className="flex justify-between mb-2">
          <span className="text-sm font-medium text-gray-700">Interview Progress</span>
          <span className="text-sm font-medium text-gray-700">{progress}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div 
            className="bg-blue-600 h-2.5 rounded-full transition-all duration-500" 
            style={{ width: `${progress}%` }}
          ></div>
        </div>
      </div>
      
      <div className="mb-6 p-4 bg-blue-50 rounded-lg">
        <div className="flex justify-between items-center mb-3">
          <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
            {questions[currentQuestion].type}
          </span>
          <span className="text-gray-500 text-sm">
            Question {currentQuestion + 1} of {questions.length}
          </span>
        </div>
        
        <h4 className="text-lg font-medium mb-3">
          {questions[currentQuestion].question}
        </h4>
        
        <div className="p-3 bg-blue-100 rounded-md">
          <p className="text-blue-800 text-sm">
            <span className="font-semibold">Tip:</span> {questions[currentQuestion].tips}
          </p>
        </div>
      </div>
      
      <div className="mb-6">
        <label className="block text-gray-700 mb-2">Your Response</label>
        <textarea
          value={userResponse}
          onChange={(e) => setUserResponse(e.target.value)}
          className="w-full h-32 p-3 border border-gray-300 rounded-md"
          placeholder="Type your response here or use voice recording..."
        />
      </div>
      
      <div className="flex flex-wrap gap-3 mb-4">
        {!isRecording ? (
          <button 
            onClick={startRecording}
            className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md transition-colors flex items-center"
          >
            <span>üé§</span>
            <span className="ml-2">Start Voice Recording</span>
          </button>
        ) : (
          <button 
            onClick={stopRecording}
            className="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md transition-colors flex items-center"
          >
            <span>‚èπÔ∏è</span>
            <span className="ml-2">Stop Recording</span>
          </button>
        )}
        
        <button 
          onClick={submitResponse}
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
        >
          Submit Written Response
        </button>
        
        <button 
          onClick={nextQuestion}
          className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md transition-colors"
        >
          Next Question
        </button>
      </div>
      
      {feedback && (
        <div className="p-4 bg-green-50 border border-green-200 rounded-lg animate-fade-in">
          <p className="text-green-800">
            <span className="font-semibold">AI Feedback:</span> {feedback}
          </p>
        </div>
      )}
    </div>
  );
};

export default InterviewSimulator;