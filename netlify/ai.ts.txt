import type { Handler } from "@netlify/functions";
import { requireUser } from "./_lib/auth";

const PROVIDER = process.env.AI_PROVIDER || (process.env.ANTHROPIC_API_KEY ? "anthropic" : "openai");

export const handler: Handler = async (event, context) => {
  try {
    requireUser(context);

    if (event.httpMethod !== "POST") {
      return { statusCode: 405, body: JSON.stringify({ error: "Method not allowed" }) };
    }

    const body = event.body ? JSON.parse(event.body) : {};
    const { mode = "complete", input, system, imagePrompt } = body;

    if (mode === "image") {
      // IMAGE GENERATION (OpenAI only in this sample)
      if (!process.env.OPENAI_API_KEY) return { statusCode: 400, body: JSON.stringify({ error: "Image model requires OPENAI_API_KEY" }) };
      const { OpenAI } = await import("openai");
      const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

      const model = process.env.OPENAI_IMAGE_MODEL || "gpt-image-1";
      const resp = await openai.images.generate({ model, prompt: imagePrompt || input, size: "1024x1024" });
      const dataUrl = resp.data?.[0]?.b64_json ? `data:image/png;base64,${resp.data[0].b64_json}` : null;
      return { statusCode: 200, body: JSON.stringify({ image: dataUrl }) };
    }

    if (PROVIDER === "anthropic") {
      if (!process.env.ANTHROPIC_API_KEY) throw new Error("Missing ANTHROPIC_API_KEY");
      const { default: Anthropic } = await import("@anthropic-ai/sdk");
      const anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });

      const resp = await anthropic.messages.create({
        model: process.env.ANTHROPIC_MODEL || "claude-3-5-sonnet-20241022",
        max_tokens: 1600,
        system: system || "You are a precise legal assistant. Be concise and accurate.",
        messages: [{ role: "user", content: typeof input === "string" ? input : JSON.stringify(input) }],
      });

      const text = (resp.content && (resp.content[0] as any)?.text) || "";
      return { statusCode: 200, body: JSON.stringify({ text }) };
    }

    // OpenAI text
    if (!process.env.OPENAI_API_KEY) throw new Error("Missing OPENAI_API_KEY");
    const { OpenAI } = await import("openai");
    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

    const resp = await openai.chat.completions.create({
      model: process.env.OPENAI_MODEL || "gpt-4o-mini",
      messages: [
        { role: "system", content: system || "You are a precise legal assistant. Be concise and accurate." },
        { role: "user", content: typeof input === "string" ? input : JSON.stringify(input) },
      ],
    });
    const text = resp.choices?.[0]?.message?.content ?? "";
    return { statusCode: 200, body: JSON.stringify({ text }) };

  } catch (err: any) {
    const status = err?.statusCode || 500;
    return { statusCode: status, body: JSON.stringify({ error: err?.message || "Server error" }) };
  }
};
